
STMProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005358  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005468  08005468  00015468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800555c  0800555c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800555c  0800555c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800555c  0800555c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b4c  20000060  080055c4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bac  080055c4  00021bac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014496  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d3b  00000000  00000000  00034562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  000372a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eab  00000000  00000000  00038568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000029d0  00000000  00000000  00039413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cd9  00000000  00000000  0003bde3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009383b  00000000  00000000  0004fabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005430  00000000  00000000  000e32f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e8728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005450 	.word	0x08005450

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005450 	.word	0x08005450

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fafa 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f828 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8f0 	bl	8000340 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000160:	f000 f86a 	bl	8000238 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f8c2 	bl	80002ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000168:	f001 ffec 	bl	8002144 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 800016c:	4a09      	ldr	r2, [pc, #36]	; (8000194 <main+0x44>)
 800016e:	2100      	movs	r1, #0
 8000170:	4809      	ldr	r0, [pc, #36]	; (8000198 <main+0x48>)
 8000172:	f002 f84d 	bl	8002210 <osThreadNew>
 8000176:	4603      	mov	r3, r0
 8000178:	4a08      	ldr	r2, [pc, #32]	; (800019c <main+0x4c>)
 800017a:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 800017c:	4a08      	ldr	r2, [pc, #32]	; (80001a0 <main+0x50>)
 800017e:	2100      	movs	r1, #0
 8000180:	4808      	ldr	r0, [pc, #32]	; (80001a4 <main+0x54>)
 8000182:	f002 f845 	bl	8002210 <osThreadNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a07      	ldr	r2, [pc, #28]	; (80001a8 <main+0x58>)
 800018a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800018c:	f002 f80c 	bl	80021a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000190:	e7fe      	b.n	8000190 <main+0x40>
 8000192:	bf00      	nop
 8000194:	080054b4 	.word	0x080054b4
 8000198:	08000401 	.word	0x08000401
 800019c:	2000010c 	.word	0x2000010c
 80001a0:	080054d8 	.word	0x080054d8
 80001a4:	08000461 	.word	0x08000461
 80001a8:	20000110 	.word	0x20000110

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f004 fcb6 	bl	8004b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ce:	2301      	movs	r3, #1
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e0:	2302      	movs	r3, #2
 80001e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0318 	add.w	r3, r7, #24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fda5 	bl	8000d44 <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000200:	f000 f958 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000204:	230f      	movs	r3, #15
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000208:	2302      	movs	r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f001 f812 	bl	8001248 <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800022a:	f000 f943 	bl	80004b4 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	; 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	; 0x28
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800023e:	f107 0320 	add.w	r3, r7, #32
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800025a:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <MX_TIM3_Init+0xac>)
 800025c:	4a22      	ldr	r2, [pc, #136]	; (80002e8 <MX_TIM3_Init+0xb0>)
 800025e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000260:	4b20      	ldr	r3, [pc, #128]	; (80002e4 <MX_TIM3_Init+0xac>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000266:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <MX_TIM3_Init+0xac>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800026c:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <MX_TIM3_Init+0xac>)
 800026e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <MX_TIM3_Init+0xac>)
 8000276:	2200      	movs	r2, #0
 8000278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800027a:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <MX_TIM3_Init+0xac>)
 800027c:	2280      	movs	r2, #128	; 0x80
 800027e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000280:	4818      	ldr	r0, [pc, #96]	; (80002e4 <MX_TIM3_Init+0xac>)
 8000282:	f001 f96f 	bl	8001564 <HAL_TIM_PWM_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800028c:	f000 f912 	bl	80004b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000290:	2300      	movs	r3, #0
 8000292:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000294:	2300      	movs	r3, #0
 8000296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000298:	f107 0320 	add.w	r3, r7, #32
 800029c:	4619      	mov	r1, r3
 800029e:	4811      	ldr	r0, [pc, #68]	; (80002e4 <MX_TIM3_Init+0xac>)
 80002a0:	f001 fd22 	bl	8001ce8 <HAL_TIMEx_MasterConfigSynchronization>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80002aa:	f000 f903 	bl	80004b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002ae:	2360      	movs	r3, #96	; 0x60
 80002b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2200      	movs	r2, #0
 80002c2:	4619      	mov	r1, r3
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <MX_TIM3_Init+0xac>)
 80002c6:	f001 fa3f 	bl	8001748 <HAL_TIM_PWM_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80002d0:	f000 f8f0 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80002d4:	4803      	ldr	r0, [pc, #12]	; (80002e4 <MX_TIM3_Init+0xac>)
 80002d6:	f000 f939 	bl	800054c <HAL_TIM_MspPostInit>

}
 80002da:	bf00      	nop
 80002dc:	3728      	adds	r7, #40	; 0x28
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000007c 	.word	0x2000007c
 80002e8:	40000400 	.word	0x40000400

080002ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <MX_USART2_UART_Init+0x50>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000324:	f001 fd3e 	bl	8001da4 <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032e:	f000 f8c1 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200000c4 	.word	0x200000c4
 800033c:	40004400 	.word	0x40004400

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000354:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <MX_GPIO_Init+0xb4>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a26      	ldr	r2, [pc, #152]	; (80003f4 <MX_GPIO_Init+0xb4>)
 800035a:	f043 0310 	orr.w	r3, r3, #16
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <MX_GPIO_Init+0xb4>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0310 	and.w	r3, r3, #16
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036c:	4b21      	ldr	r3, [pc, #132]	; (80003f4 <MX_GPIO_Init+0xb4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a20      	ldr	r2, [pc, #128]	; (80003f4 <MX_GPIO_Init+0xb4>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <MX_GPIO_Init+0xb4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0320 	and.w	r3, r3, #32
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_GPIO_Init+0xb4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a1a      	ldr	r2, [pc, #104]	; (80003f4 <MX_GPIO_Init+0xb4>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_GPIO_Init+0xb4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003a2:	4815      	ldr	r0, [pc, #84]	; (80003f8 <MX_GPIO_Init+0xb8>)
 80003a4:	f000 fc9c 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2120      	movs	r1, #32
 80003ac:	4813      	ldr	r0, [pc, #76]	; (80003fc <MX_GPIO_Init+0xbc>)
 80003ae:	f000 fc97 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b8:	2301      	movs	r3, #1
 80003ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	2300      	movs	r3, #0
 80003be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	480b      	ldr	r0, [pc, #44]	; (80003f8 <MX_GPIO_Init+0xb8>)
 80003cc:	f000 fb04 	bl	80009d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003d0:	2320      	movs	r3, #32
 80003d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2302      	movs	r3, #2
 80003de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	4805      	ldr	r0, [pc, #20]	; (80003fc <MX_GPIO_Init+0xbc>)
 80003e8:	f000 faf6 	bl	80009d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ec:	bf00      	nop
 80003ee:	3720      	adds	r7, #32
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	40021000 	.word	0x40021000
 80003f8:	40011000 	.word	0x40011000
 80003fc:	40010800 	.word	0x40010800

08000400 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08c      	sub	sp, #48	; 0x30
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t message[35] = {'\0'};
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	221f      	movs	r2, #31
 8000412:	2100      	movs	r1, #0
 8000414:	4618      	mov	r0, r3
 8000416:	f004 fb89 	bl	8004b2c <memset>
	uint8_t num = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	480b      	ldr	r0, [pc, #44]	; (8000454 <StartBlink01+0x54>)
 8000426:	f000 fc73 	bl	8000d10 <HAL_GPIO_TogglePin>
	sprintf(message, "Welcome to lab! Counting = %d\r\n", num);
 800042a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	4909      	ldr	r1, [pc, #36]	; (8000458 <StartBlink01+0x58>)
 8000434:	4618      	mov	r0, r3
 8000436:	f004 fb59 	bl	8004aec <siprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 800043a:	f107 010c 	add.w	r1, r7, #12
 800043e:	2364      	movs	r3, #100	; 0x64
 8000440:	2223      	movs	r2, #35	; 0x23
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <StartBlink01+0x5c>)
 8000444:	f001 fcfe 	bl	8001e44 <HAL_UART_Transmit>
    osDelay(500);
 8000448:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800044c:	f001 ff8a 	bl	8002364 <osDelay>
  {
 8000450:	e7e6      	b.n	8000420 <StartBlink01+0x20>
 8000452:	bf00      	nop
 8000454:	40011000 	.word	0x40011000
 8000458:	0800547c 	.word	0x0800547c
 800045c:	200000c4 	.word	0x200000c4

08000460 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000468:	2100      	movs	r1, #0
 800046a:	480f      	ldr	r0, [pc, #60]	; (80004a8 <StartMotorTask+0x48>)
 800046c:	f001 f8ca 	bl	8001604 <HAL_TIM_PWM_Start>
  int32_t dutyCycle = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000474:	2120      	movs	r1, #32
 8000476:	480d      	ldr	r0, [pc, #52]	; (80004ac <StartMotorTask+0x4c>)
 8000478:	f000 fc4a 	bl	8000d10 <HAL_GPIO_TogglePin>
	  for (dutyCycle = 0; dutyCycle < 50000; dutyCycle += 100) // 65535 is the max
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	e008      	b.n	8000494 <StartMotorTask+0x34>
	        {
	            TIM3->CCR1 = dutyCycle;
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <StartMotorTask+0x50>)
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	6353      	str	r3, [r2, #52]	; 0x34
	            osDelay(100);
 8000488:	2064      	movs	r0, #100	; 0x64
 800048a:	f001 ff6b 	bl	8002364 <osDelay>
	  for (dutyCycle = 0; dutyCycle < 50000; dutyCycle += 100) // 65535 is the max
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3364      	adds	r3, #100	; 0x64
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800049a:	4293      	cmp	r3, r2
 800049c:	ddf1      	ble.n	8000482 <StartMotorTask+0x22>
	        }
      osDelay(100);
 800049e:	2064      	movs	r0, #100	; 0x64
 80004a0:	f001 ff60 	bl	8002364 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004a4:	e7e6      	b.n	8000474 <StartMotorTask+0x14>
 80004a6:	bf00      	nop
 80004a8:	2000007c 	.word	0x2000007c
 80004ac:	40010800 	.word	0x40010800
 80004b0:	40000400 	.word	0x40000400

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	e7fe      	b.n	80004bc <Error_Handler+0x8>
	...

080004c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <HAL_MspInit+0x4c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a10      	ldr	r2, [pc, #64]	; (800050c <HAL_MspInit+0x4c>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_MspInit+0x4c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <HAL_MspInit+0x4c>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_MspInit+0x4c>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_MspInit+0x4c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	210f      	movs	r1, #15
 80004fa:	f06f 0001 	mvn.w	r0, #1
 80004fe:	f000 fa42 	bl	8000986 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <HAL_TIM_PWM_MspInit+0x34>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d10b      	bne.n	800053a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <HAL_TIM_PWM_MspInit+0x38>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a08      	ldr	r2, [pc, #32]	; (8000548 <HAL_TIM_PWM_MspInit+0x38>)
 8000528:	f043 0302 	orr.w	r3, r3, #2
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_TIM_PWM_MspInit+0x38>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 0302 	and.w	r3, r3, #2
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	40000400 	.word	0x40000400
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <HAL_TIM_MspPostInit+0x58>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d117      	bne.n	800059c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <HAL_TIM_MspPostInit+0x5c>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <HAL_TIM_MspPostInit+0x5c>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <HAL_TIM_MspPostInit+0x5c>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000584:	2340      	movs	r3, #64	; 0x40
 8000586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000588:	2302      	movs	r3, #2
 800058a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <HAL_TIM_MspPostInit+0x60>)
 8000598:	f000 fa1e 	bl	80009d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40000400 	.word	0x40000400
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010800 	.word	0x40010800

080005b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <HAL_UART_MspInit+0x88>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d12f      	bne.n	8000630 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <HAL_UART_MspInit+0x8c>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <HAL_UART_MspInit+0x8c>)
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	61d3      	str	r3, [r2, #28]
 80005dc:	4b17      	ldr	r3, [pc, #92]	; (800063c <HAL_UART_MspInit+0x8c>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <HAL_UART_MspInit+0x8c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_UART_MspInit+0x8c>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <HAL_UART_MspInit+0x8c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000600:	2304      	movs	r3, #4
 8000602:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000608:	2303      	movs	r3, #3
 800060a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4619      	mov	r1, r3
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <HAL_UART_MspInit+0x90>)
 8000614:	f000 f9e0 	bl	80009d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000618:	2308      	movs	r3, #8
 800061a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <HAL_UART_MspInit+0x90>)
 800062c:	f000 f9d4 	bl	80009d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40004400 	.word	0x40004400
 800063c:	40021000 	.word	0x40021000
 8000640:	40010800 	.word	0x40010800

08000644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <NMI_Handler+0x4>

0800064a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <HardFault_Handler+0x4>

08000650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <MemManage_Handler+0x4>

08000656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <BusFault_Handler+0x4>

0800065c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <UsageFault_Handler+0x4>

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000672:	f000 f8b1 	bl	80007d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000676:	f003 fa81 	bl	8003b7c <xTaskGetSchedulerState>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d001      	beq.n	8000684 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000680:	f003 ffda 	bl	8004638 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}

08000688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000690:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <_sbrk+0x5c>)
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <_sbrk+0x60>)
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <_sbrk+0x64>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <_sbrk+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <_sbrk+0x64>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d207      	bcs.n	80006c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b8:	f004 fa40 	bl	8004b3c <__errno>
 80006bc:	4603      	mov	r3, r0
 80006be:	220c      	movs	r2, #12
 80006c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c6:	e009      	b.n	80006dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <_sbrk+0x64>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	4a05      	ldr	r2, [pc, #20]	; (80006ec <_sbrk+0x64>)
 80006d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20005000 	.word	0x20005000
 80006e8:	00000400 	.word	0x00000400
 80006ec:	20000114 	.word	0x20000114
 80006f0:	20001bb0 	.word	0x20001bb0

080006f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000700:	f7ff fff8 	bl	80006f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000706:	490c      	ldr	r1, [pc, #48]	; (8000738 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000708:	4a0c      	ldr	r2, [pc, #48]	; (800073c <LoopFillZerobss+0x16>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a09      	ldr	r2, [pc, #36]	; (8000740 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800071c:	4c09      	ldr	r4, [pc, #36]	; (8000744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072a:	f004 fa0d 	bl	8004b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072e:	f7ff fd0f 	bl	8000150 <main>
  bx lr
 8000732:	4770      	bx	lr
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800073c:	08005564 	.word	0x08005564
  ldr r2, =_sbss
 8000740:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000744:	20001bac 	.word	0x20001bac

08000748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_2_IRQHandler>
	...

0800074c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_Init+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_Init+0x28>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f907 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000762:	200f      	movs	r0, #15
 8000764:	f000 f808 	bl	8000778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000768:	f7ff feaa 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40022000 	.word	0x40022000

08000778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x54>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x58>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000792:	fbb2 f3f3 	udiv	r3, r2, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f911 	bl	80009be <HAL_SYSTICK_Config>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00e      	b.n	80007c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d80a      	bhi.n	80007c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ac:	2200      	movs	r2, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b4:	f000 f8e7 	bl	8000986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b8:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <HAL_InitTick+0x5c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	e000      	b.n	80007c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x1c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x20>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	4a03      	ldr	r2, [pc, #12]	; (80007f8 <HAL_IncTick+0x20>)
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000118 	.word	0x20000118

080007fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <HAL_GetTick+0x10>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	20000118 	.word	0x20000118

08000810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	210f      	movs	r1, #15
 800094c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000950:	f7ff ff90 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff49 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000998:	f7ff ff5e 	bl	8000858 <__NVIC_GetPriorityGrouping>
 800099c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff ff90 	bl	80008c8 <NVIC_EncodePriority>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff5f 	bl	8000874 <__NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ffb0 	bl	800092c <SysTick_Config>
 80009cc:	4603      	mov	r3, r0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d8:	b480      	push	{r7}
 80009da:	b08b      	sub	sp, #44	; 0x2c
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ea:	e169      	b.n	8000cc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009ec:	2201      	movs	r2, #1
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	4013      	ands	r3, r2
 80009fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	f040 8158 	bne.w	8000cba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	4a9a      	ldr	r2, [pc, #616]	; (8000c78 <HAL_GPIO_Init+0x2a0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d05e      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a14:	4a98      	ldr	r2, [pc, #608]	; (8000c78 <HAL_GPIO_Init+0x2a0>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d875      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a1a:	4a98      	ldr	r2, [pc, #608]	; (8000c7c <HAL_GPIO_Init+0x2a4>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d058      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a20:	4a96      	ldr	r2, [pc, #600]	; (8000c7c <HAL_GPIO_Init+0x2a4>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d86f      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a26:	4a96      	ldr	r2, [pc, #600]	; (8000c80 <HAL_GPIO_Init+0x2a8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d052      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a2c:	4a94      	ldr	r2, [pc, #592]	; (8000c80 <HAL_GPIO_Init+0x2a8>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d869      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a32:	4a94      	ldr	r2, [pc, #592]	; (8000c84 <HAL_GPIO_Init+0x2ac>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d04c      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a38:	4a92      	ldr	r2, [pc, #584]	; (8000c84 <HAL_GPIO_Init+0x2ac>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d863      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a3e:	4a92      	ldr	r2, [pc, #584]	; (8000c88 <HAL_GPIO_Init+0x2b0>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d046      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
 8000a44:	4a90      	ldr	r2, [pc, #576]	; (8000c88 <HAL_GPIO_Init+0x2b0>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d85d      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a4a:	2b12      	cmp	r3, #18
 8000a4c:	d82a      	bhi.n	8000aa4 <HAL_GPIO_Init+0xcc>
 8000a4e:	2b12      	cmp	r3, #18
 8000a50:	d859      	bhi.n	8000b06 <HAL_GPIO_Init+0x12e>
 8000a52:	a201      	add	r2, pc, #4	; (adr r2, 8000a58 <HAL_GPIO_Init+0x80>)
 8000a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a58:	08000ad3 	.word	0x08000ad3
 8000a5c:	08000aad 	.word	0x08000aad
 8000a60:	08000abf 	.word	0x08000abf
 8000a64:	08000b01 	.word	0x08000b01
 8000a68:	08000b07 	.word	0x08000b07
 8000a6c:	08000b07 	.word	0x08000b07
 8000a70:	08000b07 	.word	0x08000b07
 8000a74:	08000b07 	.word	0x08000b07
 8000a78:	08000b07 	.word	0x08000b07
 8000a7c:	08000b07 	.word	0x08000b07
 8000a80:	08000b07 	.word	0x08000b07
 8000a84:	08000b07 	.word	0x08000b07
 8000a88:	08000b07 	.word	0x08000b07
 8000a8c:	08000b07 	.word	0x08000b07
 8000a90:	08000b07 	.word	0x08000b07
 8000a94:	08000b07 	.word	0x08000b07
 8000a98:	08000b07 	.word	0x08000b07
 8000a9c:	08000ab5 	.word	0x08000ab5
 8000aa0:	08000ac9 	.word	0x08000ac9
 8000aa4:	4a79      	ldr	r2, [pc, #484]	; (8000c8c <HAL_GPIO_Init+0x2b4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aaa:	e02c      	b.n	8000b06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	623b      	str	r3, [r7, #32]
          break;
 8000ab2:	e029      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	623b      	str	r3, [r7, #32]
          break;
 8000abc:	e024      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	3308      	adds	r3, #8
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e01f      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	330c      	adds	r3, #12
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	e01a      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d102      	bne.n	8000ae0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ada:	2304      	movs	r3, #4
 8000adc:	623b      	str	r3, [r7, #32]
          break;
 8000ade:	e013      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d105      	bne.n	8000af4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae8:	2308      	movs	r3, #8
 8000aea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	611a      	str	r2, [r3, #16]
          break;
 8000af2:	e009      	b.n	8000b08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af4:	2308      	movs	r3, #8
 8000af6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	615a      	str	r2, [r3, #20]
          break;
 8000afe:	e003      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
          break;
 8000b04:	e000      	b.n	8000b08 <HAL_GPIO_Init+0x130>
          break;
 8000b06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2bff      	cmp	r3, #255	; 0xff
 8000b0c:	d801      	bhi.n	8000b12 <HAL_GPIO_Init+0x13a>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	e001      	b.n	8000b16 <HAL_GPIO_Init+0x13e>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3304      	adds	r3, #4
 8000b16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	2bff      	cmp	r3, #255	; 0xff
 8000b1c:	d802      	bhi.n	8000b24 <HAL_GPIO_Init+0x14c>
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	e002      	b.n	8000b2a <HAL_GPIO_Init+0x152>
 8000b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b26:	3b08      	subs	r3, #8
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	210f      	movs	r1, #15
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	6a39      	ldr	r1, [r7, #32]
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	431a      	orrs	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 80b1 	beq.w	8000cba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b58:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <HAL_GPIO_Init+0x2b8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a4c      	ldr	r2, [pc, #304]	; (8000c90 <HAL_GPIO_Init+0x2b8>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b4a      	ldr	r3, [pc, #296]	; (8000c90 <HAL_GPIO_Init+0x2b8>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b70:	4a48      	ldr	r2, [pc, #288]	; (8000c94 <HAL_GPIO_Init+0x2bc>)
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	220f      	movs	r2, #15
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a40      	ldr	r2, [pc, #256]	; (8000c98 <HAL_GPIO_Init+0x2c0>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d013      	beq.n	8000bc4 <HAL_GPIO_Init+0x1ec>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a3f      	ldr	r2, [pc, #252]	; (8000c9c <HAL_GPIO_Init+0x2c4>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d00d      	beq.n	8000bc0 <HAL_GPIO_Init+0x1e8>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3e      	ldr	r2, [pc, #248]	; (8000ca0 <HAL_GPIO_Init+0x2c8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d007      	beq.n	8000bbc <HAL_GPIO_Init+0x1e4>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a3d      	ldr	r2, [pc, #244]	; (8000ca4 <HAL_GPIO_Init+0x2cc>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d101      	bne.n	8000bb8 <HAL_GPIO_Init+0x1e0>
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	e006      	b.n	8000bc6 <HAL_GPIO_Init+0x1ee>
 8000bb8:	2304      	movs	r3, #4
 8000bba:	e004      	b.n	8000bc6 <HAL_GPIO_Init+0x1ee>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e002      	b.n	8000bc6 <HAL_GPIO_Init+0x1ee>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <HAL_GPIO_Init+0x1ee>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bc8:	f002 0203 	and.w	r2, r2, #3
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	4093      	lsls	r3, r2
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bd6:	492f      	ldr	r1, [pc, #188]	; (8000c94 <HAL_GPIO_Init+0x2bc>)
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3302      	adds	r3, #2
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d006      	beq.n	8000bfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	492c      	ldr	r1, [pc, #176]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	608b      	str	r3, [r1, #8]
 8000bfc:	e006      	b.n	8000c0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	4928      	ldr	r1, [pc, #160]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d006      	beq.n	8000c26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	4922      	ldr	r1, [pc, #136]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60cb      	str	r3, [r1, #12]
 8000c24:	e006      	b.n	8000c34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	491e      	ldr	r1, [pc, #120]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c30:	4013      	ands	r3, r2
 8000c32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c40:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	4918      	ldr	r1, [pc, #96]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	604b      	str	r3, [r1, #4]
 8000c4c:	e006      	b.n	8000c5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4914      	ldr	r1, [pc, #80]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d021      	beq.n	8000cac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	e021      	b.n	8000cba <HAL_GPIO_Init+0x2e2>
 8000c76:	bf00      	nop
 8000c78:	10320000 	.word	0x10320000
 8000c7c:	10310000 	.word	0x10310000
 8000c80:	10220000 	.word	0x10220000
 8000c84:	10210000 	.word	0x10210000
 8000c88:	10120000 	.word	0x10120000
 8000c8c:	10110000 	.word	0x10110000
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010000 	.word	0x40010000
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	40010c00 	.word	0x40010c00
 8000ca0:	40011000 	.word	0x40011000
 8000ca4:	40011400 	.word	0x40011400
 8000ca8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_GPIO_Init+0x304>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	4909      	ldr	r1, [pc, #36]	; (8000cdc <HAL_GPIO_Init+0x304>)
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f47f ae8e 	bne.w	80009ec <HAL_GPIO_Init+0x14>
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	372c      	adds	r7, #44	; 0x2c
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
 8000cec:	4613      	mov	r3, r2
 8000cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf0:	787b      	ldrb	r3, [r7, #1]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cfc:	e003      	b.n	8000d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cfe:	887b      	ldrh	r3, [r7, #2]
 8000d00:	041a      	lsls	r2, r3, #16
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	611a      	str	r2, [r3, #16]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4013      	ands	r3, r2
 8000d28:	041a      	lsls	r2, r3, #16
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43d9      	mvns	r1, r3
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	400b      	ands	r3, r1
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	611a      	str	r2, [r3, #16]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
	...

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e272      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8087 	beq.w	8000e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d64:	4b92      	ldr	r3, [pc, #584]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d00c      	beq.n	8000d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d70:	4b8f      	ldr	r3, [pc, #572]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d112      	bne.n	8000da2 <HAL_RCC_OscConfig+0x5e>
 8000d7c:	4b8c      	ldr	r3, [pc, #560]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d88:	d10b      	bne.n	8000da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8a:	4b89      	ldr	r3, [pc, #548]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d06c      	beq.n	8000e70 <HAL_RCC_OscConfig+0x12c>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d168      	bne.n	8000e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e24c      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000daa:	d106      	bne.n	8000dba <HAL_RCC_OscConfig+0x76>
 8000dac:	4b80      	ldr	r3, [pc, #512]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a7f      	ldr	r2, [pc, #508]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e02e      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x98>
 8000dc2:	4b7b      	ldr	r3, [pc, #492]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a7a      	ldr	r2, [pc, #488]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b78      	ldr	r3, [pc, #480]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a77      	ldr	r2, [pc, #476]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e01d      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0xbc>
 8000de6:	4b72      	ldr	r3, [pc, #456]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a71      	ldr	r2, [pc, #452]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a6e      	ldr	r2, [pc, #440]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e00b      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000e00:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a6a      	ldr	r2, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b68      	ldr	r3, [pc, #416]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a67      	ldr	r2, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d013      	beq.n	8000e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fcec 	bl	80007fc <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e28:	f7ff fce8 	bl	80007fc <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b64      	cmp	r3, #100	; 0x64
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e200      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0xe4>
 8000e46:	e014      	b.n	8000e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fcd8 	bl	80007fc <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fcd4 	bl	80007fc <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b64      	cmp	r3, #100	; 0x64
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e1ec      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f0      	bne.n	8000e50 <HAL_RCC_OscConfig+0x10c>
 8000e6e:	e000      	b.n	8000e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d063      	beq.n	8000f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e8a:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d11c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
 8000e96:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d116      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_RCC_OscConfig+0x176>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d001      	beq.n	8000eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e1c0      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4939      	ldr	r1, [pc, #228]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ece:	e03a      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d020      	beq.n	8000f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <HAL_RCC_OscConfig+0x270>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fc8d 	bl	80007fc <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fc89 	bl	80007fc <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e1a1      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4927      	ldr	r1, [pc, #156]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
 8000f18:	e015      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc6c 	bl	80007fc <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f28:	f7ff fc68 	bl	80007fc <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e180      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d03a      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d019      	beq.n	8000f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fc4c 	bl	80007fc <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f68:	f7ff fc48 	bl	80007fc <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e160      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 face 	bl	8001528 <RCC_Delay>
 8000f8c:	e01c      	b.n	8000fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_RCC_OscConfig+0x274>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f94:	f7ff fc32 	bl	80007fc <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9a:	e00f      	b.n	8000fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fc2e 	bl	80007fc <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d908      	bls.n	8000fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e146      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	42420000 	.word	0x42420000
 8000fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbc:	4b92      	ldr	r3, [pc, #584]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e9      	bne.n	8000f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 80a6 	beq.w	8001122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fda:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b88      	ldr	r3, [pc, #544]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a87      	ldr	r2, [pc, #540]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b85      	ldr	r3, [pc, #532]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ffe:	2301      	movs	r3, #1
 8001000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001002:	4b82      	ldr	r3, [pc, #520]	; (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100e:	4b7f      	ldr	r3, [pc, #508]	; (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a7e      	ldr	r2, [pc, #504]	; (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800101a:	f7ff fbef 	bl	80007fc <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001022:	f7ff fbeb 	bl	80007fc <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e103      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	4b75      	ldr	r3, [pc, #468]	; (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x312>
 8001048:	4b6f      	ldr	r3, [pc, #444]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a6e      	ldr	r2, [pc, #440]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6213      	str	r3, [r2, #32]
 8001054:	e02d      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x334>
 800105e:	4b6a      	ldr	r3, [pc, #424]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a69      	ldr	r2, [pc, #420]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	4b67      	ldr	r3, [pc, #412]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a66      	ldr	r2, [pc, #408]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	e01c      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d10c      	bne.n	800109a <HAL_RCC_OscConfig+0x356>
 8001080:	4b61      	ldr	r3, [pc, #388]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4a60      	ldr	r2, [pc, #384]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6213      	str	r3, [r2, #32]
 800108c:	4b5e      	ldr	r3, [pc, #376]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a5d      	ldr	r2, [pc, #372]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	e00b      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 800109a:	4b5b      	ldr	r3, [pc, #364]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a5a      	ldr	r2, [pc, #360]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	4b58      	ldr	r3, [pc, #352]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a57      	ldr	r2, [pc, #348]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d015      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb9f 	bl	80007fc <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fb9b 	bl	80007fc <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e0b1      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d8:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0ee      	beq.n	80010c2 <HAL_RCC_OscConfig+0x37e>
 80010e4:	e014      	b.n	8001110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fb89 	bl	80007fc <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fb85 	bl	80007fc <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e09b      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001104:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ee      	bne.n	80010ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d105      	bne.n	8001122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001116:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8087 	beq.w	800123a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b08      	cmp	r3, #8
 8001136:	d061      	beq.n	80011fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d146      	bne.n	80011ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <HAL_RCC_OscConfig+0x4cc>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fb59 	bl	80007fc <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fb55 	bl	80007fc <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e06d      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f0      	bne.n	800114e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001174:	d108      	bne.n	8001188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4921      	ldr	r1, [pc, #132]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a19      	ldr	r1, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	430b      	orrs	r3, r1
 800119a:	491b      	ldr	r1, [pc, #108]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_RCC_OscConfig+0x4cc>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fb29 	bl	80007fc <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ae:	f7ff fb25 	bl	80007fc <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e03d      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x46a>
 80011cc:	e035      	b.n	800123a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_RCC_OscConfig+0x4cc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb12 	bl	80007fc <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011dc:	f7ff fb0e 	bl	80007fc <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e026      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x498>
 80011fa:	e01e      	b.n	800123a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d107      	bne.n	8001214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e019      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
 8001208:	40021000 	.word	0x40021000
 800120c:	40007000 	.word	0x40007000
 8001210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_OscConfig+0x500>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	429a      	cmp	r2, r3
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0d0      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800125c:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d910      	bls.n	800128c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b67      	ldr	r3, [pc, #412]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 0207 	bic.w	r2, r3, #7
 8001272:	4965      	ldr	r1, [pc, #404]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127a:	4b63      	ldr	r3, [pc, #396]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d001      	beq.n	800128c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0b8      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a4:	4b59      	ldr	r3, [pc, #356]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a58      	ldr	r2, [pc, #352]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a52      	ldr	r2, [pc, #328]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	494d      	ldr	r1, [pc, #308]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d040      	beq.n	8001368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d115      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e07f      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001306:	4b41      	ldr	r3, [pc, #260]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e073      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001316:	4b3d      	ldr	r3, [pc, #244]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e06b      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f023 0203 	bic.w	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4936      	ldr	r1, [pc, #216]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001338:	f7ff fa60 	bl	80007fc <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	e00a      	b.n	8001356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001340:	f7ff fa5c 	bl	80007fc <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	; 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e053      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 020c 	and.w	r2, r3, #12
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	429a      	cmp	r2, r3
 8001366:	d1eb      	bne.n	8001340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d210      	bcs.n	8001398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0207 	bic.w	r2, r3, #7
 800137e:	4922      	ldr	r1, [pc, #136]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e032      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d008      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4916      	ldr	r1, [pc, #88]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	490e      	ldr	r1, [pc, #56]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013d6:	f000 f821 	bl	800141c <HAL_RCC_GetSysClockFreq>
 80013da:	4602      	mov	r2, r0
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	490a      	ldr	r1, [pc, #40]	; (8001410 <HAL_RCC_ClockConfig+0x1c8>)
 80013e8:	5ccb      	ldrb	r3, [r1, r3]
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <HAL_RCC_ClockConfig+0x1cc>)
 80013f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_ClockConfig+0x1d0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f9be 	bl	8000778 <HAL_InitTick>

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40022000 	.word	0x40022000
 800140c:	40021000 	.word	0x40021000
 8001410:	080054fc 	.word	0x080054fc
 8001414:	20000000 	.word	0x20000000
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d002      	beq.n	800144c <HAL_RCC_GetSysClockFreq+0x30>
 8001446:	2b08      	cmp	r3, #8
 8001448:	d003      	beq.n	8001452 <HAL_RCC_GetSysClockFreq+0x36>
 800144a:	e027      	b.n	800149c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800144e:	613b      	str	r3, [r7, #16]
      break;
 8001450:	e027      	b.n	80014a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	0c9b      	lsrs	r3, r3, #18
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800145c:	5cd3      	ldrb	r3, [r2, r3]
 800145e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d010      	beq.n	800148c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	0c5b      	lsrs	r3, r3, #17
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800147e:	fb03 f202 	mul.w	r2, r3, r2
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	fbb2 f3f3 	udiv	r3, r2, r3
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e004      	b.n	8001496 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	613b      	str	r3, [r7, #16]
      break;
 800149a:	e002      	b.n	80014a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800149e:	613b      	str	r3, [r7, #16]
      break;
 80014a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014a2:	693b      	ldr	r3, [r7, #16]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	007a1200 	.word	0x007a1200
 80014b8:	08005514 	.word	0x08005514
 80014bc:	08005524 	.word	0x08005524
 80014c0:	003d0900 	.word	0x003d0900

080014c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c8:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	20000000 	.word	0x20000000

080014d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014dc:	f7ff fff2 	bl	80014c4 <HAL_RCC_GetHCLKFreq>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	4903      	ldr	r1, [pc, #12]	; (80014fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ee:	5ccb      	ldrb	r3, [r1, r3]
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	0800550c 	.word	0x0800550c

08001500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001504:	f7ff ffde 	bl	80014c4 <HAL_RCC_GetHCLKFreq>
 8001508:	4602      	mov	r2, r0
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	0adb      	lsrs	r3, r3, #11
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	4903      	ldr	r1, [pc, #12]	; (8001524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001516:	5ccb      	ldrb	r3, [r1, r3]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	0800550c 	.word	0x0800550c

08001528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <RCC_Delay+0x34>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <RCC_Delay+0x38>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0a5b      	lsrs	r3, r3, #9
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001544:	bf00      	nop
  }
  while (Delay --);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	60fa      	str	r2, [r7, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f9      	bne.n	8001544 <RCC_Delay+0x1c>
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20000000 	.word	0x20000000
 8001560:	10624dd3 	.word	0x10624dd3

08001564 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e041      	b.n	80015fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d106      	bne.n	8001590 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7fe ffc0 	bl	8000510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3304      	adds	r3, #4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4610      	mov	r0, r2
 80015a4:	f000 f992 	bl	80018cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d109      	bne.n	8001628 <HAL_TIM_PWM_Start+0x24>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	bf14      	ite	ne
 8001620:	2301      	movne	r3, #1
 8001622:	2300      	moveq	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	e022      	b.n	800166e <HAL_TIM_PWM_Start+0x6a>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2b04      	cmp	r3, #4
 800162c:	d109      	bne.n	8001642 <HAL_TIM_PWM_Start+0x3e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b01      	cmp	r3, #1
 8001638:	bf14      	ite	ne
 800163a:	2301      	movne	r3, #1
 800163c:	2300      	moveq	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	e015      	b.n	800166e <HAL_TIM_PWM_Start+0x6a>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b08      	cmp	r3, #8
 8001646:	d109      	bne.n	800165c <HAL_TIM_PWM_Start+0x58>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	e008      	b.n	800166e <HAL_TIM_PWM_Start+0x6a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b01      	cmp	r3, #1
 8001666:	bf14      	ite	ne
 8001668:	2301      	movne	r3, #1
 800166a:	2300      	moveq	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e05e      	b.n	8001734 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d104      	bne.n	8001686 <HAL_TIM_PWM_Start+0x82>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001684:	e013      	b.n	80016ae <HAL_TIM_PWM_Start+0xaa>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d104      	bne.n	8001696 <HAL_TIM_PWM_Start+0x92>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2202      	movs	r2, #2
 8001690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001694:	e00b      	b.n	80016ae <HAL_TIM_PWM_Start+0xaa>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b08      	cmp	r3, #8
 800169a:	d104      	bne.n	80016a6 <HAL_TIM_PWM_Start+0xa2>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016a4:	e003      	b.n	80016ae <HAL_TIM_PWM_Start+0xaa>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2201      	movs	r2, #1
 80016b4:	6839      	ldr	r1, [r7, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 faf2 	bl	8001ca0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <HAL_TIM_PWM_Start+0x138>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d107      	bne.n	80016d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_TIM_PWM_Start+0x138>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00e      	beq.n	80016fe <HAL_TIM_PWM_Start+0xfa>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e8:	d009      	beq.n	80016fe <HAL_TIM_PWM_Start+0xfa>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_TIM_PWM_Start+0x13c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d004      	beq.n	80016fe <HAL_TIM_PWM_Start+0xfa>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <HAL_TIM_PWM_Start+0x140>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d111      	bne.n	8001722 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b06      	cmp	r3, #6
 800170e:	d010      	beq.n	8001732 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001720:	e007      	b.n	8001732 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0201 	orr.w	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40012c00 	.word	0x40012c00
 8001740:	40000400 	.word	0x40000400
 8001744:	40000800 	.word	0x40000800

08001748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001762:	2302      	movs	r3, #2
 8001764:	e0ae      	b.n	80018c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	f200 809f 	bhi.w	80018b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	080017b1 	.word	0x080017b1
 8001780:	080018b5 	.word	0x080018b5
 8001784:	080018b5 	.word	0x080018b5
 8001788:	080018b5 	.word	0x080018b5
 800178c:	080017f1 	.word	0x080017f1
 8001790:	080018b5 	.word	0x080018b5
 8001794:	080018b5 	.word	0x080018b5
 8001798:	080018b5 	.word	0x080018b5
 800179c:	08001833 	.word	0x08001833
 80017a0:	080018b5 	.word	0x080018b5
 80017a4:	080018b5 	.word	0x080018b5
 80017a8:	080018b5 	.word	0x080018b5
 80017ac:	08001873 	.word	0x08001873
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f8ea 	bl	8001990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0208 	orr.w	r2, r2, #8
 80017ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	699a      	ldr	r2, [r3, #24]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0204 	bic.w	r2, r2, #4
 80017da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6999      	ldr	r1, [r3, #24]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	619a      	str	r2, [r3, #24]
      break;
 80017ee:	e064      	b.n	80018ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f930 	bl	8001a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800180a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800181a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6999      	ldr	r1, [r3, #24]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	021a      	lsls	r2, r3, #8
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	619a      	str	r2, [r3, #24]
      break;
 8001830:	e043      	b.n	80018ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68b9      	ldr	r1, [r7, #8]
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f979 	bl	8001b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	69da      	ldr	r2, [r3, #28]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0208 	orr.w	r2, r2, #8
 800184c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0204 	bic.w	r2, r2, #4
 800185c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69d9      	ldr	r1, [r3, #28]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	61da      	str	r2, [r3, #28]
      break;
 8001870:	e023      	b.n	80018ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68b9      	ldr	r1, [r7, #8]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f9c3 	bl	8001c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800188c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800189c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69d9      	ldr	r1, [r3, #28]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	021a      	lsls	r2, r3, #8
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	61da      	str	r2, [r3, #28]
      break;
 80018b2:	e002      	b.n	80018ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	75fb      	strb	r3, [r7, #23]
      break;
 80018b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <TIM_Base_SetConfig+0xb8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d00b      	beq.n	80018fc <TIM_Base_SetConfig+0x30>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ea:	d007      	beq.n	80018fc <TIM_Base_SetConfig+0x30>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a26      	ldr	r2, [pc, #152]	; (8001988 <TIM_Base_SetConfig+0xbc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d003      	beq.n	80018fc <TIM_Base_SetConfig+0x30>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a25      	ldr	r2, [pc, #148]	; (800198c <TIM_Base_SetConfig+0xc0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d108      	bne.n	800190e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <TIM_Base_SetConfig+0xb8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00b      	beq.n	800192e <TIM_Base_SetConfig+0x62>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d007      	beq.n	800192e <TIM_Base_SetConfig+0x62>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <TIM_Base_SetConfig+0xbc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d003      	beq.n	800192e <TIM_Base_SetConfig+0x62>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <TIM_Base_SetConfig+0xc0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d108      	bne.n	8001940 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <TIM_Base_SetConfig+0xb8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d103      	bne.n	8001974 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	615a      	str	r2, [r3, #20]
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40000400 	.word	0x40000400
 800198c:	40000800 	.word	0x40000800

08001990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f023 0201 	bic.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0303 	bic.w	r3, r3, #3
 80019c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f023 0302 	bic.w	r3, r3, #2
 80019d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <TIM_OC1_SetConfig+0xc8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d10c      	bne.n	8001a06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f023 0308 	bic.w	r3, r3, #8
 80019f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <TIM_OC1_SetConfig+0xc8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d111      	bne.n	8001a32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	621a      	str	r2, [r3, #32]
}
 8001a4c:	bf00      	nop
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40012c00 	.word	0x40012c00

08001a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f023 0210 	bic.w	r2, r3, #16
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f023 0320 	bic.w	r3, r3, #32
 8001aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <TIM_OC2_SetConfig+0xd0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d10d      	bne.n	8001ad8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <TIM_OC2_SetConfig+0xd0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d113      	bne.n	8001b08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	621a      	str	r2, [r3, #32]
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	40012c00 	.word	0x40012c00

08001b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 0303 	bic.w	r3, r3, #3
 8001b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <TIM_OC3_SetConfig+0xd0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10d      	bne.n	8001baa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <TIM_OC3_SetConfig+0xd0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d113      	bne.n	8001bda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	621a      	str	r2, [r3, #32]
}
 8001bf4:	bf00      	nop
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40012c00 	.word	0x40012c00

08001c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	031b      	lsls	r3, r3, #12
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <TIM_OC4_SetConfig+0x98>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d109      	bne.n	8001c78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	019b      	lsls	r3, r3, #6
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	621a      	str	r2, [r3, #32]
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	40012c00 	.word	0x40012c00

08001ca0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a1a      	ldr	r2, [r3, #32]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	621a      	str	r2, [r3, #32]
}
 8001cde:	bf00      	nop
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e046      	b.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00e      	beq.n	8001d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4c:	d009      	beq.n	8001d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d004      	beq.n	8001d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d10c      	bne.n	8001d7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40012c00 	.word	0x40012c00
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40000800 	.word	0x40000800

08001da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e042      	b.n	8001e3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7fe fbf0 	bl	80005b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f91d 	bl	8002028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d16d      	bne.n	8001f40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_UART_Transmit+0x2c>
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e066      	b.n	8001f42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2221      	movs	r2, #33	; 0x21
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e82:	f7fe fcbb 	bl	80007fc <HAL_GetTick>
 8001e86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	88fa      	ldrh	r2, [r7, #6]
 8001e8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	88fa      	ldrh	r2, [r7, #6]
 8001e92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9c:	d108      	bne.n	8001eb0 <HAL_UART_Transmit+0x6c>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d104      	bne.n	8001eb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	e003      	b.n	8001eb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001eb8:	e02a      	b.n	8001f10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f840 	bl	8001f4a <UART_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e036      	b.n	8001f42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ee8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	3302      	adds	r3, #2
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	e007      	b.n	8001f02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	3301      	adds	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1cf      	bne.n	8001eba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2140      	movs	r1, #64	; 0x40
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f810 	bl	8001f4a <UART_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e006      	b.n	8001f42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
  }
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b090      	sub	sp, #64	; 0x40
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4613      	mov	r3, r2
 8001f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f5a:	e050      	b.n	8001ffe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f62:	d04c      	beq.n	8001ffe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d007      	beq.n	8001f7a <UART_WaitOnFlagUntilTimeout+0x30>
 8001f6a:	f7fe fc47 	bl	80007fc <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d241      	bcs.n	8001ffe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	330c      	adds	r3, #12
 8001f80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f84:	e853 3f00 	ldrex	r3, [r3]
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	330c      	adds	r3, #12
 8001f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f9a:	637a      	str	r2, [r7, #52]	; 0x34
 8001f9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fa2:	e841 2300 	strex	r3, r2, [r1]
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1e5      	bne.n	8001f7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3314      	adds	r3, #20
 8001fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	e853 3f00 	ldrex	r3, [r3]
 8001fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3314      	adds	r3, #20
 8001fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fce:	623a      	str	r2, [r7, #32]
 8001fd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fd2:	69f9      	ldr	r1, [r7, #28]
 8001fd4:	6a3a      	ldr	r2, [r7, #32]
 8001fd6:	e841 2300 	strex	r3, r2, [r1]
 8001fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1e5      	bne.n	8001fae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e00f      	b.n	800201e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4013      	ands	r3, r2
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	429a      	cmp	r2, r3
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	429a      	cmp	r2, r3
 800201a:	d09f      	beq.n	8001f5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3740      	adds	r7, #64	; 0x40
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002062:	f023 030c 	bic.w	r3, r3, #12
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	68b9      	ldr	r1, [r7, #8]
 800206c:	430b      	orrs	r3, r1
 800206e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2c      	ldr	r2, [pc, #176]	; (800213c <UART_SetConfig+0x114>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d103      	bne.n	8002098 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002090:	f7ff fa36 	bl	8001500 <HAL_RCC_GetPCLK2Freq>
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	e002      	b.n	800209e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002098:	f7ff fa1e 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
 800209c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	009a      	lsls	r2, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	4a22      	ldr	r2, [pc, #136]	; (8002140 <UART_SetConfig+0x118>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	0119      	lsls	r1, r3, #4
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	009a      	lsls	r2, r3, #2
 80020c8:	441a      	add	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <UART_SetConfig+0x118>)
 80020d6:	fba3 0302 	umull	r0, r3, r3, r2
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	2064      	movs	r0, #100	; 0x64
 80020de:	fb00 f303 	mul.w	r3, r0, r3
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	3332      	adds	r3, #50	; 0x32
 80020e8:	4a15      	ldr	r2, [pc, #84]	; (8002140 <UART_SetConfig+0x118>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f4:	4419      	add	r1, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	009a      	lsls	r2, r3, #2
 8002100:	441a      	add	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	fbb2 f2f3 	udiv	r2, r2, r3
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <UART_SetConfig+0x118>)
 800210e:	fba3 0302 	umull	r0, r3, r3, r2
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2064      	movs	r0, #100	; 0x64
 8002116:	fb00 f303 	mul.w	r3, r0, r3
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	3332      	adds	r3, #50	; 0x32
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <UART_SetConfig+0x118>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	440a      	add	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40013800 	.word	0x40013800
 8002140:	51eb851f 	.word	0x51eb851f

08002144 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800214a:	f3ef 8305 	mrs	r3, IPSR
 800214e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002150:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10f      	bne.n	8002176 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002156:	f3ef 8310 	mrs	r3, PRIMASK
 800215a:	607b      	str	r3, [r7, #4]
  return(result);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <osKernelInitialize+0x32>
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <osKernelInitialize+0x60>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d109      	bne.n	800217e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800216a:	f3ef 8311 	mrs	r3, BASEPRI
 800216e:	603b      	str	r3, [r7, #0]
  return(result);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002176:	f06f 0305 	mvn.w	r3, #5
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e00c      	b.n	8002198 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <osKernelInitialize+0x60>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d105      	bne.n	8002192 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <osKernelInitialize+0x60>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e002      	b.n	8002198 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002196:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002198:	68fb      	ldr	r3, [r7, #12]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	2000011c 	.word	0x2000011c

080021a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ae:	f3ef 8305 	mrs	r3, IPSR
 80021b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80021b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ba:	f3ef 8310 	mrs	r3, PRIMASK
 80021be:	607b      	str	r3, [r7, #4]
  return(result);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <osKernelStart+0x32>
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <osKernelStart+0x64>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d109      	bne.n	80021e2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021ce:	f3ef 8311 	mrs	r3, BASEPRI
 80021d2:	603b      	str	r3, [r7, #0]
  return(result);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80021da:	f06f 0305 	mvn.w	r3, #5
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e00e      	b.n	8002200 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <osKernelStart+0x64>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <osKernelStart+0x64>)
 80021ec:	2202      	movs	r2, #2
 80021ee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80021f0:	f001 f878 	bl	80032e4 <vTaskStartScheduler>
      stat = osOK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e002      	b.n	8002200 <osKernelStart+0x58>
    } else {
      stat = osError;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002200:	68fb      	ldr	r3, [r7, #12]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000011c 	.word	0x2000011c

08002210 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b092      	sub	sp, #72	; 0x48
 8002214:	af04      	add	r7, sp, #16
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002220:	f3ef 8305 	mrs	r3, IPSR
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002228:	2b00      	cmp	r3, #0
 800222a:	f040 8094 	bne.w	8002356 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800222e:	f3ef 8310 	mrs	r3, PRIMASK
 8002232:	623b      	str	r3, [r7, #32]
  return(result);
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 808d 	bne.w	8002356 <osThreadNew+0x146>
 800223c:	4b48      	ldr	r3, [pc, #288]	; (8002360 <osThreadNew+0x150>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d106      	bne.n	8002252 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002244:	f3ef 8311 	mrs	r3, BASEPRI
 8002248:	61fb      	str	r3, [r7, #28]
  return(result);
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 8082 	bne.w	8002356 <osThreadNew+0x146>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d07e      	beq.n	8002356 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800225c:	2318      	movs	r3, #24
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002260:	2300      	movs	r3, #0
 8002262:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002264:	f107 031b 	add.w	r3, r7, #27
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d045      	beq.n	8002302 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <osThreadNew+0x74>
        name = attr->name;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <osThreadNew+0x9a>
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	2b38      	cmp	r3, #56	; 0x38
 800229c:	d805      	bhi.n	80022aa <osThreadNew+0x9a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <osThreadNew+0x9e>
        return (NULL);
 80022aa:	2300      	movs	r3, #0
 80022ac:	e054      	b.n	8002358 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00e      	beq.n	80022e4 <osThreadNew+0xd4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b5b      	cmp	r3, #91	; 0x5b
 80022cc:	d90a      	bls.n	80022e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <osThreadNew+0xd4>
        mem = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e2:	e010      	b.n	8002306 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10c      	bne.n	8002306 <osThreadNew+0xf6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d108      	bne.n	8002306 <osThreadNew+0xf6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <osThreadNew+0xf6>
          mem = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	e001      	b.n	8002306 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	2b01      	cmp	r3, #1
 800230a:	d110      	bne.n	800232e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002314:	9202      	str	r2, [sp, #8]
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002320:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fe12 	bl	8002f4c <xTaskCreateStatic>
 8002328:	4603      	mov	r3, r0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e013      	b.n	8002356 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800232e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d110      	bne.n	8002356 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002336:	b29a      	uxth	r2, r3
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fe5c 	bl	8003004 <xTaskCreate>
 800234c:	4603      	mov	r3, r0
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <osThreadNew+0x146>
          hTask = NULL;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002356:	697b      	ldr	r3, [r7, #20]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3738      	adds	r7, #56	; 0x38
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	2000011c 	.word	0x2000011c

08002364 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800236c:	f3ef 8305 	mrs	r3, IPSR
 8002370:	613b      	str	r3, [r7, #16]
  return(result);
 8002372:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10f      	bne.n	8002398 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002378:	f3ef 8310 	mrs	r3, PRIMASK
 800237c:	60fb      	str	r3, [r7, #12]
  return(result);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <osDelay+0x34>
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <osDelay+0x58>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d109      	bne.n	80023a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800238c:	f3ef 8311 	mrs	r3, BASEPRI
 8002390:	60bb      	str	r3, [r7, #8]
  return(result);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <osDelay+0x3c>
    stat = osErrorISR;
 8002398:	f06f 0305 	mvn.w	r3, #5
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e007      	b.n	80023b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 ff66 	bl	800327c <vTaskDelay>
    }
  }

  return (stat);
 80023b0:	697b      	ldr	r3, [r7, #20]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000011c 	.word	0x2000011c

080023c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <vApplicationGetIdleTaskMemory+0x28>)
 80023d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4a05      	ldr	r2, [pc, #20]	; (80023ec <vApplicationGetIdleTaskMemory+0x2c>)
 80023d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2280      	movs	r2, #128	; 0x80
 80023dc:	601a      	str	r2, [r3, #0]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000120 	.word	0x20000120
 80023ec:	2000017c 	.word	0x2000017c

080023f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <vApplicationGetTimerTaskMemory+0x2c>)
 8002400:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4a06      	ldr	r2, [pc, #24]	; (8002420 <vApplicationGetTimerTaskMemory+0x30>)
 8002406:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240e:	601a      	str	r2, [r3, #0]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	2000037c 	.word	0x2000037c
 8002420:	200003d8 	.word	0x200003d8

08002424 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f103 0208 	add.w	r2, r3, #8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800243c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f103 0208 	add.w	r2, r3, #8
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f103 0208 	add.w	r2, r3, #8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800247a:	b480      	push	{r7}
 800247c:	b085      	sub	sp, #20
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	601a      	str	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d6:	d103      	bne.n	80024e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e00c      	b.n	80024fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3308      	adds	r3, #8
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	e002      	b.n	80024ee <vListInsert+0x2e>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d2f6      	bcs.n	80024e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6892      	ldr	r2, [r2, #8]
 8002546:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6852      	ldr	r2, [r2, #4]
 8002550:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d103      	bne.n	8002564 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1e5a      	subs	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
	...

08002584 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259c:	f383 8811 	msr	BASEPRI, r3
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	f3bf 8f4f 	dsb	sy
 80025a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025aa:	bf00      	nop
 80025ac:	e7fe      	b.n	80025ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025ae:	f001 ffc5 	bl	800453c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	68f9      	ldr	r1, [r7, #12]
 80025bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	441a      	add	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	3b01      	subs	r3, #1
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	441a      	add	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	22ff      	movs	r2, #255	; 0xff
 80025f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d114      	bne.n	800262e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01a      	beq.n	8002642 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3310      	adds	r3, #16
 8002610:	4618      	mov	r0, r3
 8002612:	f001 f8f1 	bl	80037f8 <xTaskRemoveFromEventList>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <xQueueGenericReset+0xcc>)
 800261e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	e009      	b.n	8002642 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3310      	adds	r3, #16
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fef6 	bl	8002424 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3324      	adds	r3, #36	; 0x24
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fef1 	bl	8002424 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002642:	f001 ffab 	bl	800459c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	e000ed04 	.word	0xe000ed04

08002654 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08e      	sub	sp, #56	; 0x38
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10a      	bne.n	800267e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266c:	f383 8811 	msr	BASEPRI, r3
 8002670:	f3bf 8f6f 	isb	sy
 8002674:	f3bf 8f4f 	dsb	sy
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800267a:	bf00      	nop
 800267c:	e7fe      	b.n	800267c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002696:	bf00      	nop
 8002698:	e7fe      	b.n	8002698 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <xQueueGenericCreateStatic+0x52>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <xQueueGenericCreateStatic+0x56>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <xQueueGenericCreateStatic+0x58>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	623b      	str	r3, [r7, #32]
}
 80026c2:	bf00      	nop
 80026c4:	e7fe      	b.n	80026c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <xQueueGenericCreateStatic+0x7e>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <xQueueGenericCreateStatic+0x82>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <xQueueGenericCreateStatic+0x84>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10a      	bne.n	80026f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	61fb      	str	r3, [r7, #28]
}
 80026ee:	bf00      	nop
 80026f0:	e7fe      	b.n	80026f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026f2:	2350      	movs	r3, #80	; 0x50
 80026f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b50      	cmp	r3, #80	; 0x50
 80026fa:	d00a      	beq.n	8002712 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	61bb      	str	r3, [r7, #24]
}
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00d      	beq.n	8002738 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002724:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4613      	mov	r3, r2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f805 	bl	8002742 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800273a:	4618      	mov	r0, r3
 800273c:	3730      	adds	r7, #48	; 0x30
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e002      	b.n	8002764 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002770:	2101      	movs	r1, #1
 8002772:	69b8      	ldr	r0, [r7, #24]
 8002774:	f7ff ff06 	bl	8002584 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08e      	sub	sp, #56	; 0x38
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <xQueueGenericSend+0x32>
	__asm volatile
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027b6:	bf00      	nop
 80027b8:	e7fe      	b.n	80027b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <xQueueGenericSend+0x40>
 80027c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <xQueueGenericSend+0x44>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <xQueueGenericSend+0x46>
 80027cc:	2300      	movs	r3, #0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <xQueueGenericSend+0x60>
	__asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027e4:	bf00      	nop
 80027e6:	e7fe      	b.n	80027e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d103      	bne.n	80027f6 <xQueueGenericSend+0x6e>
 80027ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <xQueueGenericSend+0x72>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <xQueueGenericSend+0x74>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueGenericSend+0x8e>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	623b      	str	r3, [r7, #32]
}
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002816:	f001 f9b1 	bl	8003b7c <xTaskGetSchedulerState>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <xQueueGenericSend+0x9e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <xQueueGenericSend+0xa2>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <xQueueGenericSend+0xa4>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <xQueueGenericSend+0xbe>
	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	61fb      	str	r3, [r7, #28]
}
 8002842:	bf00      	nop
 8002844:	e7fe      	b.n	8002844 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002846:	f001 fe79 	bl	800453c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	429a      	cmp	r2, r3
 8002854:	d302      	bcc.n	800285c <xQueueGenericSend+0xd4>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b02      	cmp	r3, #2
 800285a:	d129      	bne.n	80028b0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002862:	f000 fa07 	bl	8002c74 <prvCopyDataToQueue>
 8002866:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2b00      	cmp	r3, #0
 800286e:	d010      	beq.n	8002892 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	3324      	adds	r3, #36	; 0x24
 8002874:	4618      	mov	r0, r3
 8002876:	f000 ffbf 	bl	80037f8 <xTaskRemoveFromEventList>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <xQueueGenericSend+0x1f8>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	e00a      	b.n	80028a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002898:	4b39      	ldr	r3, [pc, #228]	; (8002980 <xQueueGenericSend+0x1f8>)
 800289a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028a8:	f001 fe78 	bl	800459c <vPortExitCritical>
				return pdPASS;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e063      	b.n	8002978 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028b6:	f001 fe71 	bl	800459c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e05c      	b.n	8002978 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fff9 	bl	80038c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028d2:	f001 fe63 	bl	800459c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028d6:	f000 fd6b 	bl	80033b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028da:	f001 fe2f 	bl	800453c <vPortEnterCritical>
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ea:	d103      	bne.n	80028f4 <xQueueGenericSend+0x16c>
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002900:	d103      	bne.n	800290a <xQueueGenericSend+0x182>
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800290a:	f001 fe47 	bl	800459c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800290e:	1d3a      	adds	r2, r7, #4
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f000 ffe8 	bl	80038ec <xTaskCheckForTimeOut>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d124      	bne.n	800296c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002922:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002924:	f000 fa9e 	bl	8002e64 <prvIsQueueFull>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d018      	beq.n	8002960 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	3310      	adds	r3, #16
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 ff0e 	bl	8003758 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800293c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800293e:	f000 fa29 	bl	8002d94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002942:	f000 fd43 	bl	80033cc <xTaskResumeAll>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	f47f af7c 	bne.w	8002846 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <xQueueGenericSend+0x1f8>)
 8002950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	f3bf 8f6f 	isb	sy
 800295e:	e772      	b.n	8002846 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002962:	f000 fa17 	bl	8002d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002966:	f000 fd31 	bl	80033cc <xTaskResumeAll>
 800296a:	e76c      	b.n	8002846 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800296c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800296e:	f000 fa11 	bl	8002d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002972:	f000 fd2b 	bl	80033cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002976:	2300      	movs	r3, #0
		}
	}
}
 8002978:	4618      	mov	r0, r3
 800297a:	3738      	adds	r7, #56	; 0x38
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	e000ed04 	.word	0xe000ed04

08002984 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08e      	sub	sp, #56	; 0x38
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
 8002990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d103      	bne.n	80029c0 <xQueueGenericSendFromISR+0x3c>
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <xQueueGenericSendFromISR+0x40>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <xQueueGenericSendFromISR+0x42>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80029ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ce:	f383 8811 	msr	BASEPRI, r3
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	f3bf 8f4f 	dsb	sy
 80029da:	623b      	str	r3, [r7, #32]
}
 80029dc:	bf00      	nop
 80029de:	e7fe      	b.n	80029de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d103      	bne.n	80029ee <xQueueGenericSendFromISR+0x6a>
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <xQueueGenericSendFromISR+0x6e>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <xQueueGenericSendFromISR+0x70>
 80029f2:	2300      	movs	r3, #0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	61fb      	str	r3, [r7, #28]
}
 8002a0a:	bf00      	nop
 8002a0c:	e7fe      	b.n	8002a0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a0e:	f001 fe57 	bl	80046c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a12:	f3ef 8211 	mrs	r2, BASEPRI
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	61ba      	str	r2, [r7, #24]
 8002a28:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <xQueueGenericSendFromISR+0xbc>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d12c      	bne.n	8002a9a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a50:	f000 f910 	bl	8002c74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a54:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a5c:	d112      	bne.n	8002a84 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	3324      	adds	r3, #36	; 0x24
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fec4 	bl	80037f8 <xTaskRemoveFromEventList>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00e      	beq.n	8002a94 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e007      	b.n	8002a94 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	b25a      	sxtb	r2, r3
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a94:	2301      	movs	r3, #1
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002a98:	e001      	b.n	8002a9e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002aa8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3738      	adds	r7, #56	; 0x38
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	; 0x30
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <xQueueReceive+0x30>
	__asm volatile
 8002ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad2:	f383 8811 	msr	BASEPRI, r3
 8002ad6:	f3bf 8f6f 	isb	sy
 8002ada:	f3bf 8f4f 	dsb	sy
 8002ade:	623b      	str	r3, [r7, #32]
}
 8002ae0:	bf00      	nop
 8002ae2:	e7fe      	b.n	8002ae2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <xQueueReceive+0x3e>
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <xQueueReceive+0x42>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <xQueueReceive+0x44>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <xQueueReceive+0x5e>
	__asm volatile
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	61fb      	str	r3, [r7, #28]
}
 8002b0e:	bf00      	nop
 8002b10:	e7fe      	b.n	8002b10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b12:	f001 f833 	bl	8003b7c <xTaskGetSchedulerState>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <xQueueReceive+0x6e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <xQueueReceive+0x72>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <xQueueReceive+0x74>
 8002b26:	2300      	movs	r3, #0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <xQueueReceive+0x8e>
	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	61bb      	str	r3, [r7, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	e7fe      	b.n	8002b40 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b42:	f001 fcfb 	bl	800453c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01f      	beq.n	8002b92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b56:	f000 f8f7 	bl	8002d48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	1e5a      	subs	r2, r3, #1
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00f      	beq.n	8002b8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	3310      	adds	r3, #16
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fe42 	bl	80037f8 <xTaskRemoveFromEventList>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	; (8002c70 <xQueueReceive+0x1bc>)
 8002b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b8a:	f001 fd07 	bl	800459c <vPortExitCritical>
				return pdPASS;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e069      	b.n	8002c66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d103      	bne.n	8002ba0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b98:	f001 fd00 	bl	800459c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e062      	b.n	8002c66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d106      	bne.n	8002bb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ba6:	f107 0310 	add.w	r3, r7, #16
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fe88 	bl	80038c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bb4:	f001 fcf2 	bl	800459c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bb8:	f000 fbfa 	bl	80033b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bbc:	f001 fcbe 	bl	800453c <vPortEnterCritical>
 8002bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc6:	b25b      	sxtb	r3, r3
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bcc:	d103      	bne.n	8002bd6 <xQueueReceive+0x122>
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002be2:	d103      	bne.n	8002bec <xQueueReceive+0x138>
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bec:	f001 fcd6 	bl	800459c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bf0:	1d3a      	adds	r2, r7, #4
 8002bf2:	f107 0310 	add.w	r3, r7, #16
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fe77 	bl	80038ec <xTaskCheckForTimeOut>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d123      	bne.n	8002c4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c06:	f000 f917 	bl	8002e38 <prvIsQueueEmpty>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d017      	beq.n	8002c40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	3324      	adds	r3, #36	; 0x24
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fd9d 	bl	8003758 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c20:	f000 f8b8 	bl	8002d94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c24:	f000 fbd2 	bl	80033cc <xTaskResumeAll>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d189      	bne.n	8002b42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <xQueueReceive+0x1bc>)
 8002c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	f3bf 8f6f 	isb	sy
 8002c3e:	e780      	b.n	8002b42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c42:	f000 f8a7 	bl	8002d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c46:	f000 fbc1 	bl	80033cc <xTaskResumeAll>
 8002c4a:	e77a      	b.n	8002b42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c4e:	f000 f8a1 	bl	8002d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c52:	f000 fbbb 	bl	80033cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c58:	f000 f8ee 	bl	8002e38 <prvIsQueueEmpty>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f43f af6f 	beq.w	8002b42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3730      	adds	r7, #48	; 0x30
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d14d      	bne.n	8002d36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 ff8a 	bl	8003bb8 <xTaskPriorityDisinherit>
 8002ca4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	e043      	b.n	8002d36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d119      	bne.n	8002ce8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6898      	ldr	r0, [r3, #8]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	f001 ff68 	bl	8004b94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	441a      	add	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d32b      	bcc.n	8002d36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	e026      	b.n	8002d36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	68d8      	ldr	r0, [r3, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	f001 ff4e 	bl	8004b94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	425b      	negs	r3, r3
 8002d02:	441a      	add	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d207      	bcs.n	8002d24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	425b      	negs	r3, r3
 8002d1e:	441a      	add	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d105      	bne.n	8002d36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d3e:	697b      	ldr	r3, [r7, #20]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d018      	beq.n	8002d8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	441a      	add	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d303      	bcc.n	8002d7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68d9      	ldr	r1, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	461a      	mov	r2, r3
 8002d86:	6838      	ldr	r0, [r7, #0]
 8002d88:	f001 ff04 	bl	8004b94 <memcpy>
	}
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d9c:	f001 fbce 	bl	800453c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002da6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002da8:	e011      	b.n	8002dce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3324      	adds	r3, #36	; 0x24
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd1e 	bl	80037f8 <xTaskRemoveFromEventList>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002dc2:	f000 fdf5 	bl	80039b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	dce9      	bgt.n	8002daa <prvUnlockQueue+0x16>
 8002dd6:	e000      	b.n	8002dda <prvUnlockQueue+0x46>
					break;
 8002dd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	22ff      	movs	r2, #255	; 0xff
 8002dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002de2:	f001 fbdb 	bl	800459c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002de6:	f001 fba9 	bl	800453c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002df0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002df2:	e011      	b.n	8002e18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d012      	beq.n	8002e22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3310      	adds	r3, #16
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fcf9 	bl	80037f8 <xTaskRemoveFromEventList>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e0c:	f000 fdd0 	bl	80039b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	dce9      	bgt.n	8002df4 <prvUnlockQueue+0x60>
 8002e20:	e000      	b.n	8002e24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	22ff      	movs	r2, #255	; 0xff
 8002e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e2c:	f001 fbb6 	bl	800459c <vPortExitCritical>
}
 8002e30:	bf00      	nop
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e40:	f001 fb7c 	bl	800453c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e001      	b.n	8002e56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e56:	f001 fba1 	bl	800459c <vPortExitCritical>

	return xReturn;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e6c:	f001 fb66 	bl	800453c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d102      	bne.n	8002e82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e001      	b.n	8002e86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e86:	f001 fb89 	bl	800459c <vPortExitCritical>

	return xReturn;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	e014      	b.n	8002ece <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ea4:	4a0e      	ldr	r2, [pc, #56]	; (8002ee0 <vQueueAddToRegistry+0x4c>)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10b      	bne.n	8002ec8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002eb0:	490b      	ldr	r1, [pc, #44]	; (8002ee0 <vQueueAddToRegistry+0x4c>)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002eba:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <vQueueAddToRegistry+0x4c>)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ec6:	e006      	b.n	8002ed6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b07      	cmp	r3, #7
 8002ed2:	d9e7      	bls.n	8002ea4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	200007d8 	.word	0x200007d8

08002ee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002ef4:	f001 fb22 	bl	800453c <vPortEnterCritical>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f04:	d103      	bne.n	8002f0e <vQueueWaitForMessageRestricted+0x2a>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f14:	b25b      	sxtb	r3, r3
 8002f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f1a:	d103      	bne.n	8002f24 <vQueueWaitForMessageRestricted+0x40>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f24:	f001 fb3a 	bl	800459c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	3324      	adds	r3, #36	; 0x24
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fc31 	bl	80037a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7ff ff28 	bl	8002d94 <prvUnlockQueue>
	}
 8002f44:	bf00      	nop
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08e      	sub	sp, #56	; 0x38
 8002f50:	af04      	add	r7, sp, #16
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	623b      	str	r3, [r7, #32]
}
 8002f72:	bf00      	nop
 8002f74:	e7fe      	b.n	8002f74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10a      	bne.n	8002f92 <xTaskCreateStatic+0x46>
	__asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	61fb      	str	r3, [r7, #28]
}
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f92:	235c      	movs	r3, #92	; 0x5c
 8002f94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b5c      	cmp	r3, #92	; 0x5c
 8002f9a:	d00a      	beq.n	8002fb2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	61bb      	str	r3, [r7, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01e      	beq.n	8002ff6 <xTaskCreateStatic+0xaa>
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01b      	beq.n	8002ff6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9303      	str	r3, [sp, #12]
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	9302      	str	r3, [sp, #8]
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f850 	bl	800308e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ff0:	f000 f8d4 	bl	800319c <prvAddNewTaskToReadyList>
 8002ff4:	e001      	b.n	8002ffa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ffa:	697b      	ldr	r3, [r7, #20]
	}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af04      	add	r7, sp, #16
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f001 fb8f 	bl	800473c <pvPortMalloc>
 800301e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003026:	205c      	movs	r0, #92	; 0x5c
 8003028:	f001 fb88 	bl	800473c <pvPortMalloc>
 800302c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
 800303a:	e005      	b.n	8003048 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800303c:	6978      	ldr	r0, [r7, #20]
 800303e:	f001 fc41 	bl	80048c4 <vPortFree>
 8003042:	e001      	b.n	8003048 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d017      	beq.n	800307e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	2300      	movs	r3, #0
 800305a:	9303      	str	r3, [sp, #12]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	9302      	str	r3, [sp, #8]
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 f80e 	bl	800308e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003072:	69f8      	ldr	r0, [r7, #28]
 8003074:	f000 f892 	bl	800319c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003078:	2301      	movs	r3, #1
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	e002      	b.n	8003084 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003082:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003084:	69bb      	ldr	r3, [r7, #24]
	}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b088      	sub	sp, #32
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800309c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	461a      	mov	r2, r3
 80030a6:	21a5      	movs	r1, #165	; 0xa5
 80030a8:	f001 fd40 	bl	8004b2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80030ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030b6:	3b01      	subs	r3, #1
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f023 0307 	bic.w	r3, r3, #7
 80030c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	617b      	str	r3, [r7, #20]
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e012      	b.n	8003112 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	7819      	ldrb	r1, [r3, #0]
 80030f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	3334      	adds	r3, #52	; 0x34
 80030fc:	460a      	mov	r2, r1
 80030fe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d006      	beq.n	800311a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3301      	adds	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d9e9      	bls.n	80030ec <prvInitialiseNewTask+0x5e>
 8003118:	e000      	b.n	800311c <prvInitialiseNewTask+0x8e>
		{
			break;
 800311a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	2b37      	cmp	r3, #55	; 0x37
 8003128:	d901      	bls.n	800312e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800312a:	2337      	movs	r3, #55	; 0x37
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003138:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	2200      	movs	r2, #0
 800313e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	3304      	adds	r3, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff f98c 	bl	8002462 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	3318      	adds	r3, #24
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff f987 	bl	8002462 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003158:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003168:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	2200      	movs	r2, #0
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	68f9      	ldr	r1, [r7, #12]
 800317c:	69b8      	ldr	r0, [r7, #24]
 800317e:	f001 f8ef 	bl	8004360 <pxPortInitialiseStack>
 8003182:	4602      	mov	r2, r0
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003192:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003194:	bf00      	nop
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031a4:	f001 f9ca 	bl	800453c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031a8:	4b2d      	ldr	r3, [pc, #180]	; (8003260 <prvAddNewTaskToReadyList+0xc4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	4a2c      	ldr	r2, [pc, #176]	; (8003260 <prvAddNewTaskToReadyList+0xc4>)
 80031b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031b2:	4b2c      	ldr	r3, [pc, #176]	; (8003264 <prvAddNewTaskToReadyList+0xc8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031ba:	4a2a      	ldr	r2, [pc, #168]	; (8003264 <prvAddNewTaskToReadyList+0xc8>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <prvAddNewTaskToReadyList+0xc4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d110      	bne.n	80031ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031c8:	f000 fc16 	bl	80039f8 <prvInitialiseTaskLists>
 80031cc:	e00d      	b.n	80031ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <prvAddNewTaskToReadyList+0xcc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <prvAddNewTaskToReadyList+0xc8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d802      	bhi.n	80031ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031e4:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <prvAddNewTaskToReadyList+0xc8>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <prvAddNewTaskToReadyList+0xd0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	4a1e      	ldr	r2, [pc, #120]	; (800326c <prvAddNewTaskToReadyList+0xd0>)
 80031f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <prvAddNewTaskToReadyList+0xd0>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <prvAddNewTaskToReadyList+0xd4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d903      	bls.n	8003210 <prvAddNewTaskToReadyList+0x74>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4a18      	ldr	r2, [pc, #96]	; (8003270 <prvAddNewTaskToReadyList+0xd4>)
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4a15      	ldr	r2, [pc, #84]	; (8003274 <prvAddNewTaskToReadyList+0xd8>)
 800321e:	441a      	add	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f7ff f927 	bl	800247a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800322c:	f001 f9b6 	bl	800459c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003230:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <prvAddNewTaskToReadyList+0xcc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00e      	beq.n	8003256 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <prvAddNewTaskToReadyList+0xc8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	429a      	cmp	r2, r3
 8003244:	d207      	bcs.n	8003256 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <prvAddNewTaskToReadyList+0xdc>)
 8003248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000cec 	.word	0x20000cec
 8003264:	20000818 	.word	0x20000818
 8003268:	20000cf8 	.word	0x20000cf8
 800326c:	20000d08 	.word	0x20000d08
 8003270:	20000cf4 	.word	0x20000cf4
 8003274:	2000081c 	.word	0x2000081c
 8003278:	e000ed04 	.word	0xe000ed04

0800327c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d017      	beq.n	80032be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <vTaskDelay+0x60>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <vTaskDelay+0x30>
	__asm volatile
 8003296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	60bb      	str	r3, [r7, #8]
}
 80032a8:	bf00      	nop
 80032aa:	e7fe      	b.n	80032aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032ac:	f000 f880 	bl	80033b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032b0:	2100      	movs	r1, #0
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fcee 	bl	8003c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032b8:	f000 f888 	bl	80033cc <xTaskResumeAll>
 80032bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <vTaskDelay+0x64>)
 80032c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032d4:	bf00      	nop
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000d14 	.word	0x20000d14
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032f2:	463a      	mov	r2, r7
 80032f4:	1d39      	adds	r1, r7, #4
 80032f6:	f107 0308 	add.w	r3, r7, #8
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff f860 	bl	80023c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	9202      	str	r2, [sp, #8]
 8003308:	9301      	str	r3, [sp, #4]
 800330a:	2300      	movs	r3, #0
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	2300      	movs	r3, #0
 8003310:	460a      	mov	r2, r1
 8003312:	4921      	ldr	r1, [pc, #132]	; (8003398 <vTaskStartScheduler+0xb4>)
 8003314:	4821      	ldr	r0, [pc, #132]	; (800339c <vTaskStartScheduler+0xb8>)
 8003316:	f7ff fe19 	bl	8002f4c <xTaskCreateStatic>
 800331a:	4603      	mov	r3, r0
 800331c:	4a20      	ldr	r2, [pc, #128]	; (80033a0 <vTaskStartScheduler+0xbc>)
 800331e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003320:	4b1f      	ldr	r3, [pc, #124]	; (80033a0 <vTaskStartScheduler+0xbc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003328:	2301      	movs	r3, #1
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	e001      	b.n	8003332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d102      	bne.n	800333e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003338:	f000 fd00 	bl	8003d3c <xTimerCreateTimerTask>
 800333c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d116      	bne.n	8003372 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	613b      	str	r3, [r7, #16]
}
 8003356:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <vTaskStartScheduler+0xc0>)
 800335a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800335e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003360:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <vTaskStartScheduler+0xc4>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <vTaskStartScheduler+0xc8>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800336c:	f001 f874 	bl	8004458 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003370:	e00e      	b.n	8003390 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003378:	d10a      	bne.n	8003390 <vTaskStartScheduler+0xac>
	__asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	60fb      	str	r3, [r7, #12]
}
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <vTaskStartScheduler+0xaa>
}
 8003390:	bf00      	nop
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	0800549c 	.word	0x0800549c
 800339c:	080039c9 	.word	0x080039c9
 80033a0:	20000d10 	.word	0x20000d10
 80033a4:	20000d0c 	.word	0x20000d0c
 80033a8:	20000cf8 	.word	0x20000cf8
 80033ac:	20000cf0 	.word	0x20000cf0

080033b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <vTaskSuspendAll+0x18>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3301      	adds	r3, #1
 80033ba:	4a03      	ldr	r2, [pc, #12]	; (80033c8 <vTaskSuspendAll+0x18>)
 80033bc:	6013      	str	r3, [r2, #0]
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	20000d14 	.word	0x20000d14

080033cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033da:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <xTaskResumeAll+0x118>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	603b      	str	r3, [r7, #0]
}
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033f8:	f001 f8a0 	bl	800453c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033fc:	4b39      	ldr	r3, [pc, #228]	; (80034e4 <xTaskResumeAll+0x118>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3b01      	subs	r3, #1
 8003402:	4a38      	ldr	r2, [pc, #224]	; (80034e4 <xTaskResumeAll+0x118>)
 8003404:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <xTaskResumeAll+0x118>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d162      	bne.n	80034d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800340e:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <xTaskResumeAll+0x11c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d05e      	beq.n	80034d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003416:	e02f      	b.n	8003478 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003418:	4b34      	ldr	r3, [pc, #208]	; (80034ec <xTaskResumeAll+0x120>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3318      	adds	r3, #24
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff f883 	bl	8002530 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3304      	adds	r3, #4
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f87e 	bl	8002530 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <xTaskResumeAll+0x124>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d903      	bls.n	8003448 <xTaskResumeAll+0x7c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	4a2a      	ldr	r2, [pc, #168]	; (80034f0 <xTaskResumeAll+0x124>)
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4a27      	ldr	r2, [pc, #156]	; (80034f4 <xTaskResumeAll+0x128>)
 8003456:	441a      	add	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f7ff f80b 	bl	800247a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <xTaskResumeAll+0x12c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003472:	4b22      	ldr	r3, [pc, #136]	; (80034fc <xTaskResumeAll+0x130>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <xTaskResumeAll+0x120>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1cb      	bne.n	8003418 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003486:	f000 fb55 	bl	8003b34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <xTaskResumeAll+0x134>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003496:	f000 f845 	bl	8003524 <xTaskIncrementTick>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80034a0:	4b16      	ldr	r3, [pc, #88]	; (80034fc <xTaskResumeAll+0x130>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f1      	bne.n	8003496 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80034b2:	4b13      	ldr	r3, [pc, #76]	; (8003500 <xTaskResumeAll+0x134>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034b8:	4b10      	ldr	r3, [pc, #64]	; (80034fc <xTaskResumeAll+0x130>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034c4:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <xTaskResumeAll+0x138>)
 80034c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034d4:	f001 f862 	bl	800459c <vPortExitCritical>

	return xAlreadyYielded;
 80034d8:	68bb      	ldr	r3, [r7, #8]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000d14 	.word	0x20000d14
 80034e8:	20000cec 	.word	0x20000cec
 80034ec:	20000cac 	.word	0x20000cac
 80034f0:	20000cf4 	.word	0x20000cf4
 80034f4:	2000081c 	.word	0x2000081c
 80034f8:	20000818 	.word	0x20000818
 80034fc:	20000d00 	.word	0x20000d00
 8003500:	20000cfc 	.word	0x20000cfc
 8003504:	e000ed04 	.word	0xe000ed04

08003508 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <xTaskGetTickCount+0x18>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003514:	687b      	ldr	r3, [r7, #4]
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr
 8003520:	20000cf0 	.word	0x20000cf0

08003524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800352e:	4b51      	ldr	r3, [pc, #324]	; (8003674 <xTaskIncrementTick+0x150>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f040 808e 	bne.w	8003654 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003538:	4b4f      	ldr	r3, [pc, #316]	; (8003678 <xTaskIncrementTick+0x154>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003540:	4a4d      	ldr	r2, [pc, #308]	; (8003678 <xTaskIncrementTick+0x154>)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d120      	bne.n	800358e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800354c:	4b4b      	ldr	r3, [pc, #300]	; (800367c <xTaskIncrementTick+0x158>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <xTaskIncrementTick+0x48>
	__asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	603b      	str	r3, [r7, #0]
}
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <xTaskIncrementTick+0x46>
 800356c:	4b43      	ldr	r3, [pc, #268]	; (800367c <xTaskIncrementTick+0x158>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b43      	ldr	r3, [pc, #268]	; (8003680 <xTaskIncrementTick+0x15c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a41      	ldr	r2, [pc, #260]	; (800367c <xTaskIncrementTick+0x158>)
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4a41      	ldr	r2, [pc, #260]	; (8003680 <xTaskIncrementTick+0x15c>)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b40      	ldr	r3, [pc, #256]	; (8003684 <xTaskIncrementTick+0x160>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3301      	adds	r3, #1
 8003586:	4a3f      	ldr	r2, [pc, #252]	; (8003684 <xTaskIncrementTick+0x160>)
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	f000 fad3 	bl	8003b34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800358e:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <xTaskIncrementTick+0x164>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	429a      	cmp	r2, r3
 8003596:	d34e      	bcc.n	8003636 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003598:	4b38      	ldr	r3, [pc, #224]	; (800367c <xTaskIncrementTick+0x158>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <xTaskIncrementTick+0x82>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <xTaskIncrementTick+0x84>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ac:	4b36      	ldr	r3, [pc, #216]	; (8003688 <xTaskIncrementTick+0x164>)
 80035ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b2:	601a      	str	r2, [r3, #0]
					break;
 80035b4:	e03f      	b.n	8003636 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <xTaskIncrementTick+0x158>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d203      	bcs.n	80035d6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035ce:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <xTaskIncrementTick+0x164>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6013      	str	r3, [r2, #0]
						break;
 80035d4:	e02f      	b.n	8003636 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	3304      	adds	r3, #4
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe ffa8 	bl	8002530 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3318      	adds	r3, #24
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe ff9f 	bl	8002530 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f6:	4b25      	ldr	r3, [pc, #148]	; (800368c <xTaskIncrementTick+0x168>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d903      	bls.n	8003606 <xTaskIncrementTick+0xe2>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	4a22      	ldr	r2, [pc, #136]	; (800368c <xTaskIncrementTick+0x168>)
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <xTaskIncrementTick+0x16c>)
 8003614:	441a      	add	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3304      	adds	r3, #4
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f7fe ff2c 	bl	800247a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003626:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <xTaskIncrementTick+0x170>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	429a      	cmp	r2, r3
 800362e:	d3b3      	bcc.n	8003598 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003630:	2301      	movs	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003634:	e7b0      	b.n	8003598 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <xTaskIncrementTick+0x170>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	4914      	ldr	r1, [pc, #80]	; (8003690 <xTaskIncrementTick+0x16c>)
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d907      	bls.n	800365e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800364e:	2301      	movs	r3, #1
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e004      	b.n	800365e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003654:	4b10      	ldr	r3, [pc, #64]	; (8003698 <xTaskIncrementTick+0x174>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	4a0f      	ldr	r2, [pc, #60]	; (8003698 <xTaskIncrementTick+0x174>)
 800365c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <xTaskIncrementTick+0x178>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003666:	2301      	movs	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800366a:	697b      	ldr	r3, [r7, #20]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000d14 	.word	0x20000d14
 8003678:	20000cf0 	.word	0x20000cf0
 800367c:	20000ca4 	.word	0x20000ca4
 8003680:	20000ca8 	.word	0x20000ca8
 8003684:	20000d04 	.word	0x20000d04
 8003688:	20000d0c 	.word	0x20000d0c
 800368c:	20000cf4 	.word	0x20000cf4
 8003690:	2000081c 	.word	0x2000081c
 8003694:	20000818 	.word	0x20000818
 8003698:	20000cfc 	.word	0x20000cfc
 800369c:	20000d00 	.word	0x20000d00

080036a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036a6:	4b27      	ldr	r3, [pc, #156]	; (8003744 <vTaskSwitchContext+0xa4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <vTaskSwitchContext+0xa8>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036b4:	e041      	b.n	800373a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <vTaskSwitchContext+0xa8>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <vTaskSwitchContext+0xac>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e010      	b.n	80036e6 <vTaskSwitchContext+0x46>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	607b      	str	r3, [r7, #4]
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <vTaskSwitchContext+0x3e>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	491a      	ldr	r1, [pc, #104]	; (8003750 <vTaskSwitchContext+0xb0>)
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0e4      	beq.n	80036c4 <vTaskSwitchContext+0x24>
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4a12      	ldr	r2, [pc, #72]	; (8003750 <vTaskSwitchContext+0xb0>)
 8003706:	4413      	add	r3, r2
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	3308      	adds	r3, #8
 800371c:	429a      	cmp	r2, r3
 800371e:	d104      	bne.n	800372a <vTaskSwitchContext+0x8a>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a08      	ldr	r2, [pc, #32]	; (8003754 <vTaskSwitchContext+0xb4>)
 8003732:	6013      	str	r3, [r2, #0]
 8003734:	4a05      	ldr	r2, [pc, #20]	; (800374c <vTaskSwitchContext+0xac>)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6013      	str	r3, [r2, #0]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	20000d14 	.word	0x20000d14
 8003748:	20000d00 	.word	0x20000d00
 800374c:	20000cf4 	.word	0x20000cf4
 8003750:	2000081c 	.word	0x2000081c
 8003754:	20000818 	.word	0x20000818

08003758 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	60fb      	str	r3, [r7, #12]
}
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <vTaskPlaceOnEventList+0x44>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3318      	adds	r3, #24
 8003784:	4619      	mov	r1, r3
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fe fe9a 	bl	80024c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800378c:	2101      	movs	r1, #1
 800378e:	6838      	ldr	r0, [r7, #0]
 8003790:	f000 fa80 	bl	8003c94 <prvAddCurrentTaskToDelayedList>
}
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000818 	.word	0x20000818

080037a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	f383 8811 	msr	BASEPRI, r3
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	f3bf 8f4f 	dsb	sy
 80037c2:	617b      	str	r3, [r7, #20]
}
 80037c4:	bf00      	nop
 80037c6:	e7fe      	b.n	80037c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037c8:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3318      	adds	r3, #24
 80037ce:	4619      	mov	r1, r3
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7fe fe52 	bl	800247a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80037dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	68b8      	ldr	r0, [r7, #8]
 80037e6:	f000 fa55 	bl	8003c94 <prvAddCurrentTaskToDelayedList>
	}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000818 	.word	0x20000818

080037f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	60fb      	str	r3, [r7, #12]
}
 8003820:	bf00      	nop
 8003822:	e7fe      	b.n	8003822 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	3318      	adds	r3, #24
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe fe81 	bl	8002530 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <xTaskRemoveFromEventList+0xb0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d11d      	bne.n	8003872 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	3304      	adds	r3, #4
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe fe78 	bl	8002530 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <xTaskRemoveFromEventList+0xb4>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d903      	bls.n	8003854 <xTaskRemoveFromEventList+0x5c>
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a16      	ldr	r2, [pc, #88]	; (80038ac <xTaskRemoveFromEventList+0xb4>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <xTaskRemoveFromEventList+0xb8>)
 8003862:	441a      	add	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	3304      	adds	r3, #4
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f7fe fe05 	bl	800247a <vListInsertEnd>
 8003870:	e005      	b.n	800387e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	3318      	adds	r3, #24
 8003876:	4619      	mov	r1, r3
 8003878:	480e      	ldr	r0, [pc, #56]	; (80038b4 <xTaskRemoveFromEventList+0xbc>)
 800387a:	f7fe fdfe 	bl	800247a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <xTaskRemoveFromEventList+0xc0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	429a      	cmp	r2, r3
 800388a:	d905      	bls.n	8003898 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800388c:	2301      	movs	r3, #1
 800388e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <xTaskRemoveFromEventList+0xc4>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e001      	b.n	800389c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800389c:	697b      	ldr	r3, [r7, #20]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000d14 	.word	0x20000d14
 80038ac:	20000cf4 	.word	0x20000cf4
 80038b0:	2000081c 	.word	0x2000081c
 80038b4:	20000cac 	.word	0x20000cac
 80038b8:	20000818 	.word	0x20000818
 80038bc:	20000d00 	.word	0x20000d00

080038c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <vTaskInternalSetTimeOutState+0x24>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <vTaskInternalSetTimeOutState+0x28>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	605a      	str	r2, [r3, #4]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000d04 	.word	0x20000d04
 80038e8:	20000cf0 	.word	0x20000cf0

080038ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10a      	bne.n	8003912 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	613b      	str	r3, [r7, #16]
}
 800390e:	bf00      	nop
 8003910:	e7fe      	b.n	8003910 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	60fb      	str	r3, [r7, #12]
}
 800392a:	bf00      	nop
 800392c:	e7fe      	b.n	800392c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800392e:	f000 fe05 	bl	800453c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <xTaskCheckForTimeOut+0xbc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800394a:	d102      	bne.n	8003952 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e023      	b.n	800399a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <xTaskCheckForTimeOut+0xc0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d007      	beq.n	800396e <xTaskCheckForTimeOut+0x82>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	429a      	cmp	r2, r3
 8003966:	d302      	bcc.n	800396e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003968:	2301      	movs	r3, #1
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	e015      	b.n	800399a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	d20b      	bcs.n	8003990 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	1ad2      	subs	r2, r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ff9b 	bl	80038c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e004      	b.n	800399a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800399a:	f000 fdff 	bl	800459c <vPortExitCritical>

	return xReturn;
 800399e:	69fb      	ldr	r3, [r7, #28]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000cf0 	.word	0x20000cf0
 80039ac:	20000d04 	.word	0x20000d04

080039b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <vTaskMissedYield+0x14>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
}
 80039ba:	bf00      	nop
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000d00 	.word	0x20000d00

080039c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039d0:	f000 f852 	bl	8003a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039d4:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <prvIdleTask+0x28>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d9f9      	bls.n	80039d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <prvIdleTask+0x2c>)
 80039de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039ec:	e7f0      	b.n	80039d0 <prvIdleTask+0x8>
 80039ee:	bf00      	nop
 80039f0:	2000081c 	.word	0x2000081c
 80039f4:	e000ed04 	.word	0xe000ed04

080039f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	e00c      	b.n	8003a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4a12      	ldr	r2, [pc, #72]	; (8003a58 <prvInitialiseTaskLists+0x60>)
 8003a10:	4413      	add	r3, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fd06 	bl	8002424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b37      	cmp	r3, #55	; 0x37
 8003a22:	d9ef      	bls.n	8003a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a24:	480d      	ldr	r0, [pc, #52]	; (8003a5c <prvInitialiseTaskLists+0x64>)
 8003a26:	f7fe fcfd 	bl	8002424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a2a:	480d      	ldr	r0, [pc, #52]	; (8003a60 <prvInitialiseTaskLists+0x68>)
 8003a2c:	f7fe fcfa 	bl	8002424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a30:	480c      	ldr	r0, [pc, #48]	; (8003a64 <prvInitialiseTaskLists+0x6c>)
 8003a32:	f7fe fcf7 	bl	8002424 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a36:	480c      	ldr	r0, [pc, #48]	; (8003a68 <prvInitialiseTaskLists+0x70>)
 8003a38:	f7fe fcf4 	bl	8002424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a3c:	480b      	ldr	r0, [pc, #44]	; (8003a6c <prvInitialiseTaskLists+0x74>)
 8003a3e:	f7fe fcf1 	bl	8002424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <prvInitialiseTaskLists+0x78>)
 8003a44:	4a05      	ldr	r2, [pc, #20]	; (8003a5c <prvInitialiseTaskLists+0x64>)
 8003a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <prvInitialiseTaskLists+0x7c>)
 8003a4a:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <prvInitialiseTaskLists+0x68>)
 8003a4c:	601a      	str	r2, [r3, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	2000081c 	.word	0x2000081c
 8003a5c:	20000c7c 	.word	0x20000c7c
 8003a60:	20000c90 	.word	0x20000c90
 8003a64:	20000cac 	.word	0x20000cac
 8003a68:	20000cc0 	.word	0x20000cc0
 8003a6c:	20000cd8 	.word	0x20000cd8
 8003a70:	20000ca4 	.word	0x20000ca4
 8003a74:	20000ca8 	.word	0x20000ca8

08003a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a7e:	e019      	b.n	8003ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a80:	f000 fd5c 	bl	800453c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <prvCheckTasksWaitingTermination+0x50>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe fd4d 	bl	8002530 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <prvCheckTasksWaitingTermination+0x54>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <prvCheckTasksWaitingTermination+0x54>)
 8003a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <prvCheckTasksWaitingTermination+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <prvCheckTasksWaitingTermination+0x58>)
 8003aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003aaa:	f000 fd77 	bl	800459c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f810 	bl	8003ad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <prvCheckTasksWaitingTermination+0x58>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e1      	bne.n	8003a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000cc0 	.word	0x20000cc0
 8003acc:	20000cec 	.word	0x20000cec
 8003ad0:	20000cd4 	.word	0x20000cd4

08003ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 feea 	bl	80048c4 <vPortFree>
				vPortFree( pxTCB );
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fee7 	bl	80048c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003af6:	e018      	b.n	8003b2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d103      	bne.n	8003b0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fede 	bl	80048c4 <vPortFree>
	}
 8003b08:	e00f      	b.n	8003b2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d00a      	beq.n	8003b2a <prvDeleteTCB+0x56>
	__asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	60fb      	str	r3, [r7, #12]
}
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <prvDeleteTCB+0x54>
	}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <prvResetNextTaskUnblockTime+0x40>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d101      	bne.n	8003b48 <prvResetNextTaskUnblockTime+0x14>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <prvResetNextTaskUnblockTime+0x16>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b4e:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <prvResetNextTaskUnblockTime+0x44>)
 8003b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b54:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b56:	e008      	b.n	8003b6a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <prvResetNextTaskUnblockTime+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <prvResetNextTaskUnblockTime+0x44>)
 8003b68:	6013      	str	r3, [r2, #0]
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	20000ca4 	.word	0x20000ca4
 8003b78:	20000d0c 	.word	0x20000d0c

08003b7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <xTaskGetSchedulerState+0x34>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	e008      	b.n	8003ba2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b90:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <xTaskGetSchedulerState+0x38>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d102      	bne.n	8003b9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	607b      	str	r3, [r7, #4]
 8003b9c:	e001      	b.n	8003ba2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ba2:	687b      	ldr	r3, [r7, #4]
	}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000cf8 	.word	0x20000cf8
 8003bb4:	20000d14 	.word	0x20000d14

08003bb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d056      	beq.n	8003c7c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bce:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <xTaskPriorityDisinherit+0xd0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d00a      	beq.n	8003bee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	f383 8811 	msr	BASEPRI, r3
 8003be0:	f3bf 8f6f 	isb	sy
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	60fb      	str	r3, [r7, #12]
}
 8003bea:	bf00      	nop
 8003bec:	e7fe      	b.n	8003bec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	60bb      	str	r3, [r7, #8]
}
 8003c08:	bf00      	nop
 8003c0a:	e7fe      	b.n	8003c0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c10:	1e5a      	subs	r2, r3, #1
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d02c      	beq.n	8003c7c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d128      	bne.n	8003c7c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fc7e 	bl	8002530 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <xTaskPriorityDisinherit+0xd4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d903      	bls.n	8003c5c <xTaskPriorityDisinherit+0xa4>
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <xTaskPriorityDisinherit+0xd4>)
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <xTaskPriorityDisinherit+0xd8>)
 8003c6a:	441a      	add	r2, r3
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f7fe fc01 	bl	800247a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c7c:	697b      	ldr	r3, [r7, #20]
	}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000818 	.word	0x20000818
 8003c8c:	20000cf4 	.word	0x20000cf4
 8003c90:	2000081c 	.word	0x2000081c

08003c94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c9e:	4b21      	ldr	r3, [pc, #132]	; (8003d24 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ca4:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fc40 	bl	8002530 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb6:	d10a      	bne.n	8003cce <prvAddCurrentTaskToDelayedList+0x3a>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cbe:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4819      	ldr	r0, [pc, #100]	; (8003d2c <prvAddCurrentTaskToDelayedList+0x98>)
 8003cc8:	f7fe fbd7 	bl	800247a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ccc:	e026      	b.n	8003d1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d209      	bcs.n	8003cfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3304      	adds	r3, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	f7fe fbe4 	bl	80024c0 <vListInsert>
}
 8003cf8:	e010      	b.n	8003d1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7fe fbda 	bl	80024c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d202      	bcs.n	8003d1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d16:	4a08      	ldr	r2, [pc, #32]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000cf0 	.word	0x20000cf0
 8003d28:	20000818 	.word	0x20000818
 8003d2c:	20000cd8 	.word	0x20000cd8
 8003d30:	20000ca8 	.word	0x20000ca8
 8003d34:	20000ca4 	.word	0x20000ca4
 8003d38:	20000d0c 	.word	0x20000d0c

08003d3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d46:	f000 facb 	bl	80042e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d4a:	4b1c      	ldr	r3, [pc, #112]	; (8003dbc <xTimerCreateTimerTask+0x80>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d021      	beq.n	8003d96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d5a:	1d3a      	adds	r2, r7, #4
 8003d5c:	f107 0108 	add.w	r1, r7, #8
 8003d60:	f107 030c 	add.w	r3, r7, #12
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fe fb43 	bl	80023f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	9202      	str	r2, [sp, #8]
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	2302      	movs	r3, #2
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	4910      	ldr	r1, [pc, #64]	; (8003dc0 <xTimerCreateTimerTask+0x84>)
 8003d7e:	4811      	ldr	r0, [pc, #68]	; (8003dc4 <xTimerCreateTimerTask+0x88>)
 8003d80:	f7ff f8e4 	bl	8002f4c <xTaskCreateStatic>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <xTimerCreateTimerTask+0x8c>)
 8003d88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <xTimerCreateTimerTask+0x8c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d92:	2301      	movs	r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	613b      	str	r3, [r7, #16]
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003db2:	697b      	ldr	r3, [r7, #20]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20000d48 	.word	0x20000d48
 8003dc0:	080054a4 	.word	0x080054a4
 8003dc4:	08003ee9 	.word	0x08003ee9
 8003dc8:	20000d4c 	.word	0x20000d4c

08003dcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xTimerGenericCommand+0x2e>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	623b      	str	r3, [r7, #32]
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <xTimerGenericCommand+0x98>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d02a      	beq.n	8003e58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	dc18      	bgt.n	8003e46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e14:	f7ff feb2 	bl	8003b7c <xTaskGetSchedulerState>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d109      	bne.n	8003e32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <xTimerGenericCommand+0x98>)
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	f107 0110 	add.w	r1, r7, #16
 8003e26:	2300      	movs	r3, #0
 8003e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2a:	f7fe fcad 	bl	8002788 <xQueueGenericSend>
 8003e2e:	6278      	str	r0, [r7, #36]	; 0x24
 8003e30:	e012      	b.n	8003e58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <xTimerGenericCommand+0x98>)
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	f107 0110 	add.w	r1, r7, #16
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f7fe fca3 	bl	8002788 <xQueueGenericSend>
 8003e42:	6278      	str	r0, [r7, #36]	; 0x24
 8003e44:	e008      	b.n	8003e58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e46:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <xTimerGenericCommand+0x98>)
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	f107 0110 	add.w	r1, r7, #16
 8003e4e:	2300      	movs	r3, #0
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	f7fe fd97 	bl	8002984 <xQueueGenericSendFromISR>
 8003e56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3728      	adds	r7, #40	; 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000d48 	.word	0x20000d48

08003e68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e72:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <prvProcessExpiredTimer+0x7c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fb55 	bl	8002530 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d122      	bne.n	8003ed4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	18d1      	adds	r1, r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f000 f8c8 	bl	8004030 <prvInsertTimerInActiveList>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	2100      	movs	r1, #0
 8003eb0:	6978      	ldr	r0, [r7, #20]
 8003eb2:	f7ff ff8b 	bl	8003dcc <xTimerGenericCommand>
 8003eb6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	60fb      	str	r3, [r7, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	6978      	ldr	r0, [r7, #20]
 8003eda:	4798      	blx	r3
}
 8003edc:	bf00      	nop
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000d40 	.word	0x20000d40

08003ee8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ef0:	f107 0308 	add.w	r3, r7, #8
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 f857 	bl	8003fa8 <prvGetNextExpireTime>
 8003efa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	4619      	mov	r1, r3
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f803 	bl	8003f0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f06:	f000 f8d5 	bl	80040b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f0a:	e7f1      	b.n	8003ef0 <prvTimerTask+0x8>

08003f0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f16:	f7ff fa4b 	bl	80033b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f1a:	f107 0308 	add.w	r3, r7, #8
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 f866 	bl	8003ff0 <prvSampleTimeNow>
 8003f24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d130      	bne.n	8003f8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <prvProcessTimerOrBlockTask+0x3c>
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d806      	bhi.n	8003f48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f3a:	f7ff fa47 	bl	80033cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ff91 	bl	8003e68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f46:	e024      	b.n	8003f92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <prvProcessTimerOrBlockTask+0x90>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f60:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <prvProcessTimerOrBlockTask+0x94>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f7fe ffb9 	bl	8002ee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f72:	f7ff fa2b 	bl	80033cc <xTaskResumeAll>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <prvProcessTimerOrBlockTask+0x98>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
}
 8003f8c:	e001      	b.n	8003f92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f8e:	f7ff fa1d 	bl	80033cc <xTaskResumeAll>
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000d44 	.word	0x20000d44
 8003fa0:	20000d48 	.word	0x20000d48
 8003fa4:	e000ed04 	.word	0xe000ed04

08003fa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <prvGetNextExpireTime+0x44>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	bf0c      	ite	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	2300      	movne	r3, #0
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d105      	bne.n	8003fda <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <prvGetNextExpireTime+0x44>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	e001      	b.n	8003fde <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003fde:	68fb      	ldr	r3, [r7, #12]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000d40 	.word	0x20000d40

08003ff0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ff8:	f7ff fa86 	bl	8003508 <xTaskGetTickCount>
 8003ffc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	; (800402c <prvSampleTimeNow+0x3c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	429a      	cmp	r2, r3
 8004006:	d205      	bcs.n	8004014 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004008:	f000 f908 	bl	800421c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e002      	b.n	800401a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800401a:	4a04      	ldr	r2, [pc, #16]	; (800402c <prvSampleTimeNow+0x3c>)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000d50 	.word	0x20000d50

08004030 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d812      	bhi.n	800407c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	1ad2      	subs	r2, r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	429a      	cmp	r2, r3
 8004062:	d302      	bcc.n	800406a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004064:	2301      	movs	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e01b      	b.n	80040a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <prvInsertTimerInActiveList+0x7c>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3304      	adds	r3, #4
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f7fe fa23 	bl	80024c0 <vListInsert>
 800407a:	e012      	b.n	80040a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d206      	bcs.n	8004092 <prvInsertTimerInActiveList+0x62>
 8004084:	68ba      	ldr	r2, [r7, #8]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d302      	bcc.n	8004092 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800408c:	2301      	movs	r3, #1
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	e007      	b.n	80040a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <prvInsertTimerInActiveList+0x80>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3304      	adds	r3, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4610      	mov	r0, r2
 800409e:	f7fe fa0f 	bl	80024c0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80040a2:	697b      	ldr	r3, [r7, #20]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000d44 	.word	0x20000d44
 80040b0:	20000d40 	.word	0x20000d40

080040b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08e      	sub	sp, #56	; 0x38
 80040b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040ba:	e09d      	b.n	80041f8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	da18      	bge.n	80040f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	3304      	adds	r3, #4
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	61fb      	str	r3, [r7, #28]
}
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ea:	6850      	ldr	r0, [r2, #4]
 80040ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ee:	6892      	ldr	r2, [r2, #8]
 80040f0:	4611      	mov	r1, r2
 80040f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	db7e      	blt.n	80041f8 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	3304      	adds	r3, #4
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fa10 	bl	8002530 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004110:	463b      	mov	r3, r7
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ff6c 	bl	8003ff0 <prvSampleTimeNow>
 8004118:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b09      	cmp	r3, #9
 800411e:	d86a      	bhi.n	80041f6 <prvProcessReceivedCommands+0x142>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <prvProcessReceivedCommands+0x74>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	08004151 	.word	0x08004151
 800412c:	08004151 	.word	0x08004151
 8004130:	08004151 	.word	0x08004151
 8004134:	080041f9 	.word	0x080041f9
 8004138:	080041ad 	.word	0x080041ad
 800413c:	080041e5 	.word	0x080041e5
 8004140:	08004151 	.word	0x08004151
 8004144:	08004151 	.word	0x08004151
 8004148:	080041f9 	.word	0x080041f9
 800414c:	080041ad 	.word	0x080041ad
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	18d1      	adds	r1, r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415e:	f7ff ff67 	bl	8004030 <prvInsertTimerInActiveList>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d047      	beq.n	80041f8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800416e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d13f      	bne.n	80041f8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	441a      	add	r2, r3
 8004180:	2300      	movs	r3, #0
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	2100      	movs	r1, #0
 8004188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800418a:	f7ff fe1f 	bl	8003dcc <xTimerGenericCommand>
 800418e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d130      	bne.n	80041f8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	61bb      	str	r3, [r7, #24]
}
 80041a8:	bf00      	nop
 80041aa:	e7fe      	b.n	80041aa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10a      	bne.n	80041d0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	617b      	str	r3, [r7, #20]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	18d1      	adds	r1, r2, r3
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041de:	f7ff ff27 	bl	8004030 <prvInsertTimerInActiveList>
					break;
 80041e2:	e009      	b.n	80041f8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80041ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041f0:	f000 fb68 	bl	80048c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041f4:	e000      	b.n	80041f8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 80041f6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <prvProcessReceivedCommands+0x164>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	1d39      	adds	r1, r7, #4
 80041fe:	2200      	movs	r2, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe fc57 	bl	8002ab4 <xQueueReceive>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	f47f af57 	bne.w	80040bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800420e:	bf00      	nop
 8004210:	bf00      	nop
 8004212:	3730      	adds	r7, #48	; 0x30
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000d48 	.word	0x20000d48

0800421c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004222:	e045      	b.n	80042b0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004224:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <prvSwitchTimerLists+0xbc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800422e:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <prvSwitchTimerLists+0xbc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3304      	adds	r3, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe f977 	bl	8002530 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d12e      	bne.n	80042b0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	429a      	cmp	r2, r3
 8004262:	d90e      	bls.n	8004282 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <prvSwitchTimerLists+0xbc>)
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f7fe f920 	bl	80024c0 <vListInsert>
 8004280:	e016      	b.n	80042b0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004282:	2300      	movs	r3, #0
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2300      	movs	r3, #0
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	2100      	movs	r1, #0
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff fd9d 	bl	8003dcc <xTimerGenericCommand>
 8004292:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <prvSwitchTimerLists+0x94>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	603b      	str	r3, [r7, #0]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <prvSwitchTimerLists+0xbc>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1b4      	bne.n	8004224 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <prvSwitchTimerLists+0xbc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <prvSwitchTimerLists+0xc0>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <prvSwitchTimerLists+0xbc>)
 80042c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042c8:	4a04      	ldr	r2, [pc, #16]	; (80042dc <prvSwitchTimerLists+0xc0>)
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	6013      	str	r3, [r2, #0]
}
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000d40 	.word	0x20000d40
 80042dc:	20000d44 	.word	0x20000d44

080042e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042e6:	f000 f929 	bl	800453c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042ea:	4b15      	ldr	r3, [pc, #84]	; (8004340 <prvCheckForValidListAndQueue+0x60>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d120      	bne.n	8004334 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042f2:	4814      	ldr	r0, [pc, #80]	; (8004344 <prvCheckForValidListAndQueue+0x64>)
 80042f4:	f7fe f896 	bl	8002424 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80042f8:	4813      	ldr	r0, [pc, #76]	; (8004348 <prvCheckForValidListAndQueue+0x68>)
 80042fa:	f7fe f893 	bl	8002424 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <prvCheckForValidListAndQueue+0x6c>)
 8004300:	4a10      	ldr	r2, [pc, #64]	; (8004344 <prvCheckForValidListAndQueue+0x64>)
 8004302:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004304:	4b12      	ldr	r3, [pc, #72]	; (8004350 <prvCheckForValidListAndQueue+0x70>)
 8004306:	4a10      	ldr	r2, [pc, #64]	; (8004348 <prvCheckForValidListAndQueue+0x68>)
 8004308:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800430a:	2300      	movs	r3, #0
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <prvCheckForValidListAndQueue+0x74>)
 8004310:	4a11      	ldr	r2, [pc, #68]	; (8004358 <prvCheckForValidListAndQueue+0x78>)
 8004312:	2110      	movs	r1, #16
 8004314:	200a      	movs	r0, #10
 8004316:	f7fe f99d 	bl	8002654 <xQueueGenericCreateStatic>
 800431a:	4603      	mov	r3, r0
 800431c:	4a08      	ldr	r2, [pc, #32]	; (8004340 <prvCheckForValidListAndQueue+0x60>)
 800431e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <prvCheckForValidListAndQueue+0x60>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <prvCheckForValidListAndQueue+0x60>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	490b      	ldr	r1, [pc, #44]	; (800435c <prvCheckForValidListAndQueue+0x7c>)
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fdb0 	bl	8002e94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004334:	f000 f932 	bl	800459c <vPortExitCritical>
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000d48 	.word	0x20000d48
 8004344:	20000d18 	.word	0x20000d18
 8004348:	20000d2c 	.word	0x20000d2c
 800434c:	20000d40 	.word	0x20000d40
 8004350:	20000d44 	.word	0x20000d44
 8004354:	20000df4 	.word	0x20000df4
 8004358:	20000d54 	.word	0x20000d54
 800435c:	080054ac 	.word	0x080054ac

08004360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3b04      	subs	r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3b04      	subs	r3, #4
 800437e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	3b04      	subs	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <pxPortInitialiseStack+0x54>)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3b14      	subs	r3, #20
 800439a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b20      	subs	r3, #32
 80043a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043a8:	68fb      	ldr	r3, [r7, #12]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	080043b9 	.word	0x080043b9

080043b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <prvTaskExitError+0x54>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ca:	d00a      	beq.n	80043e2 <prvTaskExitError+0x2a>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60fb      	str	r3, [r7, #12]
}
 80043de:	bf00      	nop
 80043e0:	e7fe      	b.n	80043e0 <prvTaskExitError+0x28>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	60bb      	str	r3, [r7, #8]
}
 80043f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80043f6:	bf00      	nop
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0fc      	beq.n	80043f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043fe:	bf00      	nop
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	2000000c 	.word	0x2000000c

08004410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <pxCurrentTCBConst2>)
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	6808      	ldr	r0, [r1, #0]
 8004416:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800441a:	f380 8809 	msr	PSP, r0
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f380 8811 	msr	BASEPRI, r0
 800442a:	f04e 0e0d 	orr.w	lr, lr, #13
 800442e:	4770      	bx	lr

08004430 <pxCurrentTCBConst2>:
 8004430:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004438:	4806      	ldr	r0, [pc, #24]	; (8004454 <prvPortStartFirstTask+0x1c>)
 800443a:	6800      	ldr	r0, [r0, #0]
 800443c:	6800      	ldr	r0, [r0, #0]
 800443e:	f380 8808 	msr	MSP, r0
 8004442:	b662      	cpsie	i
 8004444:	b661      	cpsie	f
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	df00      	svc	0
 8004450:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004452:	bf00      	nop
 8004454:	e000ed08 	.word	0xe000ed08

08004458 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800445e:	4b32      	ldr	r3, [pc, #200]	; (8004528 <xPortStartScheduler+0xd0>)
 8004460:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b2a      	ldr	r3, [pc, #168]	; (800452c <xPortStartScheduler+0xd4>)
 8004484:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004486:	4b2a      	ldr	r3, [pc, #168]	; (8004530 <xPortStartScheduler+0xd8>)
 8004488:	2207      	movs	r2, #7
 800448a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800448c:	e009      	b.n	80044a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800448e:	4b28      	ldr	r3, [pc, #160]	; (8004530 <xPortStartScheduler+0xd8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	4a26      	ldr	r2, [pc, #152]	; (8004530 <xPortStartScheduler+0xd8>)
 8004496:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b80      	cmp	r3, #128	; 0x80
 80044ac:	d0ef      	beq.n	800448e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <xPortStartScheduler+0xd8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d00a      	beq.n	80044d0 <xPortStartScheduler+0x78>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60bb      	str	r3, [r7, #8]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044d0:	4b17      	ldr	r3, [pc, #92]	; (8004530 <xPortStartScheduler+0xd8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	4a16      	ldr	r2, [pc, #88]	; (8004530 <xPortStartScheduler+0xd8>)
 80044d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <xPortStartScheduler+0xd8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044e2:	4a13      	ldr	r2, [pc, #76]	; (8004530 <xPortStartScheduler+0xd8>)
 80044e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <xPortStartScheduler+0xdc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a10      	ldr	r2, [pc, #64]	; (8004534 <xPortStartScheduler+0xdc>)
 80044f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044fa:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <xPortStartScheduler+0xdc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a0d      	ldr	r2, [pc, #52]	; (8004534 <xPortStartScheduler+0xdc>)
 8004500:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004504:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004506:	f000 f8b9 	bl	800467c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <xPortStartScheduler+0xe0>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004510:	f7ff ff92 	bl	8004438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004514:	f7ff f8c4 	bl	80036a0 <vTaskSwitchContext>
	prvTaskExitError();
 8004518:	f7ff ff4e 	bl	80043b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	e000e400 	.word	0xe000e400
 800452c:	20000e44 	.word	0x20000e44
 8004530:	20000e48 	.word	0x20000e48
 8004534:	e000ed20 	.word	0xe000ed20
 8004538:	2000000c 	.word	0x2000000c

0800453c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
	__asm volatile
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	607b      	str	r3, [r7, #4]
}
 8004554:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004556:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <vPortEnterCritical+0x58>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3301      	adds	r3, #1
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <vPortEnterCritical+0x58>)
 800455e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <vPortEnterCritical+0x58>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d10f      	bne.n	8004588 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <vPortEnterCritical+0x5c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <vPortEnterCritical+0x4c>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	603b      	str	r3, [r7, #0]
}
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <vPortEnterCritical+0x4a>
	}
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	2000000c 	.word	0x2000000c
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <vPortExitCritical+0x4c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <vPortExitCritical+0x24>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	607b      	str	r3, [r7, #4]
}
 80045bc:	bf00      	nop
 80045be:	e7fe      	b.n	80045be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <vPortExitCritical+0x4c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <vPortExitCritical+0x4c>)
 80045c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <vPortExitCritical+0x4c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d105      	bne.n	80045de <vPortExitCritical+0x42>
 80045d2:	2300      	movs	r3, #0
 80045d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f383 8811 	msr	BASEPRI, r3
}
 80045dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	2000000c 	.word	0x2000000c
 80045ec:	00000000 	.word	0x00000000

080045f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045f0:	f3ef 8009 	mrs	r0, PSP
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <pxCurrentTCBConst>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004600:	6010      	str	r0, [r2, #0]
 8004602:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004606:	f04f 0050 	mov.w	r0, #80	; 0x50
 800460a:	f380 8811 	msr	BASEPRI, r0
 800460e:	f7ff f847 	bl	80036a0 <vTaskSwitchContext>
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f380 8811 	msr	BASEPRI, r0
 800461a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	6808      	ldr	r0, [r1, #0]
 8004622:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004626:	f380 8809 	msr	PSP, r0
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	4770      	bx	lr

08004630 <pxCurrentTCBConst>:
 8004630:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
}
 8004650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004652:	f7fe ff67 	bl	8003524 <xTaskIncrementTick>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <xPortSysTickHandler+0x40>)
 800465e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	2300      	movs	r3, #0
 8004666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f383 8811 	msr	BASEPRI, r3
}
 800466e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	e000ed04 	.word	0xe000ed04

0800467c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <vPortSetupTimerInterrupt+0x30>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004686:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <vPortSetupTimerInterrupt+0x34>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <vPortSetupTimerInterrupt+0x38>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a09      	ldr	r2, [pc, #36]	; (80046b8 <vPortSetupTimerInterrupt+0x3c>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	4a08      	ldr	r2, [pc, #32]	; (80046bc <vPortSetupTimerInterrupt+0x40>)
 800469a:	3b01      	subs	r3, #1
 800469c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800469e:	4b03      	ldr	r3, [pc, #12]	; (80046ac <vPortSetupTimerInterrupt+0x30>)
 80046a0:	2207      	movs	r2, #7
 80046a2:	601a      	str	r2, [r3, #0]
}
 80046a4:	bf00      	nop
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	e000e010 	.word	0xe000e010
 80046b0:	e000e018 	.word	0xe000e018
 80046b4:	20000000 	.word	0x20000000
 80046b8:	10624dd3 	.word	0x10624dd3
 80046bc:	e000e014 	.word	0xe000e014

080046c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046c6:	f3ef 8305 	mrs	r3, IPSR
 80046ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b0f      	cmp	r3, #15
 80046d0:	d914      	bls.n	80046fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80046d2:	4a16      	ldr	r2, [pc, #88]	; (800472c <vPortValidateInterruptPriority+0x6c>)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80046dc:	4b14      	ldr	r3, [pc, #80]	; (8004730 <vPortValidateInterruptPriority+0x70>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	7afa      	ldrb	r2, [r7, #11]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d20a      	bcs.n	80046fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	607b      	str	r3, [r7, #4]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046fc:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <vPortValidateInterruptPriority+0x74>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <vPortValidateInterruptPriority+0x78>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d90a      	bls.n	8004722 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	603b      	str	r3, [r7, #0]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <vPortValidateInterruptPriority+0x60>
	}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr
 800472c:	e000e3f0 	.word	0xe000e3f0
 8004730:	20000e44 	.word	0x20000e44
 8004734:	e000ed0c 	.word	0xe000ed0c
 8004738:	20000e48 	.word	0x20000e48

0800473c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004748:	f7fe fe32 	bl	80033b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800474c:	4b58      	ldr	r3, [pc, #352]	; (80048b0 <pvPortMalloc+0x174>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004754:	f000 f910 	bl	8004978 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004758:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <pvPortMalloc+0x178>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	f040 808e 	bne.w	8004882 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01d      	beq.n	80047a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800476c:	2208      	movs	r2, #8
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	2b00      	cmp	r3, #0
 800477c:	d014      	beq.n	80047a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f023 0307 	bic.w	r3, r3, #7
 8004784:	3308      	adds	r3, #8
 8004786:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <pvPortMalloc+0x6c>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	617b      	str	r3, [r7, #20]
}
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d069      	beq.n	8004882 <pvPortMalloc+0x146>
 80047ae:	4b42      	ldr	r3, [pc, #264]	; (80048b8 <pvPortMalloc+0x17c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d864      	bhi.n	8004882 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047b8:	4b40      	ldr	r3, [pc, #256]	; (80048bc <pvPortMalloc+0x180>)
 80047ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047bc:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <pvPortMalloc+0x180>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047c2:	e004      	b.n	80047ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d903      	bls.n	80047e0 <pvPortMalloc+0xa4>
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f1      	bne.n	80047c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80047e0:	4b33      	ldr	r3, [pc, #204]	; (80048b0 <pvPortMalloc+0x174>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d04b      	beq.n	8004882 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2208      	movs	r2, #8
 80047f0:	4413      	add	r3, r2
 80047f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad2      	subs	r2, r2, r3
 8004804:	2308      	movs	r3, #8
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	429a      	cmp	r2, r3
 800480a:	d91f      	bls.n	800484c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800480c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4413      	add	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <pvPortMalloc+0xf8>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	613b      	str	r3, [r7, #16]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	1ad2      	subs	r2, r2, r3
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004846:	69b8      	ldr	r0, [r7, #24]
 8004848:	f000 f8f8 	bl	8004a3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800484c:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <pvPortMalloc+0x17c>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <pvPortMalloc+0x17c>)
 8004858:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <pvPortMalloc+0x17c>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <pvPortMalloc+0x184>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d203      	bcs.n	800486e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <pvPortMalloc+0x17c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <pvPortMalloc+0x184>)
 800486c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4b10      	ldr	r3, [pc, #64]	; (80048b4 <pvPortMalloc+0x178>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	431a      	orrs	r2, r3
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004882:	f7fe fda3 	bl	80033cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <pvPortMalloc+0x16a>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60fb      	str	r3, [r7, #12]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <pvPortMalloc+0x168>
	return pvReturn;
 80048a6:	69fb      	ldr	r3, [r7, #28]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3728      	adds	r7, #40	; 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20001a54 	.word	0x20001a54
 80048b4:	20001a60 	.word	0x20001a60
 80048b8:	20001a58 	.word	0x20001a58
 80048bc:	20001a4c 	.word	0x20001a4c
 80048c0:	20001a5c 	.word	0x20001a5c

080048c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d048      	beq.n	8004968 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80048d6:	2308      	movs	r3, #8
 80048d8:	425b      	negs	r3, r3
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b21      	ldr	r3, [pc, #132]	; (8004970 <vPortFree+0xac>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <vPortFree+0x44>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <vPortFree+0x62>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60bb      	str	r3, [r7, #8]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <vPortFree+0xac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d019      	beq.n	8004968 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d115      	bne.n	8004968 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <vPortFree+0xac>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	43db      	mvns	r3, r3
 8004946:	401a      	ands	r2, r3
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800494c:	f7fe fd30 	bl	80033b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <vPortFree+0xb0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4413      	add	r3, r2
 800495a:	4a06      	ldr	r2, [pc, #24]	; (8004974 <vPortFree+0xb0>)
 800495c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800495e:	6938      	ldr	r0, [r7, #16]
 8004960:	f000 f86c 	bl	8004a3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004964:	f7fe fd32 	bl	80033cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004968:	bf00      	nop
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	20001a60 	.word	0x20001a60
 8004974:	20001a58 	.word	0x20001a58

08004978 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800497e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004982:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004984:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <prvHeapInit+0xac>)
 8004986:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3307      	adds	r3, #7
 8004996:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0307 	bic.w	r3, r3, #7
 800499e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	4a1f      	ldr	r2, [pc, #124]	; (8004a24 <prvHeapInit+0xac>)
 80049a8:	4413      	add	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049b0:	4a1d      	ldr	r2, [pc, #116]	; (8004a28 <prvHeapInit+0xb0>)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80049b6:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <prvHeapInit+0xb0>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	4413      	add	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80049c4:	2208      	movs	r2, #8
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0307 	bic.w	r3, r3, #7
 80049d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <prvHeapInit+0xb4>)
 80049d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80049da:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <prvHeapInit+0xb4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80049e2:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <prvHeapInit+0xb4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	1ad2      	subs	r2, r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <prvHeapInit+0xb4>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <prvHeapInit+0xb8>)
 8004a06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	4a09      	ldr	r2, [pc, #36]	; (8004a34 <prvHeapInit+0xbc>)
 8004a0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <prvHeapInit+0xc0>)
 8004a12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a16:	601a      	str	r2, [r3, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	20000e4c 	.word	0x20000e4c
 8004a28:	20001a4c 	.word	0x20001a4c
 8004a2c:	20001a54 	.word	0x20001a54
 8004a30:	20001a5c 	.word	0x20001a5c
 8004a34:	20001a58 	.word	0x20001a58
 8004a38:	20001a60 	.word	0x20001a60

08004a3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a44:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <prvInsertBlockIntoFreeList+0xa8>)
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	e002      	b.n	8004a50 <prvInsertBlockIntoFreeList+0x14>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d8f7      	bhi.n	8004a4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	4413      	add	r3, r2
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d108      	bne.n	8004a7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	441a      	add	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	441a      	add	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d118      	bne.n	8004ac4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <prvInsertBlockIntoFreeList+0xac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d00d      	beq.n	8004aba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e008      	b.n	8004acc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <prvInsertBlockIntoFreeList+0xac>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e003      	b.n	8004acc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d002      	beq.n	8004ada <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr
 8004ae4:	20001a4c 	.word	0x20001a4c
 8004ae8:	20001a54 	.word	0x20001a54

08004aec <siprintf>:
 8004aec:	b40e      	push	{r1, r2, r3}
 8004aee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004af2:	b500      	push	{lr}
 8004af4:	b09c      	sub	sp, #112	; 0x70
 8004af6:	ab1d      	add	r3, sp, #116	; 0x74
 8004af8:	9002      	str	r0, [sp, #8]
 8004afa:	9006      	str	r0, [sp, #24]
 8004afc:	9107      	str	r1, [sp, #28]
 8004afe:	9104      	str	r1, [sp, #16]
 8004b00:	4808      	ldr	r0, [pc, #32]	; (8004b24 <siprintf+0x38>)
 8004b02:	4909      	ldr	r1, [pc, #36]	; (8004b28 <siprintf+0x3c>)
 8004b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b08:	9105      	str	r1, [sp, #20]
 8004b0a:	6800      	ldr	r0, [r0, #0]
 8004b0c:	a902      	add	r1, sp, #8
 8004b0e:	9301      	str	r3, [sp, #4]
 8004b10:	f000 f99c 	bl	8004e4c <_svfiprintf_r>
 8004b14:	2200      	movs	r2, #0
 8004b16:	9b02      	ldr	r3, [sp, #8]
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	b01c      	add	sp, #112	; 0x70
 8004b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b20:	b003      	add	sp, #12
 8004b22:	4770      	bx	lr
 8004b24:	2000005c 	.word	0x2000005c
 8004b28:	ffff0208 	.word	0xffff0208

08004b2c <memset>:
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4402      	add	r2, r0
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d100      	bne.n	8004b36 <memset+0xa>
 8004b34:	4770      	bx	lr
 8004b36:	f803 1b01 	strb.w	r1, [r3], #1
 8004b3a:	e7f9      	b.n	8004b30 <memset+0x4>

08004b3c <__errno>:
 8004b3c:	4b01      	ldr	r3, [pc, #4]	; (8004b44 <__errno+0x8>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	2000005c 	.word	0x2000005c

08004b48 <__libc_init_array>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	2600      	movs	r6, #0
 8004b4c:	4d0c      	ldr	r5, [pc, #48]	; (8004b80 <__libc_init_array+0x38>)
 8004b4e:	4c0d      	ldr	r4, [pc, #52]	; (8004b84 <__libc_init_array+0x3c>)
 8004b50:	1b64      	subs	r4, r4, r5
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	42a6      	cmp	r6, r4
 8004b56:	d109      	bne.n	8004b6c <__libc_init_array+0x24>
 8004b58:	f000 fc7a 	bl	8005450 <_init>
 8004b5c:	2600      	movs	r6, #0
 8004b5e:	4d0a      	ldr	r5, [pc, #40]	; (8004b88 <__libc_init_array+0x40>)
 8004b60:	4c0a      	ldr	r4, [pc, #40]	; (8004b8c <__libc_init_array+0x44>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	42a6      	cmp	r6, r4
 8004b68:	d105      	bne.n	8004b76 <__libc_init_array+0x2e>
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b70:	4798      	blx	r3
 8004b72:	3601      	adds	r6, #1
 8004b74:	e7ee      	b.n	8004b54 <__libc_init_array+0xc>
 8004b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b7a:	4798      	blx	r3
 8004b7c:	3601      	adds	r6, #1
 8004b7e:	e7f2      	b.n	8004b66 <__libc_init_array+0x1e>
 8004b80:	0800555c 	.word	0x0800555c
 8004b84:	0800555c 	.word	0x0800555c
 8004b88:	0800555c 	.word	0x0800555c
 8004b8c:	08005560 	.word	0x08005560

08004b90 <__retarget_lock_acquire_recursive>:
 8004b90:	4770      	bx	lr

08004b92 <__retarget_lock_release_recursive>:
 8004b92:	4770      	bx	lr

08004b94 <memcpy>:
 8004b94:	440a      	add	r2, r1
 8004b96:	4291      	cmp	r1, r2
 8004b98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004b9c:	d100      	bne.n	8004ba0 <memcpy+0xc>
 8004b9e:	4770      	bx	lr
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ba6:	4291      	cmp	r1, r2
 8004ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bac:	d1f9      	bne.n	8004ba2 <memcpy+0xe>
 8004bae:	bd10      	pop	{r4, pc}

08004bb0 <_free_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	2900      	cmp	r1, #0
 8004bb6:	d040      	beq.n	8004c3a <_free_r+0x8a>
 8004bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbc:	1f0c      	subs	r4, r1, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bfb8      	it	lt
 8004bc2:	18e4      	addlt	r4, r4, r3
 8004bc4:	f000 f8dc 	bl	8004d80 <__malloc_lock>
 8004bc8:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <_free_r+0x8c>)
 8004bca:	6813      	ldr	r3, [r2, #0]
 8004bcc:	b933      	cbnz	r3, 8004bdc <_free_r+0x2c>
 8004bce:	6063      	str	r3, [r4, #4]
 8004bd0:	6014      	str	r4, [r2, #0]
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bd8:	f000 b8d8 	b.w	8004d8c <__malloc_unlock>
 8004bdc:	42a3      	cmp	r3, r4
 8004bde:	d908      	bls.n	8004bf2 <_free_r+0x42>
 8004be0:	6820      	ldr	r0, [r4, #0]
 8004be2:	1821      	adds	r1, r4, r0
 8004be4:	428b      	cmp	r3, r1
 8004be6:	bf01      	itttt	eq
 8004be8:	6819      	ldreq	r1, [r3, #0]
 8004bea:	685b      	ldreq	r3, [r3, #4]
 8004bec:	1809      	addeq	r1, r1, r0
 8004bee:	6021      	streq	r1, [r4, #0]
 8004bf0:	e7ed      	b.n	8004bce <_free_r+0x1e>
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	b10b      	cbz	r3, 8004bfc <_free_r+0x4c>
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	d9fa      	bls.n	8004bf2 <_free_r+0x42>
 8004bfc:	6811      	ldr	r1, [r2, #0]
 8004bfe:	1850      	adds	r0, r2, r1
 8004c00:	42a0      	cmp	r0, r4
 8004c02:	d10b      	bne.n	8004c1c <_free_r+0x6c>
 8004c04:	6820      	ldr	r0, [r4, #0]
 8004c06:	4401      	add	r1, r0
 8004c08:	1850      	adds	r0, r2, r1
 8004c0a:	4283      	cmp	r3, r0
 8004c0c:	6011      	str	r1, [r2, #0]
 8004c0e:	d1e0      	bne.n	8004bd2 <_free_r+0x22>
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	4408      	add	r0, r1
 8004c16:	6010      	str	r0, [r2, #0]
 8004c18:	6053      	str	r3, [r2, #4]
 8004c1a:	e7da      	b.n	8004bd2 <_free_r+0x22>
 8004c1c:	d902      	bls.n	8004c24 <_free_r+0x74>
 8004c1e:	230c      	movs	r3, #12
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	e7d6      	b.n	8004bd2 <_free_r+0x22>
 8004c24:	6820      	ldr	r0, [r4, #0]
 8004c26:	1821      	adds	r1, r4, r0
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	bf01      	itttt	eq
 8004c2c:	6819      	ldreq	r1, [r3, #0]
 8004c2e:	685b      	ldreq	r3, [r3, #4]
 8004c30:	1809      	addeq	r1, r1, r0
 8004c32:	6021      	streq	r1, [r4, #0]
 8004c34:	6063      	str	r3, [r4, #4]
 8004c36:	6054      	str	r4, [r2, #4]
 8004c38:	e7cb      	b.n	8004bd2 <_free_r+0x22>
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	20001ba4 	.word	0x20001ba4

08004c40 <sbrk_aligned>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	4e0e      	ldr	r6, [pc, #56]	; (8004c7c <sbrk_aligned+0x3c>)
 8004c44:	460c      	mov	r4, r1
 8004c46:	6831      	ldr	r1, [r6, #0]
 8004c48:	4605      	mov	r5, r0
 8004c4a:	b911      	cbnz	r1, 8004c52 <sbrk_aligned+0x12>
 8004c4c:	f000 fbaa 	bl	80053a4 <_sbrk_r>
 8004c50:	6030      	str	r0, [r6, #0]
 8004c52:	4621      	mov	r1, r4
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 fba5 	bl	80053a4 <_sbrk_r>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d00a      	beq.n	8004c74 <sbrk_aligned+0x34>
 8004c5e:	1cc4      	adds	r4, r0, #3
 8004c60:	f024 0403 	bic.w	r4, r4, #3
 8004c64:	42a0      	cmp	r0, r4
 8004c66:	d007      	beq.n	8004c78 <sbrk_aligned+0x38>
 8004c68:	1a21      	subs	r1, r4, r0
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 fb9a 	bl	80053a4 <_sbrk_r>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d101      	bne.n	8004c78 <sbrk_aligned+0x38>
 8004c74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c78:	4620      	mov	r0, r4
 8004c7a:	bd70      	pop	{r4, r5, r6, pc}
 8004c7c:	20001ba8 	.word	0x20001ba8

08004c80 <_malloc_r>:
 8004c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c84:	1ccd      	adds	r5, r1, #3
 8004c86:	f025 0503 	bic.w	r5, r5, #3
 8004c8a:	3508      	adds	r5, #8
 8004c8c:	2d0c      	cmp	r5, #12
 8004c8e:	bf38      	it	cc
 8004c90:	250c      	movcc	r5, #12
 8004c92:	2d00      	cmp	r5, #0
 8004c94:	4607      	mov	r7, r0
 8004c96:	db01      	blt.n	8004c9c <_malloc_r+0x1c>
 8004c98:	42a9      	cmp	r1, r5
 8004c9a:	d905      	bls.n	8004ca8 <_malloc_r+0x28>
 8004c9c:	230c      	movs	r3, #12
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ca8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d7c <_malloc_r+0xfc>
 8004cac:	f000 f868 	bl	8004d80 <__malloc_lock>
 8004cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb4:	461c      	mov	r4, r3
 8004cb6:	bb5c      	cbnz	r4, 8004d10 <_malloc_r+0x90>
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f7ff ffc0 	bl	8004c40 <sbrk_aligned>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	d155      	bne.n	8004d72 <_malloc_r+0xf2>
 8004cc6:	f8d8 4000 	ldr.w	r4, [r8]
 8004cca:	4626      	mov	r6, r4
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	d145      	bne.n	8004d5c <_malloc_r+0xdc>
 8004cd0:	2c00      	cmp	r4, #0
 8004cd2:	d048      	beq.n	8004d66 <_malloc_r+0xe6>
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4638      	mov	r0, r7
 8004cda:	eb04 0903 	add.w	r9, r4, r3
 8004cde:	f000 fb61 	bl	80053a4 <_sbrk_r>
 8004ce2:	4581      	cmp	r9, r0
 8004ce4:	d13f      	bne.n	8004d66 <_malloc_r+0xe6>
 8004ce6:	6821      	ldr	r1, [r4, #0]
 8004ce8:	4638      	mov	r0, r7
 8004cea:	1a6d      	subs	r5, r5, r1
 8004cec:	4629      	mov	r1, r5
 8004cee:	f7ff ffa7 	bl	8004c40 <sbrk_aligned>
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	d037      	beq.n	8004d66 <_malloc_r+0xe6>
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	442b      	add	r3, r5
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d038      	beq.n	8004d76 <_malloc_r+0xf6>
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	42a2      	cmp	r2, r4
 8004d08:	d12b      	bne.n	8004d62 <_malloc_r+0xe2>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	e00f      	b.n	8004d30 <_malloc_r+0xb0>
 8004d10:	6822      	ldr	r2, [r4, #0]
 8004d12:	1b52      	subs	r2, r2, r5
 8004d14:	d41f      	bmi.n	8004d56 <_malloc_r+0xd6>
 8004d16:	2a0b      	cmp	r2, #11
 8004d18:	d917      	bls.n	8004d4a <_malloc_r+0xca>
 8004d1a:	1961      	adds	r1, r4, r5
 8004d1c:	42a3      	cmp	r3, r4
 8004d1e:	6025      	str	r5, [r4, #0]
 8004d20:	bf18      	it	ne
 8004d22:	6059      	strne	r1, [r3, #4]
 8004d24:	6863      	ldr	r3, [r4, #4]
 8004d26:	bf08      	it	eq
 8004d28:	f8c8 1000 	streq.w	r1, [r8]
 8004d2c:	5162      	str	r2, [r4, r5]
 8004d2e:	604b      	str	r3, [r1, #4]
 8004d30:	4638      	mov	r0, r7
 8004d32:	f104 060b 	add.w	r6, r4, #11
 8004d36:	f000 f829 	bl	8004d8c <__malloc_unlock>
 8004d3a:	f026 0607 	bic.w	r6, r6, #7
 8004d3e:	1d23      	adds	r3, r4, #4
 8004d40:	1af2      	subs	r2, r6, r3
 8004d42:	d0ae      	beq.n	8004ca2 <_malloc_r+0x22>
 8004d44:	1b9b      	subs	r3, r3, r6
 8004d46:	50a3      	str	r3, [r4, r2]
 8004d48:	e7ab      	b.n	8004ca2 <_malloc_r+0x22>
 8004d4a:	42a3      	cmp	r3, r4
 8004d4c:	6862      	ldr	r2, [r4, #4]
 8004d4e:	d1dd      	bne.n	8004d0c <_malloc_r+0x8c>
 8004d50:	f8c8 2000 	str.w	r2, [r8]
 8004d54:	e7ec      	b.n	8004d30 <_malloc_r+0xb0>
 8004d56:	4623      	mov	r3, r4
 8004d58:	6864      	ldr	r4, [r4, #4]
 8004d5a:	e7ac      	b.n	8004cb6 <_malloc_r+0x36>
 8004d5c:	4634      	mov	r4, r6
 8004d5e:	6876      	ldr	r6, [r6, #4]
 8004d60:	e7b4      	b.n	8004ccc <_malloc_r+0x4c>
 8004d62:	4613      	mov	r3, r2
 8004d64:	e7cc      	b.n	8004d00 <_malloc_r+0x80>
 8004d66:	230c      	movs	r3, #12
 8004d68:	4638      	mov	r0, r7
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	f000 f80e 	bl	8004d8c <__malloc_unlock>
 8004d70:	e797      	b.n	8004ca2 <_malloc_r+0x22>
 8004d72:	6025      	str	r5, [r4, #0]
 8004d74:	e7dc      	b.n	8004d30 <_malloc_r+0xb0>
 8004d76:	605b      	str	r3, [r3, #4]
 8004d78:	deff      	udf	#255	; 0xff
 8004d7a:	bf00      	nop
 8004d7c:	20001ba4 	.word	0x20001ba4

08004d80 <__malloc_lock>:
 8004d80:	4801      	ldr	r0, [pc, #4]	; (8004d88 <__malloc_lock+0x8>)
 8004d82:	f7ff bf05 	b.w	8004b90 <__retarget_lock_acquire_recursive>
 8004d86:	bf00      	nop
 8004d88:	20001ba0 	.word	0x20001ba0

08004d8c <__malloc_unlock>:
 8004d8c:	4801      	ldr	r0, [pc, #4]	; (8004d94 <__malloc_unlock+0x8>)
 8004d8e:	f7ff bf00 	b.w	8004b92 <__retarget_lock_release_recursive>
 8004d92:	bf00      	nop
 8004d94:	20001ba0 	.word	0x20001ba0

08004d98 <__ssputs_r>:
 8004d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d9c:	461f      	mov	r7, r3
 8004d9e:	688e      	ldr	r6, [r1, #8]
 8004da0:	4682      	mov	sl, r0
 8004da2:	42be      	cmp	r6, r7
 8004da4:	460c      	mov	r4, r1
 8004da6:	4690      	mov	r8, r2
 8004da8:	680b      	ldr	r3, [r1, #0]
 8004daa:	d82c      	bhi.n	8004e06 <__ssputs_r+0x6e>
 8004dac:	898a      	ldrh	r2, [r1, #12]
 8004dae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004db2:	d026      	beq.n	8004e02 <__ssputs_r+0x6a>
 8004db4:	6965      	ldr	r5, [r4, #20]
 8004db6:	6909      	ldr	r1, [r1, #16]
 8004db8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dbc:	eba3 0901 	sub.w	r9, r3, r1
 8004dc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dc4:	1c7b      	adds	r3, r7, #1
 8004dc6:	444b      	add	r3, r9
 8004dc8:	106d      	asrs	r5, r5, #1
 8004dca:	429d      	cmp	r5, r3
 8004dcc:	bf38      	it	cc
 8004dce:	461d      	movcc	r5, r3
 8004dd0:	0553      	lsls	r3, r2, #21
 8004dd2:	d527      	bpl.n	8004e24 <__ssputs_r+0x8c>
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f7ff ff53 	bl	8004c80 <_malloc_r>
 8004dda:	4606      	mov	r6, r0
 8004ddc:	b360      	cbz	r0, 8004e38 <__ssputs_r+0xa0>
 8004dde:	464a      	mov	r2, r9
 8004de0:	6921      	ldr	r1, [r4, #16]
 8004de2:	f7ff fed7 	bl	8004b94 <memcpy>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	6126      	str	r6, [r4, #16]
 8004df4:	444e      	add	r6, r9
 8004df6:	6026      	str	r6, [r4, #0]
 8004df8:	463e      	mov	r6, r7
 8004dfa:	6165      	str	r5, [r4, #20]
 8004dfc:	eba5 0509 	sub.w	r5, r5, r9
 8004e00:	60a5      	str	r5, [r4, #8]
 8004e02:	42be      	cmp	r6, r7
 8004e04:	d900      	bls.n	8004e08 <__ssputs_r+0x70>
 8004e06:	463e      	mov	r6, r7
 8004e08:	4632      	mov	r2, r6
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	f000 faaf 	bl	8005370 <memmove>
 8004e12:	2000      	movs	r0, #0
 8004e14:	68a3      	ldr	r3, [r4, #8]
 8004e16:	1b9b      	subs	r3, r3, r6
 8004e18:	60a3      	str	r3, [r4, #8]
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	4433      	add	r3, r6
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e24:	462a      	mov	r2, r5
 8004e26:	f000 fadb 	bl	80053e0 <_realloc_r>
 8004e2a:	4606      	mov	r6, r0
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d1e0      	bne.n	8004df2 <__ssputs_r+0x5a>
 8004e30:	4650      	mov	r0, sl
 8004e32:	6921      	ldr	r1, [r4, #16]
 8004e34:	f7ff febc 	bl	8004bb0 <_free_r>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	f8ca 3000 	str.w	r3, [sl]
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	e7e9      	b.n	8004e20 <__ssputs_r+0x88>

08004e4c <_svfiprintf_r>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	4698      	mov	r8, r3
 8004e52:	898b      	ldrh	r3, [r1, #12]
 8004e54:	4607      	mov	r7, r0
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	460d      	mov	r5, r1
 8004e5a:	4614      	mov	r4, r2
 8004e5c:	b09d      	sub	sp, #116	; 0x74
 8004e5e:	d50e      	bpl.n	8004e7e <_svfiprintf_r+0x32>
 8004e60:	690b      	ldr	r3, [r1, #16]
 8004e62:	b963      	cbnz	r3, 8004e7e <_svfiprintf_r+0x32>
 8004e64:	2140      	movs	r1, #64	; 0x40
 8004e66:	f7ff ff0b 	bl	8004c80 <_malloc_r>
 8004e6a:	6028      	str	r0, [r5, #0]
 8004e6c:	6128      	str	r0, [r5, #16]
 8004e6e:	b920      	cbnz	r0, 8004e7a <_svfiprintf_r+0x2e>
 8004e70:	230c      	movs	r3, #12
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e78:	e0d0      	b.n	800501c <_svfiprintf_r+0x1d0>
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	616b      	str	r3, [r5, #20]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9309      	str	r3, [sp, #36]	; 0x24
 8004e82:	2320      	movs	r3, #32
 8004e84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e88:	2330      	movs	r3, #48	; 0x30
 8004e8a:	f04f 0901 	mov.w	r9, #1
 8004e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e92:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005034 <_svfiprintf_r+0x1e8>
 8004e96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	469a      	mov	sl, r3
 8004e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea2:	b10a      	cbz	r2, 8004ea8 <_svfiprintf_r+0x5c>
 8004ea4:	2a25      	cmp	r2, #37	; 0x25
 8004ea6:	d1f9      	bne.n	8004e9c <_svfiprintf_r+0x50>
 8004ea8:	ebba 0b04 	subs.w	fp, sl, r4
 8004eac:	d00b      	beq.n	8004ec6 <_svfiprintf_r+0x7a>
 8004eae:	465b      	mov	r3, fp
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f7ff ff6f 	bl	8004d98 <__ssputs_r>
 8004eba:	3001      	adds	r0, #1
 8004ebc:	f000 80a9 	beq.w	8005012 <_svfiprintf_r+0x1c6>
 8004ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ec2:	445a      	add	r2, fp
 8004ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 80a1 	beq.w	8005012 <_svfiprintf_r+0x1c6>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eda:	f10a 0a01 	add.w	sl, sl, #1
 8004ede:	9304      	str	r3, [sp, #16]
 8004ee0:	9307      	str	r3, [sp, #28]
 8004ee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ee6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ee8:	4654      	mov	r4, sl
 8004eea:	2205      	movs	r2, #5
 8004eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef0:	4850      	ldr	r0, [pc, #320]	; (8005034 <_svfiprintf_r+0x1e8>)
 8004ef2:	f000 fa67 	bl	80053c4 <memchr>
 8004ef6:	9a04      	ldr	r2, [sp, #16]
 8004ef8:	b9d8      	cbnz	r0, 8004f32 <_svfiprintf_r+0xe6>
 8004efa:	06d0      	lsls	r0, r2, #27
 8004efc:	bf44      	itt	mi
 8004efe:	2320      	movmi	r3, #32
 8004f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f04:	0711      	lsls	r1, r2, #28
 8004f06:	bf44      	itt	mi
 8004f08:	232b      	movmi	r3, #43	; 0x2b
 8004f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f12:	2b2a      	cmp	r3, #42	; 0x2a
 8004f14:	d015      	beq.n	8004f42 <_svfiprintf_r+0xf6>
 8004f16:	4654      	mov	r4, sl
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f04f 0c0a 	mov.w	ip, #10
 8004f1e:	9a07      	ldr	r2, [sp, #28]
 8004f20:	4621      	mov	r1, r4
 8004f22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f26:	3b30      	subs	r3, #48	; 0x30
 8004f28:	2b09      	cmp	r3, #9
 8004f2a:	d94d      	bls.n	8004fc8 <_svfiprintf_r+0x17c>
 8004f2c:	b1b0      	cbz	r0, 8004f5c <_svfiprintf_r+0x110>
 8004f2e:	9207      	str	r2, [sp, #28]
 8004f30:	e014      	b.n	8004f5c <_svfiprintf_r+0x110>
 8004f32:	eba0 0308 	sub.w	r3, r0, r8
 8004f36:	fa09 f303 	lsl.w	r3, r9, r3
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	46a2      	mov	sl, r4
 8004f3e:	9304      	str	r3, [sp, #16]
 8004f40:	e7d2      	b.n	8004ee8 <_svfiprintf_r+0x9c>
 8004f42:	9b03      	ldr	r3, [sp, #12]
 8004f44:	1d19      	adds	r1, r3, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	9103      	str	r1, [sp, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bfbb      	ittet	lt
 8004f4e:	425b      	neglt	r3, r3
 8004f50:	f042 0202 	orrlt.w	r2, r2, #2
 8004f54:	9307      	strge	r3, [sp, #28]
 8004f56:	9307      	strlt	r3, [sp, #28]
 8004f58:	bfb8      	it	lt
 8004f5a:	9204      	strlt	r2, [sp, #16]
 8004f5c:	7823      	ldrb	r3, [r4, #0]
 8004f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f60:	d10c      	bne.n	8004f7c <_svfiprintf_r+0x130>
 8004f62:	7863      	ldrb	r3, [r4, #1]
 8004f64:	2b2a      	cmp	r3, #42	; 0x2a
 8004f66:	d134      	bne.n	8004fd2 <_svfiprintf_r+0x186>
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	3402      	adds	r4, #2
 8004f6c:	1d1a      	adds	r2, r3, #4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	9203      	str	r2, [sp, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bfb8      	it	lt
 8004f76:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f7a:	9305      	str	r3, [sp, #20]
 8004f7c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005038 <_svfiprintf_r+0x1ec>
 8004f80:	2203      	movs	r2, #3
 8004f82:	4650      	mov	r0, sl
 8004f84:	7821      	ldrb	r1, [r4, #0]
 8004f86:	f000 fa1d 	bl	80053c4 <memchr>
 8004f8a:	b138      	cbz	r0, 8004f9c <_svfiprintf_r+0x150>
 8004f8c:	2240      	movs	r2, #64	; 0x40
 8004f8e:	9b04      	ldr	r3, [sp, #16]
 8004f90:	eba0 000a 	sub.w	r0, r0, sl
 8004f94:	4082      	lsls	r2, r0
 8004f96:	4313      	orrs	r3, r2
 8004f98:	3401      	adds	r4, #1
 8004f9a:	9304      	str	r3, [sp, #16]
 8004f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa0:	2206      	movs	r2, #6
 8004fa2:	4826      	ldr	r0, [pc, #152]	; (800503c <_svfiprintf_r+0x1f0>)
 8004fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fa8:	f000 fa0c 	bl	80053c4 <memchr>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d038      	beq.n	8005022 <_svfiprintf_r+0x1d6>
 8004fb0:	4b23      	ldr	r3, [pc, #140]	; (8005040 <_svfiprintf_r+0x1f4>)
 8004fb2:	bb1b      	cbnz	r3, 8004ffc <_svfiprintf_r+0x1b0>
 8004fb4:	9b03      	ldr	r3, [sp, #12]
 8004fb6:	3307      	adds	r3, #7
 8004fb8:	f023 0307 	bic.w	r3, r3, #7
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	9303      	str	r3, [sp, #12]
 8004fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc2:	4433      	add	r3, r6
 8004fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc6:	e768      	b.n	8004e9a <_svfiprintf_r+0x4e>
 8004fc8:	460c      	mov	r4, r1
 8004fca:	2001      	movs	r0, #1
 8004fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fd0:	e7a6      	b.n	8004f20 <_svfiprintf_r+0xd4>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f04f 0c0a 	mov.w	ip, #10
 8004fd8:	4619      	mov	r1, r3
 8004fda:	3401      	adds	r4, #1
 8004fdc:	9305      	str	r3, [sp, #20]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fe4:	3a30      	subs	r2, #48	; 0x30
 8004fe6:	2a09      	cmp	r2, #9
 8004fe8:	d903      	bls.n	8004ff2 <_svfiprintf_r+0x1a6>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0c6      	beq.n	8004f7c <_svfiprintf_r+0x130>
 8004fee:	9105      	str	r1, [sp, #20]
 8004ff0:	e7c4      	b.n	8004f7c <_svfiprintf_r+0x130>
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ffa:	e7f0      	b.n	8004fde <_svfiprintf_r+0x192>
 8004ffc:	ab03      	add	r3, sp, #12
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	462a      	mov	r2, r5
 8005002:	4638      	mov	r0, r7
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <_svfiprintf_r+0x1f8>)
 8005006:	a904      	add	r1, sp, #16
 8005008:	f3af 8000 	nop.w
 800500c:	1c42      	adds	r2, r0, #1
 800500e:	4606      	mov	r6, r0
 8005010:	d1d6      	bne.n	8004fc0 <_svfiprintf_r+0x174>
 8005012:	89ab      	ldrh	r3, [r5, #12]
 8005014:	065b      	lsls	r3, r3, #25
 8005016:	f53f af2d 	bmi.w	8004e74 <_svfiprintf_r+0x28>
 800501a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800501c:	b01d      	add	sp, #116	; 0x74
 800501e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005022:	ab03      	add	r3, sp, #12
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	462a      	mov	r2, r5
 8005028:	4638      	mov	r0, r7
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <_svfiprintf_r+0x1f8>)
 800502c:	a904      	add	r1, sp, #16
 800502e:	f000 f87d 	bl	800512c <_printf_i>
 8005032:	e7eb      	b.n	800500c <_svfiprintf_r+0x1c0>
 8005034:	08005526 	.word	0x08005526
 8005038:	0800552c 	.word	0x0800552c
 800503c:	08005530 	.word	0x08005530
 8005040:	00000000 	.word	0x00000000
 8005044:	08004d99 	.word	0x08004d99

08005048 <_printf_common>:
 8005048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	4616      	mov	r6, r2
 800504e:	4699      	mov	r9, r3
 8005050:	688a      	ldr	r2, [r1, #8]
 8005052:	690b      	ldr	r3, [r1, #16]
 8005054:	4607      	mov	r7, r0
 8005056:	4293      	cmp	r3, r2
 8005058:	bfb8      	it	lt
 800505a:	4613      	movlt	r3, r2
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005062:	460c      	mov	r4, r1
 8005064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005068:	b10a      	cbz	r2, 800506e <_printf_common+0x26>
 800506a:	3301      	adds	r3, #1
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	0699      	lsls	r1, r3, #26
 8005072:	bf42      	ittt	mi
 8005074:	6833      	ldrmi	r3, [r6, #0]
 8005076:	3302      	addmi	r3, #2
 8005078:	6033      	strmi	r3, [r6, #0]
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	f015 0506 	ands.w	r5, r5, #6
 8005080:	d106      	bne.n	8005090 <_printf_common+0x48>
 8005082:	f104 0a19 	add.w	sl, r4, #25
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	6832      	ldr	r2, [r6, #0]
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	42ab      	cmp	r3, r5
 800508e:	dc2b      	bgt.n	80050e8 <_printf_common+0xa0>
 8005090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005094:	1e13      	subs	r3, r2, #0
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	bf18      	it	ne
 800509a:	2301      	movne	r3, #1
 800509c:	0692      	lsls	r2, r2, #26
 800509e:	d430      	bmi.n	8005102 <_printf_common+0xba>
 80050a0:	4649      	mov	r1, r9
 80050a2:	4638      	mov	r0, r7
 80050a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050a8:	47c0      	blx	r8
 80050aa:	3001      	adds	r0, #1
 80050ac:	d023      	beq.n	80050f6 <_printf_common+0xae>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	6922      	ldr	r2, [r4, #16]
 80050b2:	f003 0306 	and.w	r3, r3, #6
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	bf14      	ite	ne
 80050ba:	2500      	movne	r5, #0
 80050bc:	6833      	ldreq	r3, [r6, #0]
 80050be:	f04f 0600 	mov.w	r6, #0
 80050c2:	bf08      	it	eq
 80050c4:	68e5      	ldreq	r5, [r4, #12]
 80050c6:	f104 041a 	add.w	r4, r4, #26
 80050ca:	bf08      	it	eq
 80050cc:	1aed      	subeq	r5, r5, r3
 80050ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050d2:	bf08      	it	eq
 80050d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d8:	4293      	cmp	r3, r2
 80050da:	bfc4      	itt	gt
 80050dc:	1a9b      	subgt	r3, r3, r2
 80050de:	18ed      	addgt	r5, r5, r3
 80050e0:	42b5      	cmp	r5, r6
 80050e2:	d11a      	bne.n	800511a <_printf_common+0xd2>
 80050e4:	2000      	movs	r0, #0
 80050e6:	e008      	b.n	80050fa <_printf_common+0xb2>
 80050e8:	2301      	movs	r3, #1
 80050ea:	4652      	mov	r2, sl
 80050ec:	4649      	mov	r1, r9
 80050ee:	4638      	mov	r0, r7
 80050f0:	47c0      	blx	r8
 80050f2:	3001      	adds	r0, #1
 80050f4:	d103      	bne.n	80050fe <_printf_common+0xb6>
 80050f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fe:	3501      	adds	r5, #1
 8005100:	e7c1      	b.n	8005086 <_printf_common+0x3e>
 8005102:	2030      	movs	r0, #48	; 0x30
 8005104:	18e1      	adds	r1, r4, r3
 8005106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005110:	4422      	add	r2, r4
 8005112:	3302      	adds	r3, #2
 8005114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005118:	e7c2      	b.n	80050a0 <_printf_common+0x58>
 800511a:	2301      	movs	r3, #1
 800511c:	4622      	mov	r2, r4
 800511e:	4649      	mov	r1, r9
 8005120:	4638      	mov	r0, r7
 8005122:	47c0      	blx	r8
 8005124:	3001      	adds	r0, #1
 8005126:	d0e6      	beq.n	80050f6 <_printf_common+0xae>
 8005128:	3601      	adds	r6, #1
 800512a:	e7d9      	b.n	80050e0 <_printf_common+0x98>

0800512c <_printf_i>:
 800512c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	7e0f      	ldrb	r7, [r1, #24]
 8005132:	4691      	mov	r9, r2
 8005134:	2f78      	cmp	r7, #120	; 0x78
 8005136:	4680      	mov	r8, r0
 8005138:	460c      	mov	r4, r1
 800513a:	469a      	mov	sl, r3
 800513c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800513e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005142:	d807      	bhi.n	8005154 <_printf_i+0x28>
 8005144:	2f62      	cmp	r7, #98	; 0x62
 8005146:	d80a      	bhi.n	800515e <_printf_i+0x32>
 8005148:	2f00      	cmp	r7, #0
 800514a:	f000 80d5 	beq.w	80052f8 <_printf_i+0x1cc>
 800514e:	2f58      	cmp	r7, #88	; 0x58
 8005150:	f000 80c1 	beq.w	80052d6 <_printf_i+0x1aa>
 8005154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800515c:	e03a      	b.n	80051d4 <_printf_i+0xa8>
 800515e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005162:	2b15      	cmp	r3, #21
 8005164:	d8f6      	bhi.n	8005154 <_printf_i+0x28>
 8005166:	a101      	add	r1, pc, #4	; (adr r1, 800516c <_printf_i+0x40>)
 8005168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800516c:	080051c5 	.word	0x080051c5
 8005170:	080051d9 	.word	0x080051d9
 8005174:	08005155 	.word	0x08005155
 8005178:	08005155 	.word	0x08005155
 800517c:	08005155 	.word	0x08005155
 8005180:	08005155 	.word	0x08005155
 8005184:	080051d9 	.word	0x080051d9
 8005188:	08005155 	.word	0x08005155
 800518c:	08005155 	.word	0x08005155
 8005190:	08005155 	.word	0x08005155
 8005194:	08005155 	.word	0x08005155
 8005198:	080052df 	.word	0x080052df
 800519c:	08005205 	.word	0x08005205
 80051a0:	08005299 	.word	0x08005299
 80051a4:	08005155 	.word	0x08005155
 80051a8:	08005155 	.word	0x08005155
 80051ac:	08005301 	.word	0x08005301
 80051b0:	08005155 	.word	0x08005155
 80051b4:	08005205 	.word	0x08005205
 80051b8:	08005155 	.word	0x08005155
 80051bc:	08005155 	.word	0x08005155
 80051c0:	080052a1 	.word	0x080052a1
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	1d1a      	adds	r2, r3, #4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	602a      	str	r2, [r5, #0]
 80051cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0a0      	b.n	800531a <_printf_i+0x1ee>
 80051d8:	6820      	ldr	r0, [r4, #0]
 80051da:	682b      	ldr	r3, [r5, #0]
 80051dc:	0607      	lsls	r7, r0, #24
 80051de:	f103 0104 	add.w	r1, r3, #4
 80051e2:	6029      	str	r1, [r5, #0]
 80051e4:	d501      	bpl.n	80051ea <_printf_i+0xbe>
 80051e6:	681e      	ldr	r6, [r3, #0]
 80051e8:	e003      	b.n	80051f2 <_printf_i+0xc6>
 80051ea:	0646      	lsls	r6, r0, #25
 80051ec:	d5fb      	bpl.n	80051e6 <_printf_i+0xba>
 80051ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051f2:	2e00      	cmp	r6, #0
 80051f4:	da03      	bge.n	80051fe <_printf_i+0xd2>
 80051f6:	232d      	movs	r3, #45	; 0x2d
 80051f8:	4276      	negs	r6, r6
 80051fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051fe:	230a      	movs	r3, #10
 8005200:	4859      	ldr	r0, [pc, #356]	; (8005368 <_printf_i+0x23c>)
 8005202:	e012      	b.n	800522a <_printf_i+0xfe>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	6820      	ldr	r0, [r4, #0]
 8005208:	1d19      	adds	r1, r3, #4
 800520a:	6029      	str	r1, [r5, #0]
 800520c:	0605      	lsls	r5, r0, #24
 800520e:	d501      	bpl.n	8005214 <_printf_i+0xe8>
 8005210:	681e      	ldr	r6, [r3, #0]
 8005212:	e002      	b.n	800521a <_printf_i+0xee>
 8005214:	0641      	lsls	r1, r0, #25
 8005216:	d5fb      	bpl.n	8005210 <_printf_i+0xe4>
 8005218:	881e      	ldrh	r6, [r3, #0]
 800521a:	2f6f      	cmp	r7, #111	; 0x6f
 800521c:	bf0c      	ite	eq
 800521e:	2308      	moveq	r3, #8
 8005220:	230a      	movne	r3, #10
 8005222:	4851      	ldr	r0, [pc, #324]	; (8005368 <_printf_i+0x23c>)
 8005224:	2100      	movs	r1, #0
 8005226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800522a:	6865      	ldr	r5, [r4, #4]
 800522c:	2d00      	cmp	r5, #0
 800522e:	bfa8      	it	ge
 8005230:	6821      	ldrge	r1, [r4, #0]
 8005232:	60a5      	str	r5, [r4, #8]
 8005234:	bfa4      	itt	ge
 8005236:	f021 0104 	bicge.w	r1, r1, #4
 800523a:	6021      	strge	r1, [r4, #0]
 800523c:	b90e      	cbnz	r6, 8005242 <_printf_i+0x116>
 800523e:	2d00      	cmp	r5, #0
 8005240:	d04b      	beq.n	80052da <_printf_i+0x1ae>
 8005242:	4615      	mov	r5, r2
 8005244:	fbb6 f1f3 	udiv	r1, r6, r3
 8005248:	fb03 6711 	mls	r7, r3, r1, r6
 800524c:	5dc7      	ldrb	r7, [r0, r7]
 800524e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005252:	4637      	mov	r7, r6
 8005254:	42bb      	cmp	r3, r7
 8005256:	460e      	mov	r6, r1
 8005258:	d9f4      	bls.n	8005244 <_printf_i+0x118>
 800525a:	2b08      	cmp	r3, #8
 800525c:	d10b      	bne.n	8005276 <_printf_i+0x14a>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	07de      	lsls	r6, r3, #31
 8005262:	d508      	bpl.n	8005276 <_printf_i+0x14a>
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	6861      	ldr	r1, [r4, #4]
 8005268:	4299      	cmp	r1, r3
 800526a:	bfde      	ittt	le
 800526c:	2330      	movle	r3, #48	; 0x30
 800526e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005272:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005276:	1b52      	subs	r2, r2, r5
 8005278:	6122      	str	r2, [r4, #16]
 800527a:	464b      	mov	r3, r9
 800527c:	4621      	mov	r1, r4
 800527e:	4640      	mov	r0, r8
 8005280:	f8cd a000 	str.w	sl, [sp]
 8005284:	aa03      	add	r2, sp, #12
 8005286:	f7ff fedf 	bl	8005048 <_printf_common>
 800528a:	3001      	adds	r0, #1
 800528c:	d14a      	bne.n	8005324 <_printf_i+0x1f8>
 800528e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005292:	b004      	add	sp, #16
 8005294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	f043 0320 	orr.w	r3, r3, #32
 800529e:	6023      	str	r3, [r4, #0]
 80052a0:	2778      	movs	r7, #120	; 0x78
 80052a2:	4832      	ldr	r0, [pc, #200]	; (800536c <_printf_i+0x240>)
 80052a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	6829      	ldr	r1, [r5, #0]
 80052ac:	061f      	lsls	r7, r3, #24
 80052ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80052b2:	d402      	bmi.n	80052ba <_printf_i+0x18e>
 80052b4:	065f      	lsls	r7, r3, #25
 80052b6:	bf48      	it	mi
 80052b8:	b2b6      	uxthmi	r6, r6
 80052ba:	07df      	lsls	r7, r3, #31
 80052bc:	bf48      	it	mi
 80052be:	f043 0320 	orrmi.w	r3, r3, #32
 80052c2:	6029      	str	r1, [r5, #0]
 80052c4:	bf48      	it	mi
 80052c6:	6023      	strmi	r3, [r4, #0]
 80052c8:	b91e      	cbnz	r6, 80052d2 <_printf_i+0x1a6>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	f023 0320 	bic.w	r3, r3, #32
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	2310      	movs	r3, #16
 80052d4:	e7a6      	b.n	8005224 <_printf_i+0xf8>
 80052d6:	4824      	ldr	r0, [pc, #144]	; (8005368 <_printf_i+0x23c>)
 80052d8:	e7e4      	b.n	80052a4 <_printf_i+0x178>
 80052da:	4615      	mov	r5, r2
 80052dc:	e7bd      	b.n	800525a <_printf_i+0x12e>
 80052de:	682b      	ldr	r3, [r5, #0]
 80052e0:	6826      	ldr	r6, [r4, #0]
 80052e2:	1d18      	adds	r0, r3, #4
 80052e4:	6961      	ldr	r1, [r4, #20]
 80052e6:	6028      	str	r0, [r5, #0]
 80052e8:	0635      	lsls	r5, r6, #24
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	d501      	bpl.n	80052f2 <_printf_i+0x1c6>
 80052ee:	6019      	str	r1, [r3, #0]
 80052f0:	e002      	b.n	80052f8 <_printf_i+0x1cc>
 80052f2:	0670      	lsls	r0, r6, #25
 80052f4:	d5fb      	bpl.n	80052ee <_printf_i+0x1c2>
 80052f6:	8019      	strh	r1, [r3, #0]
 80052f8:	2300      	movs	r3, #0
 80052fa:	4615      	mov	r5, r2
 80052fc:	6123      	str	r3, [r4, #16]
 80052fe:	e7bc      	b.n	800527a <_printf_i+0x14e>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	2100      	movs	r1, #0
 8005304:	1d1a      	adds	r2, r3, #4
 8005306:	602a      	str	r2, [r5, #0]
 8005308:	681d      	ldr	r5, [r3, #0]
 800530a:	6862      	ldr	r2, [r4, #4]
 800530c:	4628      	mov	r0, r5
 800530e:	f000 f859 	bl	80053c4 <memchr>
 8005312:	b108      	cbz	r0, 8005318 <_printf_i+0x1ec>
 8005314:	1b40      	subs	r0, r0, r5
 8005316:	6060      	str	r0, [r4, #4]
 8005318:	6863      	ldr	r3, [r4, #4]
 800531a:	6123      	str	r3, [r4, #16]
 800531c:	2300      	movs	r3, #0
 800531e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005322:	e7aa      	b.n	800527a <_printf_i+0x14e>
 8005324:	462a      	mov	r2, r5
 8005326:	4649      	mov	r1, r9
 8005328:	4640      	mov	r0, r8
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	47d0      	blx	sl
 800532e:	3001      	adds	r0, #1
 8005330:	d0ad      	beq.n	800528e <_printf_i+0x162>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	079b      	lsls	r3, r3, #30
 8005336:	d413      	bmi.n	8005360 <_printf_i+0x234>
 8005338:	68e0      	ldr	r0, [r4, #12]
 800533a:	9b03      	ldr	r3, [sp, #12]
 800533c:	4298      	cmp	r0, r3
 800533e:	bfb8      	it	lt
 8005340:	4618      	movlt	r0, r3
 8005342:	e7a6      	b.n	8005292 <_printf_i+0x166>
 8005344:	2301      	movs	r3, #1
 8005346:	4632      	mov	r2, r6
 8005348:	4649      	mov	r1, r9
 800534a:	4640      	mov	r0, r8
 800534c:	47d0      	blx	sl
 800534e:	3001      	adds	r0, #1
 8005350:	d09d      	beq.n	800528e <_printf_i+0x162>
 8005352:	3501      	adds	r5, #1
 8005354:	68e3      	ldr	r3, [r4, #12]
 8005356:	9903      	ldr	r1, [sp, #12]
 8005358:	1a5b      	subs	r3, r3, r1
 800535a:	42ab      	cmp	r3, r5
 800535c:	dcf2      	bgt.n	8005344 <_printf_i+0x218>
 800535e:	e7eb      	b.n	8005338 <_printf_i+0x20c>
 8005360:	2500      	movs	r5, #0
 8005362:	f104 0619 	add.w	r6, r4, #25
 8005366:	e7f5      	b.n	8005354 <_printf_i+0x228>
 8005368:	08005537 	.word	0x08005537
 800536c:	08005548 	.word	0x08005548

08005370 <memmove>:
 8005370:	4288      	cmp	r0, r1
 8005372:	b510      	push	{r4, lr}
 8005374:	eb01 0402 	add.w	r4, r1, r2
 8005378:	d902      	bls.n	8005380 <memmove+0x10>
 800537a:	4284      	cmp	r4, r0
 800537c:	4623      	mov	r3, r4
 800537e:	d807      	bhi.n	8005390 <memmove+0x20>
 8005380:	1e43      	subs	r3, r0, #1
 8005382:	42a1      	cmp	r1, r4
 8005384:	d008      	beq.n	8005398 <memmove+0x28>
 8005386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800538a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800538e:	e7f8      	b.n	8005382 <memmove+0x12>
 8005390:	4601      	mov	r1, r0
 8005392:	4402      	add	r2, r0
 8005394:	428a      	cmp	r2, r1
 8005396:	d100      	bne.n	800539a <memmove+0x2a>
 8005398:	bd10      	pop	{r4, pc}
 800539a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800539e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053a2:	e7f7      	b.n	8005394 <memmove+0x24>

080053a4 <_sbrk_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	2300      	movs	r3, #0
 80053a8:	4d05      	ldr	r5, [pc, #20]	; (80053c0 <_sbrk_r+0x1c>)
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
 80053ae:	602b      	str	r3, [r5, #0]
 80053b0:	f7fb f96a 	bl	8000688 <_sbrk>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_sbrk_r+0x1a>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_sbrk_r+0x1a>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	20001b9c 	.word	0x20001b9c

080053c4 <memchr>:
 80053c4:	4603      	mov	r3, r0
 80053c6:	b510      	push	{r4, lr}
 80053c8:	b2c9      	uxtb	r1, r1
 80053ca:	4402      	add	r2, r0
 80053cc:	4293      	cmp	r3, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	d101      	bne.n	80053d6 <memchr+0x12>
 80053d2:	2000      	movs	r0, #0
 80053d4:	e003      	b.n	80053de <memchr+0x1a>
 80053d6:	7804      	ldrb	r4, [r0, #0]
 80053d8:	3301      	adds	r3, #1
 80053da:	428c      	cmp	r4, r1
 80053dc:	d1f6      	bne.n	80053cc <memchr+0x8>
 80053de:	bd10      	pop	{r4, pc}

080053e0 <_realloc_r>:
 80053e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053e4:	4680      	mov	r8, r0
 80053e6:	4614      	mov	r4, r2
 80053e8:	460e      	mov	r6, r1
 80053ea:	b921      	cbnz	r1, 80053f6 <_realloc_r+0x16>
 80053ec:	4611      	mov	r1, r2
 80053ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053f2:	f7ff bc45 	b.w	8004c80 <_malloc_r>
 80053f6:	b92a      	cbnz	r2, 8005404 <_realloc_r+0x24>
 80053f8:	f7ff fbda 	bl	8004bb0 <_free_r>
 80053fc:	4625      	mov	r5, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005404:	f000 f81b 	bl	800543e <_malloc_usable_size_r>
 8005408:	4284      	cmp	r4, r0
 800540a:	4607      	mov	r7, r0
 800540c:	d802      	bhi.n	8005414 <_realloc_r+0x34>
 800540e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005412:	d812      	bhi.n	800543a <_realloc_r+0x5a>
 8005414:	4621      	mov	r1, r4
 8005416:	4640      	mov	r0, r8
 8005418:	f7ff fc32 	bl	8004c80 <_malloc_r>
 800541c:	4605      	mov	r5, r0
 800541e:	2800      	cmp	r0, #0
 8005420:	d0ed      	beq.n	80053fe <_realloc_r+0x1e>
 8005422:	42bc      	cmp	r4, r7
 8005424:	4622      	mov	r2, r4
 8005426:	4631      	mov	r1, r6
 8005428:	bf28      	it	cs
 800542a:	463a      	movcs	r2, r7
 800542c:	f7ff fbb2 	bl	8004b94 <memcpy>
 8005430:	4631      	mov	r1, r6
 8005432:	4640      	mov	r0, r8
 8005434:	f7ff fbbc 	bl	8004bb0 <_free_r>
 8005438:	e7e1      	b.n	80053fe <_realloc_r+0x1e>
 800543a:	4635      	mov	r5, r6
 800543c:	e7df      	b.n	80053fe <_realloc_r+0x1e>

0800543e <_malloc_usable_size_r>:
 800543e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005442:	1f18      	subs	r0, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	bfbc      	itt	lt
 8005448:	580b      	ldrlt	r3, [r1, r0]
 800544a:	18c0      	addlt	r0, r0, r3
 800544c:	4770      	bx	lr
	...

08005450 <_init>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	bf00      	nop
 8005454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005456:	bc08      	pop	{r3}
 8005458:	469e      	mov	lr, r3
 800545a:	4770      	bx	lr

0800545c <_fini>:
 800545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800545e:	bf00      	nop
 8005460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005462:	bc08      	pop	{r3}
 8005464:	469e      	mov	lr, r3
 8005466:	4770      	bx	lr
