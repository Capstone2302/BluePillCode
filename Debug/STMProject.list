
STMProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003ac4  08003ac4  00013ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b2c  08003b2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b2c  08003b2c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b2c  08003b2c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000005c  08003b90  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08003b90  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdcd  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c61  00000000  00000000  0002be95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000097e  00000000  00000000  0002e710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016f45  00000000  00000000  0002f08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ceba  00000000  00000000  00045fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000887a1  00000000  00000000  00052e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037c8  00000000  00000000  000db630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000dedf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003aac 	.word	0x08003aac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003aac 	.word	0x08003aac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbf7 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f88b 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9c5 	bl	80004e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f9a5 	bl	80004ac <MX_DMA_Init>
  MX_TIM3_Init();
 8000162:	f000 f91f 	bl	80003a4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000166:	f000 f977 	bl	8000458 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800016a:	f000 f8c7 	bl	80002fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2*/
  uint8_t message[10] = {'\0'};
 800016e:	2300      	movs	r3, #0
 8000170:	60bb      	str	r3, [r7, #8]
 8000172:	f107 030c 	add.w	r3, r7, #12
 8000176:	2200      	movs	r2, #0
 8000178:	601a      	str	r2, [r3, #0]
 800017a:	809a      	strh	r2, [r3, #4]
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800017c:	213c      	movs	r1, #60	; 0x3c
 800017e:	4835      	ldr	r0, [pc, #212]	; (8000254 <main+0x108>)
 8000180:	f001 fea2 	bl	8001ec8 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000184:	2100      	movs	r1, #0
 8000186:	4834      	ldr	r0, [pc, #208]	; (8000258 <main+0x10c>)
 8000188:	f001 fd5a 	bl	8001c40 <HAL_TIM_PWM_Start>
  uint8_t RxData[7];
  int32_t dutyCycle = 100;
 800018c:	2364      	movs	r3, #100	; 0x64
 800018e:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(message, "%d\r\n", ((TIM2->CNT)>>2));
 8000190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000196:	089a      	lsrs	r2, r3, #2
 8000198:	f107 0308 	add.w	r3, r7, #8
 800019c:	492f      	ldr	r1, [pc, #188]	; (800025c <main+0x110>)
 800019e:	4618      	mov	r0, r3
 80001a0:	f002 ffd2 	bl	8003148 <siprintf>
	  HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 80001a4:	f107 0108 	add.w	r1, r7, #8
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	220a      	movs	r2, #10
 80001ac:	482c      	ldr	r0, [pc, #176]	; (8000260 <main+0x114>)
 80001ae:	f002 fbdf 	bl	8002970 <HAL_UART_Transmit>
	  HAL_UART_Receive_DMA(&huart2, RxData, sizeof(RxData));
 80001b2:	463b      	mov	r3, r7
 80001b4:	2207      	movs	r2, #7
 80001b6:	4619      	mov	r1, r3
 80001b8:	4829      	ldr	r0, [pc, #164]	; (8000260 <main+0x114>)
 80001ba:	f002 fc5c 	bl	8002a76 <HAL_UART_Receive_DMA>
	  dutyCycle = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	617b      	str	r3, [r7, #20]
	  for(uint8_t i = 0; RxData[i] != '\t' && i< sizeof(RxData); i++)
 80001c2:	2300      	movs	r3, #0
 80001c4:	74fb      	strb	r3, [r7, #19]
 80001c6:	e022      	b.n	800020e <main+0xc2>
	       {
	     	  if(RxData[i]== '-')
 80001c8:	7cfb      	ldrb	r3, [r7, #19]
 80001ca:	3318      	adds	r3, #24
 80001cc:	443b      	add	r3, r7
 80001ce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80001d2:	2b2d      	cmp	r3, #45	; 0x2d
 80001d4:	d105      	bne.n	80001e2 <main+0x96>
	     	  {
	     		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80001d6:	2200      	movs	r2, #0
 80001d8:	2120      	movs	r1, #32
 80001da:	4822      	ldr	r0, [pc, #136]	; (8000264 <main+0x118>)
 80001dc:	f001 f8b8 	bl	8001350 <HAL_GPIO_WritePin>
 80001e0:	e004      	b.n	80001ec <main+0xa0>
	     	  }
	     	  else
	     	  {
	     		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2120      	movs	r1, #32
 80001e6:	481f      	ldr	r0, [pc, #124]	; (8000264 <main+0x118>)
 80001e8:	f001 f8b2 	bl	8001350 <HAL_GPIO_WritePin>
	     	  }

	     	  dutyCycle = dutyCycle*10 + (RxData[i] - '0');
 80001ec:	697a      	ldr	r2, [r7, #20]
 80001ee:	4613      	mov	r3, r2
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	4413      	add	r3, r2
 80001f4:	005b      	lsls	r3, r3, #1
 80001f6:	461a      	mov	r2, r3
 80001f8:	7cfb      	ldrb	r3, [r7, #19]
 80001fa:	3318      	adds	r3, #24
 80001fc:	443b      	add	r3, r7
 80001fe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000202:	3b30      	subs	r3, #48	; 0x30
 8000204:	4413      	add	r3, r2
 8000206:	617b      	str	r3, [r7, #20]
	  for(uint8_t i = 0; RxData[i] != '\t' && i< sizeof(RxData); i++)
 8000208:	7cfb      	ldrb	r3, [r7, #19]
 800020a:	3301      	adds	r3, #1
 800020c:	74fb      	strb	r3, [r7, #19]
 800020e:	7cfb      	ldrb	r3, [r7, #19]
 8000210:	3318      	adds	r3, #24
 8000212:	443b      	add	r3, r7
 8000214:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000218:	2b09      	cmp	r3, #9
 800021a:	d002      	beq.n	8000222 <main+0xd6>
 800021c:	7cfb      	ldrb	r3, [r7, #19]
 800021e:	2b06      	cmp	r3, #6
 8000220:	d9d2      	bls.n	80001c8 <main+0x7c>

	       }

	  if(dutyCycle < 100)
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	2b63      	cmp	r3, #99	; 0x63
 8000226:	dc0e      	bgt.n	8000246 <main+0xfa>
	  {
		  	  dutyCycle = dutyCycle*UINT16_MAX/100;
 8000228:	697a      	ldr	r2, [r7, #20]
 800022a:	4613      	mov	r3, r2
 800022c:	041b      	lsls	r3, r3, #16
 800022e:	1a9b      	subs	r3, r3, r2
 8000230:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <main+0x11c>)
 8000232:	fb82 1203 	smull	r1, r2, r2, r3
 8000236:	1152      	asrs	r2, r2, #5
 8000238:	17db      	asrs	r3, r3, #31
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	617b      	str	r3, [r7, #20]
	       	  TIM3->CCR1 = dutyCycle;
 800023e:	4a0b      	ldr	r2, [pc, #44]	; (800026c <main+0x120>)
 8000240:	697b      	ldr	r3, [r7, #20]
 8000242:	6353      	str	r3, [r2, #52]	; 0x34
 8000244:	e002      	b.n	800024c <main+0x100>
	  }
	  else
	     	  TIM3->CCR1 = 0;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0x120>)
 8000248:	2200      	movs	r2, #0
 800024a:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(200);
 800024c:	20c8      	movs	r0, #200	; 0xc8
 800024e:	f000 fbdb 	bl	8000a08 <HAL_Delay>
  {
 8000252:	e79d      	b.n	8000190 <main+0x44>
 8000254:	20000078 	.word	0x20000078
 8000258:	200000c0 	.word	0x200000c0
 800025c:	08003ac4 	.word	0x08003ac4
 8000260:	20000108 	.word	0x20000108
 8000264:	40010800 	.word	0x40010800
 8000268:	51eb851f 	.word	0x51eb851f
 800026c:	40000400 	.word	0x40000400

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b090      	sub	sp, #64	; 0x40
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 ff82 	bl	8003188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000292:	2301      	movs	r3, #1
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a4:	2302      	movs	r3, #2
 80002a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0318 	add.w	r3, r7, #24
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 f861 	bl	8001380 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c4:	f000 f970 	bl	80005a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2302      	movs	r3, #2
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2102      	movs	r1, #2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 face 	bl	8001884 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ee:	f000 f95b 	bl	80005a8 <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3740      	adds	r7, #64	; 0x40
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b08c      	sub	sp, #48	; 0x30
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000302:	f107 030c 	add.w	r3, r7, #12
 8000306:	2224      	movs	r2, #36	; 0x24
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f002 ff3c 	bl	8003188 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000318:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <MX_TIM2_Init+0xa4>)
 800031a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000320:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <MX_TIM2_Init+0xa4>)
 8000322:	2200      	movs	r2, #0
 8000324:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000326:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <MX_TIM2_Init+0xa4>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800032c:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <MX_TIM2_Init+0xa4>)
 800032e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000332:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_TIM2_Init+0xa4>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <MX_TIM2_Init+0xa4>)
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000340:	2303      	movs	r3, #3
 8000342:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000348:	2301      	movs	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000350:	230a      	movs	r3, #10
 8000352:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000358:	2301      	movs	r3, #1
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000360:	2300      	movs	r3, #0
 8000362:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000364:	f107 030c 	add.w	r3, r7, #12
 8000368:	4619      	mov	r1, r3
 800036a:	480d      	ldr	r0, [pc, #52]	; (80003a0 <MX_TIM2_Init+0xa4>)
 800036c:	f001 fd0a 	bl	8001d84 <HAL_TIM_Encoder_Init>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000376:	f000 f917 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037e:	2300      	movs	r3, #0
 8000380:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <MX_TIM2_Init+0xa4>)
 8000388:	f002 fa32 	bl	80027f0 <HAL_TIMEx_MasterConfigSynchronization>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000392:	f000 f909 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	3730      	adds	r7, #48	; 0x30
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000078 	.word	0x20000078

080003a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	; 0x28
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	f107 0320 	add.w	r3, r7, #32
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]
 80003c0:	611a      	str	r2, [r3, #16]
 80003c2:	615a      	str	r2, [r3, #20]
 80003c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003c6:	4b22      	ldr	r3, [pc, #136]	; (8000450 <MX_TIM3_Init+0xac>)
 80003c8:	4a22      	ldr	r2, [pc, #136]	; (8000454 <MX_TIM3_Init+0xb0>)
 80003ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <MX_TIM3_Init+0xac>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <MX_TIM3_Init+0xac>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003d8:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <MX_TIM3_Init+0xac>)
 80003da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_TIM3_Init+0xac>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <MX_TIM3_Init+0xac>)
 80003e8:	2280      	movs	r2, #128	; 0x80
 80003ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003ec:	4818      	ldr	r0, [pc, #96]	; (8000450 <MX_TIM3_Init+0xac>)
 80003ee:	f001 fbd7 	bl	8001ba0 <HAL_TIM_PWM_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80003f8:	f000 f8d6 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000404:	f107 0320 	add.w	r3, r7, #32
 8000408:	4619      	mov	r1, r3
 800040a:	4811      	ldr	r0, [pc, #68]	; (8000450 <MX_TIM3_Init+0xac>)
 800040c:	f002 f9f0 	bl	80027f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000416:	f000 f8c7 	bl	80005a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800041a:	2360      	movs	r3, #96	; 0x60
 800041c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	4619      	mov	r1, r3
 8000430:	4807      	ldr	r0, [pc, #28]	; (8000450 <MX_TIM3_Init+0xac>)
 8000432:	f001 fedf 	bl	80021f4 <HAL_TIM_PWM_ConfigChannel>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800043c:	f000 f8b4 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <MX_TIM3_Init+0xac>)
 8000442:	f000 f93b 	bl	80006bc <HAL_TIM_MspPostInit>

}
 8000446:	bf00      	nop
 8000448:	3728      	adds	r7, #40	; 0x28
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	200000c0 	.word	0x200000c0
 8000454:	40000400 	.word	0x40000400

08000458 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800045c:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_USART2_UART_Init+0x4c>)
 800045e:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <MX_USART2_UART_Init+0x50>)
 8000460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <MX_USART2_UART_Init+0x4c>)
 8000464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_USART2_UART_Init+0x4c>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_USART2_UART_Init+0x4c>)
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <MX_USART2_UART_Init+0x4c>)
 8000478:	2200      	movs	r2, #0
 800047a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_USART2_UART_Init+0x4c>)
 800047e:	220c      	movs	r2, #12
 8000480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000482:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <MX_USART2_UART_Init+0x4c>)
 8000484:	2200      	movs	r2, #0
 8000486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_USART2_UART_Init+0x4c>)
 800048a:	2200      	movs	r2, #0
 800048c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <MX_USART2_UART_Init+0x4c>)
 8000490:	f002 fa1e 	bl	80028d0 <HAL_UART_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800049a:	f000 f885 	bl	80005a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000108 	.word	0x20000108
 80004a8:	40004400 	.word	0x40004400

080004ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_DMA_Init+0x38>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <MX_DMA_Init+0x38>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_DMA_Init+0x38>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	2010      	movs	r0, #16
 80004d0:	f000 fb95 	bl	8000bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004d4:	2010      	movs	r0, #16
 80004d6:	f000 fbae 	bl	8000c36 <HAL_NVIC_EnableIRQ>

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fc:	4b27      	ldr	r3, [pc, #156]	; (800059c <MX_GPIO_Init+0xb4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a26      	ldr	r2, [pc, #152]	; (800059c <MX_GPIO_Init+0xb4>)
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <MX_GPIO_Init+0xb4>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0310 	and.w	r3, r3, #16
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <MX_GPIO_Init+0xb4>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_GPIO_Init+0xb4>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_GPIO_Init+0xb4>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_GPIO_Init+0xb4>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a1a      	ldr	r2, [pc, #104]	; (800059c <MX_GPIO_Init+0xb4>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_GPIO_Init+0xb4>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	4815      	ldr	r0, [pc, #84]	; (80005a0 <MX_GPIO_Init+0xb8>)
 800054c:	f000 ff00 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	4813      	ldr	r0, [pc, #76]	; (80005a4 <MX_GPIO_Init+0xbc>)
 8000556:	f000 fefb 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800055a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2302      	movs	r3, #2
 800056a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	480b      	ldr	r0, [pc, #44]	; (80005a0 <MX_GPIO_Init+0xb8>)
 8000574:	f000 fd68 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000578:	2320      	movs	r3, #32
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2302      	movs	r3, #2
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_GPIO_Init+0xbc>)
 8000590:	f000 fd5a 	bl	8001048 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	40011000 	.word	0x40011000
 80005a4:	40010800 	.word	0x40010800

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ac:	b672      	cpsid	i
}
 80005ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <Error_Handler+0x8>
	...

080005b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_MspInit+0x40>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <HAL_MspInit+0x40>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <HAL_MspInit+0x40>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_MspInit+0x40>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_MspInit+0x40>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_MspInit+0x40>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000616:	d12b      	bne.n	8000670 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000618:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_TIM_Encoder_MspInit+0x80>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	4a16      	ldr	r2, [pc, #88]	; (8000678 <HAL_TIM_Encoder_MspInit+0x80>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	61d3      	str	r3, [r2, #28]
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_TIM_Encoder_MspInit+0x80>)
 8000626:	69db      	ldr	r3, [r3, #28]
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <HAL_TIM_Encoder_MspInit+0x80>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a10      	ldr	r2, [pc, #64]	; (8000678 <HAL_TIM_Encoder_MspInit+0x80>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <HAL_TIM_Encoder_MspInit+0x80>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000648:	2303      	movs	r3, #3
 800064a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4619      	mov	r1, r3
 800065a:	4808      	ldr	r0, [pc, #32]	; (800067c <HAL_TIM_Encoder_MspInit+0x84>)
 800065c:	f000 fcf4 	bl	8001048 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	201c      	movs	r0, #28
 8000666:	f000 faca 	bl	8000bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800066a:	201c      	movs	r0, #28
 800066c:	f000 fae3 	bl	8000c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000
 800067c:	40010800 	.word	0x40010800

08000680 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <HAL_TIM_PWM_MspInit+0x34>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d10b      	bne.n	80006aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_TIM_PWM_MspInit+0x38>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <HAL_TIM_PWM_MspInit+0x38>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_TIM_PWM_MspInit+0x38>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40000400 	.word	0x40000400
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <HAL_TIM_MspPostInit+0x58>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d117      	bne.n	800070c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <HAL_TIM_MspPostInit+0x5c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <HAL_TIM_MspPostInit+0x5c>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <HAL_TIM_MspPostInit+0x5c>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006f4:	2340      	movs	r3, #64	; 0x40
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <HAL_TIM_MspPostInit+0x60>)
 8000708:	f000 fc9e 	bl	8001048 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40000400 	.word	0x40000400
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800

08000720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <HAL_UART_MspInit+0xd4>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d155      	bne.n	80007ec <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <HAL_UART_MspInit+0xd8>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	4a2c      	ldr	r2, [pc, #176]	; (80007f8 <HAL_UART_MspInit+0xd8>)
 8000746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074a:	61d3      	str	r3, [r2, #28]
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <HAL_UART_MspInit+0xd8>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <HAL_UART_MspInit+0xd8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <HAL_UART_MspInit+0xd8>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <HAL_UART_MspInit+0xd8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000770:	2304      	movs	r3, #4
 8000772:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	481e      	ldr	r0, [pc, #120]	; (80007fc <HAL_UART_MspInit+0xdc>)
 8000784:	f000 fc60 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000788:	2308      	movs	r3, #8
 800078a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4619      	mov	r1, r3
 800079a:	4818      	ldr	r0, [pc, #96]	; (80007fc <HAL_UART_MspInit+0xdc>)
 800079c:	f000 fc54 	bl	8001048 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <HAL_UART_MspInit+0xe4>)
 80007a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007c6:	2220      	movs	r2, #32
 80007c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007d2:	f000 fa4b 	bl	8000c6c <HAL_DMA_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80007dc:	f7ff fee4 	bl	80005a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80007e6:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_UART_MspInit+0xe0>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40004400 	.word	0x40004400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800
 8000800:	20000150 	.word	0x20000150
 8000804:	4002006c 	.word	0x4002006c

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 f8bf 	bl	80009d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <DMA1_Channel6_IRQHandler+0x10>)
 800085e:	f000 fabf 	bl	8000de0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000150 	.word	0x20000150

0800086c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <TIM2_IRQHandler+0x10>)
 8000872:	f001 fbb7 	bl	8001fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000078 	.word	0x20000078

08000880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000888:	4a14      	ldr	r2, [pc, #80]	; (80008dc <_sbrk+0x5c>)
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <_sbrk+0x60>)
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <_sbrk+0x64>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <_sbrk+0x64>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <_sbrk+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d207      	bcs.n	80008c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b0:	f002 fc72 	bl	8003198 <__errno>
 80008b4:	4603      	mov	r3, r0
 80008b6:	220c      	movs	r2, #12
 80008b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008be:	e009      	b.n	80008d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <_sbrk+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <_sbrk+0x64>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <_sbrk+0x64>)
 80008d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20005000 	.word	0x20005000
 80008e0:	00000400 	.word	0x00000400
 80008e4:	20000194 	.word	0x20000194
 80008e8:	200002e8 	.word	0x200002e8

080008ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr

080008f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff fff8 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008fe:	490c      	ldr	r1, [pc, #48]	; (8000930 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a09      	ldr	r2, [pc, #36]	; (8000938 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000914:	4c09      	ldr	r4, [pc, #36]	; (800093c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f002 fc3f 	bl	80031a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000926:	f7ff fc11 	bl	800014c <main>
  bx lr
 800092a:	4770      	bx	lr
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000934:	08003b34 	.word	0x08003b34
  ldr r2, =_sbss
 8000938:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800093c:	200002e4 	.word	0x200002e4

08000940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC1_2_IRQHandler>
	...

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_Init+0x28>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_Init+0x28>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f947 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	200f      	movs	r0, #15
 800095c:	f000 f808 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff fe28 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40022000 	.word	0x40022000

08000970 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x54>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x58>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	fbb3 f3f1 	udiv	r3, r3, r1
 800098a:	fbb2 f3f3 	udiv	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 f95f 	bl	8000c52 <HAL_SYSTICK_Config>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e00e      	b.n	80009bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d80a      	bhi.n	80009ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ac:	f000 f927 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b0:	4a06      	ldr	r2, [pc, #24]	; (80009cc <HAL_InitTick+0x5c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000008 	.word	0x20000008
 80009cc:	20000004 	.word	0x20000004

080009d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <HAL_IncTick+0x1c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x20>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4413      	add	r3, r2
 80009e0:	4a03      	ldr	r2, [pc, #12]	; (80009f0 <HAL_IncTick+0x20>)
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000198 	.word	0x20000198

080009f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <HAL_GetTick+0x10>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000198 	.word	0x20000198

08000a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a10:	f7ff fff0 	bl	80009f4 <HAL_GetTick>
 8000a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a20:	d005      	beq.n	8000a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_Delay+0x44>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a2e:	bf00      	nop
 8000a30:	f7ff ffe0 	bl	80009f4 <HAL_GetTick>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d8f7      	bhi.n	8000a30 <HAL_Delay+0x28>
  {
  }
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4906      	ldr	r1, [pc, #24]	; (8000ae8 <__NVIC_EnableIRQ+0x34>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100

08000aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	db0a      	blt.n	8000b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	490c      	ldr	r1, [pc, #48]	; (8000b38 <__NVIC_SetPriority+0x4c>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	0112      	lsls	r2, r2, #4
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	440b      	add	r3, r1
 8000b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b14:	e00a      	b.n	8000b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	4908      	ldr	r1, [pc, #32]	; (8000b3c <__NVIC_SetPriority+0x50>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	3b04      	subs	r3, #4
 8000b24:	0112      	lsls	r2, r2, #4
 8000b26:	b2d2      	uxtb	r2, r2
 8000b28:	440b      	add	r3, r1
 8000b2a:	761a      	strb	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	f1c3 0307 	rsb	r3, r3, #7
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	bf28      	it	cs
 8000b5e:	2304      	movcs	r3, #4
 8000b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3304      	adds	r3, #4
 8000b66:	2b06      	cmp	r3, #6
 8000b68:	d902      	bls.n	8000b70 <NVIC_EncodePriority+0x30>
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <NVIC_EncodePriority+0x32>
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b92:	43d9      	mvns	r1, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	4313      	orrs	r3, r2
         );
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3724      	adds	r7, #36	; 0x24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc8:	f7ff ff90 	bl	8000aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff2d 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff42 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff90 	bl	8000b40 <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5f 	bl	8000aec <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff35 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffa2 	bl	8000ba4 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d101      	bne.n	8000c82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e043      	b.n	8000d0a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <HAL_DMA_Init+0xa8>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <HAL_DMA_Init+0xac>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	009a      	lsls	r2, r3, #2
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <HAL_DMA_Init+0xb0>)
 8000c9e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cb6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	bffdfff8 	.word	0xbffdfff8
 8000d18:	cccccccd 	.word	0xcccccccd
 8000d1c:	40020000 	.word	0x40020000

08000d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d101      	bne.n	8000d40 <HAL_DMA_Start_IT+0x20>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e04b      	b.n	8000dd8 <HAL_DMA_Start_IT+0xb8>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d13a      	bne.n	8000dca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2202      	movs	r2, #2
 8000d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0201 	bic.w	r2, r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 f937 	bl	8000fec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d008      	beq.n	8000d98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f042 020e 	orr.w	r2, r2, #14
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e00f      	b.n	8000db8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0204 	bic.w	r2, r2, #4
 8000da6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 020a 	orr.w	r2, r2, #10
 8000db6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0201 	orr.w	r2, r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	e005      	b.n	8000dd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d04f      	beq.n	8000ea8 <HAL_DMA_IRQHandler+0xc8>
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d04a      	beq.n	8000ea8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d107      	bne.n	8000e30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0204 	bic.w	r2, r2, #4
 8000e2e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a66      	ldr	r2, [pc, #408]	; (8000fd0 <HAL_DMA_IRQHandler+0x1f0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d029      	beq.n	8000e8e <HAL_DMA_IRQHandler+0xae>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a65      	ldr	r2, [pc, #404]	; (8000fd4 <HAL_DMA_IRQHandler+0x1f4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d022      	beq.n	8000e8a <HAL_DMA_IRQHandler+0xaa>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a63      	ldr	r2, [pc, #396]	; (8000fd8 <HAL_DMA_IRQHandler+0x1f8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d01a      	beq.n	8000e84 <HAL_DMA_IRQHandler+0xa4>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a62      	ldr	r2, [pc, #392]	; (8000fdc <HAL_DMA_IRQHandler+0x1fc>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d012      	beq.n	8000e7e <HAL_DMA_IRQHandler+0x9e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a60      	ldr	r2, [pc, #384]	; (8000fe0 <HAL_DMA_IRQHandler+0x200>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00a      	beq.n	8000e78 <HAL_DMA_IRQHandler+0x98>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a5f      	ldr	r2, [pc, #380]	; (8000fe4 <HAL_DMA_IRQHandler+0x204>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d102      	bne.n	8000e72 <HAL_DMA_IRQHandler+0x92>
 8000e6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e70:	e00e      	b.n	8000e90 <HAL_DMA_IRQHandler+0xb0>
 8000e72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e76:	e00b      	b.n	8000e90 <HAL_DMA_IRQHandler+0xb0>
 8000e78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e7c:	e008      	b.n	8000e90 <HAL_DMA_IRQHandler+0xb0>
 8000e7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e82:	e005      	b.n	8000e90 <HAL_DMA_IRQHandler+0xb0>
 8000e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e88:	e002      	b.n	8000e90 <HAL_DMA_IRQHandler+0xb0>
 8000e8a:	2340      	movs	r3, #64	; 0x40
 8000e8c:	e000      	b.n	8000e90 <HAL_DMA_IRQHandler+0xb0>
 8000e8e:	2304      	movs	r3, #4
 8000e90:	4a55      	ldr	r2, [pc, #340]	; (8000fe8 <HAL_DMA_IRQHandler+0x208>)
 8000e92:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 8094 	beq.w	8000fc6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000ea6:	e08e      	b.n	8000fc6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	2202      	movs	r2, #2
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d056      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x186>
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d051      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0320 	and.w	r3, r3, #32
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10b      	bne.n	8000ee8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 020a 	bic.w	r2, r2, #10
 8000ede:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a38      	ldr	r2, [pc, #224]	; (8000fd0 <HAL_DMA_IRQHandler+0x1f0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d029      	beq.n	8000f46 <HAL_DMA_IRQHandler+0x166>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a37      	ldr	r2, [pc, #220]	; (8000fd4 <HAL_DMA_IRQHandler+0x1f4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d022      	beq.n	8000f42 <HAL_DMA_IRQHandler+0x162>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a35      	ldr	r2, [pc, #212]	; (8000fd8 <HAL_DMA_IRQHandler+0x1f8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d01a      	beq.n	8000f3c <HAL_DMA_IRQHandler+0x15c>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a34      	ldr	r2, [pc, #208]	; (8000fdc <HAL_DMA_IRQHandler+0x1fc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d012      	beq.n	8000f36 <HAL_DMA_IRQHandler+0x156>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <HAL_DMA_IRQHandler+0x200>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00a      	beq.n	8000f30 <HAL_DMA_IRQHandler+0x150>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <HAL_DMA_IRQHandler+0x204>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d102      	bne.n	8000f2a <HAL_DMA_IRQHandler+0x14a>
 8000f24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f28:	e00e      	b.n	8000f48 <HAL_DMA_IRQHandler+0x168>
 8000f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f2e:	e00b      	b.n	8000f48 <HAL_DMA_IRQHandler+0x168>
 8000f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f34:	e008      	b.n	8000f48 <HAL_DMA_IRQHandler+0x168>
 8000f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3a:	e005      	b.n	8000f48 <HAL_DMA_IRQHandler+0x168>
 8000f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f40:	e002      	b.n	8000f48 <HAL_DMA_IRQHandler+0x168>
 8000f42:	2320      	movs	r3, #32
 8000f44:	e000      	b.n	8000f48 <HAL_DMA_IRQHandler+0x168>
 8000f46:	2302      	movs	r3, #2
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <HAL_DMA_IRQHandler+0x208>)
 8000f4a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d034      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f64:	e02f      	b.n	8000fc6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d028      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x1e8>
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d023      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 020e 	bic.w	r2, r2, #14
 8000f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	2101      	movs	r1, #1
 8000f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	4798      	blx	r3
    }
  }
  return;
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
}
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40020008 	.word	0x40020008
 8000fd4:	4002001c 	.word	0x4002001c
 8000fd8:	40020030 	.word	0x40020030
 8000fdc:	40020044 	.word	0x40020044
 8000fe0:	40020058 	.word	0x40020058
 8000fe4:	4002006c 	.word	0x4002006c
 8000fe8:	40020000 	.word	0x40020000

08000fec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001002:	2101      	movs	r1, #1
 8001004:	fa01 f202 	lsl.w	r2, r1, r2
 8001008:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b10      	cmp	r3, #16
 8001018:	d108      	bne.n	800102c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800102a:	e007      	b.n	800103c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	60da      	str	r2, [r3, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b08b      	sub	sp, #44	; 0x2c
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	e169      	b.n	8001330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800105c:	2201      	movs	r2, #1
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 8158 	bne.w	800132a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a9a      	ldr	r2, [pc, #616]	; (80012e8 <HAL_GPIO_Init+0x2a0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d05e      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 8001084:	4a98      	ldr	r2, [pc, #608]	; (80012e8 <HAL_GPIO_Init+0x2a0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d875      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 800108a:	4a98      	ldr	r2, [pc, #608]	; (80012ec <HAL_GPIO_Init+0x2a4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d058      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 8001090:	4a96      	ldr	r2, [pc, #600]	; (80012ec <HAL_GPIO_Init+0x2a4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d86f      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 8001096:	4a96      	ldr	r2, [pc, #600]	; (80012f0 <HAL_GPIO_Init+0x2a8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d052      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 800109c:	4a94      	ldr	r2, [pc, #592]	; (80012f0 <HAL_GPIO_Init+0x2a8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d869      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010a2:	4a94      	ldr	r2, [pc, #592]	; (80012f4 <HAL_GPIO_Init+0x2ac>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d04c      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 80010a8:	4a92      	ldr	r2, [pc, #584]	; (80012f4 <HAL_GPIO_Init+0x2ac>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d863      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010ae:	4a92      	ldr	r2, [pc, #584]	; (80012f8 <HAL_GPIO_Init+0x2b0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d046      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 80010b4:	4a90      	ldr	r2, [pc, #576]	; (80012f8 <HAL_GPIO_Init+0x2b0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d85d      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d82a      	bhi.n	8001114 <HAL_GPIO_Init+0xcc>
 80010be:	2b12      	cmp	r3, #18
 80010c0:	d859      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <HAL_GPIO_Init+0x80>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	08001143 	.word	0x08001143
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	0800112f 	.word	0x0800112f
 80010d4:	08001171 	.word	0x08001171
 80010d8:	08001177 	.word	0x08001177
 80010dc:	08001177 	.word	0x08001177
 80010e0:	08001177 	.word	0x08001177
 80010e4:	08001177 	.word	0x08001177
 80010e8:	08001177 	.word	0x08001177
 80010ec:	08001177 	.word	0x08001177
 80010f0:	08001177 	.word	0x08001177
 80010f4:	08001177 	.word	0x08001177
 80010f8:	08001177 	.word	0x08001177
 80010fc:	08001177 	.word	0x08001177
 8001100:	08001177 	.word	0x08001177
 8001104:	08001177 	.word	0x08001177
 8001108:	08001177 	.word	0x08001177
 800110c:	08001125 	.word	0x08001125
 8001110:	08001139 	.word	0x08001139
 8001114:	4a79      	ldr	r2, [pc, #484]	; (80012fc <HAL_GPIO_Init+0x2b4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800111a:	e02c      	b.n	8001176 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e029      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	3304      	adds	r3, #4
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e024      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	3308      	adds	r3, #8
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e01f      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	330c      	adds	r3, #12
 800113e:	623b      	str	r3, [r7, #32]
          break;
 8001140:	e01a      	b.n	8001178 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800114a:	2304      	movs	r3, #4
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e013      	b.n	8001178 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d105      	bne.n	8001164 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001158:	2308      	movs	r3, #8
 800115a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	611a      	str	r2, [r3, #16]
          break;
 8001162:	e009      	b.n	8001178 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001164:	2308      	movs	r3, #8
 8001166:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	615a      	str	r2, [r3, #20]
          break;
 800116e:	e003      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x130>
          break;
 8001176:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d801      	bhi.n	8001182 <HAL_GPIO_Init+0x13a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e001      	b.n	8001186 <HAL_GPIO_Init+0x13e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3304      	adds	r3, #4
 8001186:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2bff      	cmp	r3, #255	; 0xff
 800118c:	d802      	bhi.n	8001194 <HAL_GPIO_Init+0x14c>
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	e002      	b.n	800119a <HAL_GPIO_Init+0x152>
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3b08      	subs	r3, #8
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	210f      	movs	r1, #15
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	401a      	ands	r2, r3
 80011ac:	6a39      	ldr	r1, [r7, #32]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	431a      	orrs	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80b1 	beq.w	800132a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c8:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <HAL_GPIO_Init+0x2b8>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x2b8>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <HAL_GPIO_Init+0x2b8>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <HAL_GPIO_Init+0x2bc>)
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a40      	ldr	r2, [pc, #256]	; (8001308 <HAL_GPIO_Init+0x2c0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d013      	beq.n	8001234 <HAL_GPIO_Init+0x1ec>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a3f      	ldr	r2, [pc, #252]	; (800130c <HAL_GPIO_Init+0x2c4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d00d      	beq.n	8001230 <HAL_GPIO_Init+0x1e8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a3e      	ldr	r2, [pc, #248]	; (8001310 <HAL_GPIO_Init+0x2c8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0x1e4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a3d      	ldr	r2, [pc, #244]	; (8001314 <HAL_GPIO_Init+0x2cc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_GPIO_Init+0x1e0>
 8001224:	2303      	movs	r3, #3
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001228:	2304      	movs	r3, #4
 800122a:	e004      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 800122c:	2302      	movs	r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001234:	2300      	movs	r3, #0
 8001236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001246:	492f      	ldr	r1, [pc, #188]	; (8001304 <HAL_GPIO_Init+0x2bc>)
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	492c      	ldr	r1, [pc, #176]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	608b      	str	r3, [r1, #8]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	4928      	ldr	r1, [pc, #160]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001278:	4013      	ands	r3, r2
 800127a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4922      	ldr	r1, [pc, #136]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	60cb      	str	r3, [r1, #12]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	491e      	ldr	r1, [pc, #120]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4918      	ldr	r1, [pc, #96]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4914      	ldr	r1, [pc, #80]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d021      	beq.n	800131c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	490e      	ldr	r1, [pc, #56]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
 80012e4:	e021      	b.n	800132a <HAL_GPIO_Init+0x2e2>
 80012e6:	bf00      	nop
 80012e8:	10320000 	.word	0x10320000
 80012ec:	10310000 	.word	0x10310000
 80012f0:	10220000 	.word	0x10220000
 80012f4:	10210000 	.word	0x10210000
 80012f8:	10120000 	.word	0x10120000
 80012fc:	10110000 	.word	0x10110000
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	40010800 	.word	0x40010800
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40011000 	.word	0x40011000
 8001314:	40011400 	.word	0x40011400
 8001318:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_GPIO_Init+0x304>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	43db      	mvns	r3, r3
 8001324:	4909      	ldr	r1, [pc, #36]	; (800134c <HAL_GPIO_Init+0x304>)
 8001326:	4013      	ands	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	3301      	adds	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f ae8e 	bne.w	800105c <HAL_GPIO_Init+0x14>
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	372c      	adds	r7, #44	; 0x2c
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800136c:	e003      	b.n	8001376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	041a      	lsls	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e272      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8087 	beq.w	80014ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d00c      	beq.n	80013c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ac:	4b8f      	ldr	r3, [pc, #572]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d112      	bne.n	80013de <HAL_RCC_OscConfig+0x5e>
 80013b8:	4b8c      	ldr	r3, [pc, #560]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d10b      	bne.n	80013de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c6:	4b89      	ldr	r3, [pc, #548]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d06c      	beq.n	80014ac <HAL_RCC_OscConfig+0x12c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d168      	bne.n	80014ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e24c      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x76>
 80013e8:	4b80      	ldr	r3, [pc, #512]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a7f      	ldr	r2, [pc, #508]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e02e      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7a      	ldr	r2, [pc, #488]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b78      	ldr	r3, [pc, #480]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a77      	ldr	r2, [pc, #476]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0xbc>
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a71      	ldr	r2, [pc, #452]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6e      	ldr	r2, [pc, #440]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 800143c:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6a      	ldr	r2, [pc, #424]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a67      	ldr	r2, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff faca 	bl	80009f4 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fac6 	bl	80009f4 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e200      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0xe4>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fab6 	bl	80009f4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fab2 	bl	80009f4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1ec      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x10c>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014c6:	4b49      	ldr	r3, [pc, #292]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d11c      	bne.n	800150c <HAL_RCC_OscConfig+0x18c>
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1c0      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4939      	ldr	r1, [pc, #228]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	e03a      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fa6b 	bl	80009f4 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fa67 	bl	80009f4 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1a1      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4927      	ldr	r1, [pc, #156]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fa4a 	bl	80009f4 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fa46 	bl	80009f4 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e180      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d03a      	beq.n	8001604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d019      	beq.n	80015ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fa2a 	bl	80009f4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fa26 	bl	80009f4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e160      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 face 	bl	8001b64 <RCC_Delay>
 80015c8:	e01c      	b.n	8001604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fa10 	bl	80009f4 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d6:	e00f      	b.n	80015f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fa0c 	bl	80009f4 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d908      	bls.n	80015f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e146      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	42420000 	.word	0x42420000
 80015f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1e9      	bne.n	80015d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a6 	beq.w	800175e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001616:	4b8b      	ldr	r3, [pc, #556]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10d      	bne.n	800163e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b88      	ldr	r3, [pc, #544]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a87      	ldr	r2, [pc, #540]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b85      	ldr	r3, [pc, #532]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	4b82      	ldr	r3, [pc, #520]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164a:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7e      	ldr	r2, [pc, #504]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff f9cd 	bl	80009f4 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff f9c9 	bl	80009f4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	; 0x64
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e103      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b75      	ldr	r3, [pc, #468]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x312>
 8001684:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a6e      	ldr	r2, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e02d      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x334>
 800169a:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a69      	ldr	r2, [pc, #420]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a66      	ldr	r2, [pc, #408]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	e01c      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x356>
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a60      	ldr	r2, [pc, #384]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	4b5e      	ldr	r3, [pc, #376]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a5d      	ldr	r2, [pc, #372]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	e00b      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 80016d6:	4b5b      	ldr	r3, [pc, #364]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a5a      	ldr	r2, [pc, #360]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	4b58      	ldr	r3, [pc, #352]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a57      	ldr	r2, [pc, #348]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d015      	beq.n	8001722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff f97d 	bl	80009f4 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff f979 	bl	80009f4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0b1      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001714:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ee      	beq.n	80016fe <HAL_RCC_OscConfig+0x37e>
 8001720:	e014      	b.n	800174c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff f967 	bl	80009f4 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff f963 	bl	80009f4 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e09b      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	4b40      	ldr	r3, [pc, #256]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ee      	bne.n	800172a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d105      	bne.n	800175e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a3b      	ldr	r2, [pc, #236]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8087 	beq.w	8001876 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001768:	4b36      	ldr	r3, [pc, #216]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d061      	beq.n	8001838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d146      	bne.n	800180a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff f937 	bl	80009f4 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff f933 	bl	80009f4 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e06d      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4921      	ldr	r1, [pc, #132]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a19      	ldr	r1, [r3, #32]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	430b      	orrs	r3, r1
 80017d6:	491b      	ldr	r1, [pc, #108]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff f907 	bl	80009f4 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff f903 	bl	80009f4 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e03d      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x46a>
 8001808:	e035      	b.n	8001876 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff f8f0 	bl	80009f4 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff f8ec 	bl	80009f4 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e026      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x498>
 8001836:	e01e      	b.n	8001876 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e019      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
 800184c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_OscConfig+0x500>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	429a      	cmp	r2, r3
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0d0      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d910      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0207 	bic.w	r2, r3, #7
 80018ae:	4965      	ldr	r1, [pc, #404]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d040      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d115      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e073      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e06b      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f023 0203 	bic.w	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4936      	ldr	r1, [pc, #216]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001974:	f7ff f83e 	bl	80009f4 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	e00a      	b.n	8001992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197c:	f7ff f83a 	bl	80009f4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e053      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 020c 	and.w	r2, r3, #12
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d1eb      	bne.n	800197c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d210      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 0207 	bic.w	r2, r3, #7
 80019ba:	4922      	ldr	r1, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x1c8>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1cc>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1d0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe ff9c 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	08003acc 	.word	0x08003acc
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_RCC_GetSysClockFreq+0x94>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x30>
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x36>
 8001a86:	e027      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a8a:	613b      	str	r3, [r7, #16]
      break;
 8001a8c:	e027      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	0c9b      	lsrs	r3, r3, #18
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_RCC_GetSysClockFreq+0x94>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0c5b      	lsrs	r3, r3, #17
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aba:	fb03 f202 	mul.w	r2, r3, r2
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e004      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	613b      	str	r3, [r7, #16]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ada:	613b      	str	r3, [r7, #16]
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	693b      	ldr	r3, [r7, #16]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	007a1200 	.word	0x007a1200
 8001af4:	08003ae4 	.word	0x08003ae4
 8001af8:	08003af4 	.word	0x08003af4
 8001afc:	003d0900 	.word	0x003d0900

08001b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	20000000 	.word	0x20000000

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b18:	f7ff fff2 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08003adc 	.word	0x08003adc

08001b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b40:	f7ff ffde 	bl	8001b00 <HAL_RCC_GetHCLKFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	0adb      	lsrs	r3, r3, #11
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	4903      	ldr	r1, [pc, #12]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b52:	5ccb      	ldrb	r3, [r1, r3]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	08003adc 	.word	0x08003adc

08001b64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <RCC_Delay+0x34>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <RCC_Delay+0x38>)
 8001b72:	fba2 2303 	umull	r2, r3, r2, r3
 8001b76:	0a5b      	lsrs	r3, r3, #9
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b80:	bf00      	nop
  }
  while (Delay --);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1e5a      	subs	r2, r3, #1
 8001b86:	60fa      	str	r2, [r7, #12]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f9      	bne.n	8001b80 <RCC_Delay+0x1c>
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	10624dd3 	.word	0x10624dd3

08001ba0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e041      	b.n	8001c36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fd5a 	bl	8000680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f000 fbf8 	bl	80023d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_TIM_PWM_Start+0x24>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e022      	b.n	8001caa <HAL_TIM_PWM_Start+0x6a>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d109      	bne.n	8001c7e <HAL_TIM_PWM_Start+0x3e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	e015      	b.n	8001caa <HAL_TIM_PWM_Start+0x6a>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d109      	bne.n	8001c98 <HAL_TIM_PWM_Start+0x58>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	bf14      	ite	ne
 8001c90:	2301      	movne	r3, #1
 8001c92:	2300      	moveq	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e008      	b.n	8001caa <HAL_TIM_PWM_Start+0x6a>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	bf14      	ite	ne
 8001ca4:	2301      	movne	r3, #1
 8001ca6:	2300      	moveq	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e05e      	b.n	8001d70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d104      	bne.n	8001cc2 <HAL_TIM_PWM_Start+0x82>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc0:	e013      	b.n	8001cea <HAL_TIM_PWM_Start+0xaa>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d104      	bne.n	8001cd2 <HAL_TIM_PWM_Start+0x92>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cd0:	e00b      	b.n	8001cea <HAL_TIM_PWM_Start+0xaa>
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d104      	bne.n	8001ce2 <HAL_TIM_PWM_Start+0xa2>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ce0:	e003      	b.n	8001cea <HAL_TIM_PWM_Start+0xaa>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fd58 	bl	80027a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_TIM_PWM_Start+0x138>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d107      	bne.n	8001d12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_TIM_PWM_Start+0x138>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00e      	beq.n	8001d3a <HAL_TIM_PWM_Start+0xfa>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d24:	d009      	beq.n	8001d3a <HAL_TIM_PWM_Start+0xfa>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <HAL_TIM_PWM_Start+0x13c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_TIM_PWM_Start+0xfa>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <HAL_TIM_PWM_Start+0x140>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d111      	bne.n	8001d5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b06      	cmp	r3, #6
 8001d4a:	d010      	beq.n	8001d6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5c:	e007      	b.n	8001d6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0201 	orr.w	r2, r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800

08001d84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e093      	b.n	8001ec0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d106      	bne.n	8001db2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7fe fc23 	bl	80005f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2202      	movs	r2, #2
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6812      	ldr	r2, [r2, #0]
 8001dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc8:	f023 0307 	bic.w	r3, r3, #7
 8001dcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4610      	mov	r0, r2
 8001dda:	f000 fafb 	bl	80023d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	4313      	orrs	r3, r2
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e24:	f023 030c 	bic.w	r3, r3, #12
 8001e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	4313      	orrs	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	011a      	lsls	r2, r3, #4
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	031b      	lsls	r3, r3, #12
 8001e54:	4313      	orrs	r3, r2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ed8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ee0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ee8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ef0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d110      	bne.n	8001f1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d102      	bne.n	8001f04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001efe:	7b7b      	ldrb	r3, [r7, #13]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d001      	beq.n	8001f08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e069      	b.n	8001fdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f18:	e031      	b.n	8001f7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d110      	bne.n	8001f42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f20:	7bbb      	ldrb	r3, [r7, #14]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d102      	bne.n	8001f2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f26:	7b3b      	ldrb	r3, [r7, #12]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d001      	beq.n	8001f30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e055      	b.n	8001fdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f40:	e01d      	b.n	8001f7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d108      	bne.n	8001f5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f4e:	7b7b      	ldrb	r3, [r7, #13]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d102      	bne.n	8001f5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f54:	7b3b      	ldrb	r3, [r7, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e03e      	b.n	8001fdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_TIM_Encoder_Start+0xc4>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d008      	beq.n	8001f9c <HAL_TIM_Encoder_Start+0xd4>
 8001f8a:	e00f      	b.n	8001fac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2201      	movs	r2, #1
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fc07 	bl	80027a8 <TIM_CCxChannelCmd>
      break;
 8001f9a:	e016      	b.n	8001fca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fbff 	bl	80027a8 <TIM_CCxChannelCmd>
      break;
 8001faa:	e00e      	b.n	8001fca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fbf7 	bl	80027a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fbf0 	bl	80027a8 <TIM_CCxChannelCmd>
      break;
 8001fc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 0201 	orr.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d122      	bne.n	8002040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b02      	cmp	r3, #2
 8002006:	d11b      	bne.n	8002040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0202 	mvn.w	r2, #2
 8002010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f9b8 	bl	800239c <HAL_TIM_IC_CaptureCallback>
 800202c:	e005      	b.n	800203a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f9ab 	bl	800238a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f9ba 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b04      	cmp	r3, #4
 800204c:	d122      	bne.n	8002094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b04      	cmp	r3, #4
 800205a:	d11b      	bne.n	8002094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0204 	mvn.w	r2, #4
 8002064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f98e 	bl	800239c <HAL_TIM_IC_CaptureCallback>
 8002080:	e005      	b.n	800208e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f981 	bl	800238a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f990 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d122      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d11b      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0208 	mvn.w	r2, #8
 80020b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2204      	movs	r2, #4
 80020be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f964 	bl	800239c <HAL_TIM_IC_CaptureCallback>
 80020d4:	e005      	b.n	80020e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f957 	bl	800238a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f966 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b10      	cmp	r3, #16
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0210 	mvn.w	r2, #16
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2208      	movs	r2, #8
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f93a 	bl	800239c <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f92d 	bl	800238a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f93c 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0201 	mvn.w	r2, #1
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f908 	bl	8002378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b80      	cmp	r3, #128	; 0x80
 8002174:	d10e      	bne.n	8002194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002180:	2b80      	cmp	r3, #128	; 0x80
 8002182:	d107      	bne.n	8002194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fb95 	bl	80028be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d10e      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ac:	2b40      	cmp	r3, #64	; 0x40
 80021ae:	d107      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f900 	bl	80023c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0320 	and.w	r3, r3, #32
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d107      	bne.n	80021ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0220 	mvn.w	r2, #32
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 fb60 	bl	80028ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800220e:	2302      	movs	r3, #2
 8002210:	e0ae      	b.n	8002370 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b0c      	cmp	r3, #12
 800221e:	f200 809f 	bhi.w	8002360 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	0800225d 	.word	0x0800225d
 800222c:	08002361 	.word	0x08002361
 8002230:	08002361 	.word	0x08002361
 8002234:	08002361 	.word	0x08002361
 8002238:	0800229d 	.word	0x0800229d
 800223c:	08002361 	.word	0x08002361
 8002240:	08002361 	.word	0x08002361
 8002244:	08002361 	.word	0x08002361
 8002248:	080022df 	.word	0x080022df
 800224c:	08002361 	.word	0x08002361
 8002250:	08002361 	.word	0x08002361
 8002254:	08002361 	.word	0x08002361
 8002258:	0800231f 	.word	0x0800231f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f918 	bl	8002498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0208 	orr.w	r2, r2, #8
 8002276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699a      	ldr	r2, [r3, #24]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0204 	bic.w	r2, r2, #4
 8002286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6999      	ldr	r1, [r3, #24]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	619a      	str	r2, [r3, #24]
      break;
 800229a:	e064      	b.n	8002366 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f95e 	bl	8002564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6999      	ldr	r1, [r3, #24]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	021a      	lsls	r2, r3, #8
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	619a      	str	r2, [r3, #24]
      break;
 80022dc:	e043      	b.n	8002366 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 f9a7 	bl	8002638 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0208 	orr.w	r2, r2, #8
 80022f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0204 	bic.w	r2, r2, #4
 8002308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69d9      	ldr	r1, [r3, #28]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	61da      	str	r2, [r3, #28]
      break;
 800231c:	e023      	b.n	8002366 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f9f1 	bl	800270c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002338:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002348:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69d9      	ldr	r1, [r3, #28]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	021a      	lsls	r2, r3, #8
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	61da      	str	r2, [r3, #28]
      break;
 800235e:	e002      	b.n	8002366 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	75fb      	strb	r3, [r7, #23]
      break;
 8002364:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800236e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr

0800238a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
	...

080023d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a29      	ldr	r2, [pc, #164]	; (800248c <TIM_Base_SetConfig+0xb8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00b      	beq.n	8002404 <TIM_Base_SetConfig+0x30>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f2:	d007      	beq.n	8002404 <TIM_Base_SetConfig+0x30>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a26      	ldr	r2, [pc, #152]	; (8002490 <TIM_Base_SetConfig+0xbc>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d003      	beq.n	8002404 <TIM_Base_SetConfig+0x30>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a25      	ldr	r2, [pc, #148]	; (8002494 <TIM_Base_SetConfig+0xc0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d108      	bne.n	8002416 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <TIM_Base_SetConfig+0xb8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00b      	beq.n	8002436 <TIM_Base_SetConfig+0x62>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d007      	beq.n	8002436 <TIM_Base_SetConfig+0x62>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <TIM_Base_SetConfig+0xbc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d003      	beq.n	8002436 <TIM_Base_SetConfig+0x62>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a18      	ldr	r2, [pc, #96]	; (8002494 <TIM_Base_SetConfig+0xc0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d108      	bne.n	8002448 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <TIM_Base_SetConfig+0xb8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d103      	bne.n	800247c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	615a      	str	r2, [r3, #20]
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800

08002498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f023 0201 	bic.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f023 0302 	bic.w	r3, r3, #2
 80024e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <TIM_OC1_SetConfig+0xc8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d10c      	bne.n	800250e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f023 0308 	bic.w	r3, r3, #8
 80024fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f023 0304 	bic.w	r3, r3, #4
 800250c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a13      	ldr	r2, [pc, #76]	; (8002560 <TIM_OC1_SetConfig+0xc8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d111      	bne.n	800253a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800251c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	621a      	str	r2, [r3, #32]
}
 8002554:	bf00      	nop
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40012c00 	.word	0x40012c00

08002564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f023 0210 	bic.w	r2, r3, #16
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800259a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f023 0320 	bic.w	r3, r3, #32
 80025ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <TIM_OC2_SetConfig+0xd0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10d      	bne.n	80025e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a14      	ldr	r2, [pc, #80]	; (8002634 <TIM_OC2_SetConfig+0xd0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d113      	bne.n	8002610 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	621a      	str	r2, [r3, #32]
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	40012c00 	.word	0x40012c00

08002638 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <TIM_OC3_SetConfig+0xd0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d10d      	bne.n	80026b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800269c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <TIM_OC3_SetConfig+0xd0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d113      	bne.n	80026e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	621a      	str	r2, [r3, #32]
}
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40012c00 	.word	0x40012c00

0800270c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800273a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	031b      	lsls	r3, r3, #12
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a0f      	ldr	r2, [pc, #60]	; (80027a4 <TIM_OC4_SetConfig+0x98>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d109      	bne.n	8002780 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	621a      	str	r2, [r3, #32]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012c00 	.word	0x40012c00

080027a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2201      	movs	r2, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	401a      	ands	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1a      	ldr	r2, [r3, #32]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	621a      	str	r2, [r3, #32]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002804:	2302      	movs	r3, #2
 8002806:	e046      	b.n	8002896 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a16      	ldr	r2, [pc, #88]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00e      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d009      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10c      	bne.n	8002884 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4313      	orrs	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40012c00 	.word	0x40012c00
 80028a4:	40000400 	.word	0x40000400
 80028a8:	40000800 	.word	0x40000800

080028ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e042      	b.n	8002968 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fd ff12 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2224      	movs	r2, #36	; 0x24
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fb89 	bl	800302c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b20      	cmp	r3, #32
 800298e:	d16d      	bne.n	8002a6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_UART_Transmit+0x2c>
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e066      	b.n	8002a6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2221      	movs	r2, #33	; 0x21
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ae:	f7fe f821 	bl	80009f4 <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d108      	bne.n	80029dc <HAL_UART_Transmit+0x6c>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e003      	b.n	80029e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029e4:	e02a      	b.n	8002a3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 f989 	bl	8002d08 <UART_WaitOnFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e036      	b.n	8002a6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10b      	bne.n	8002a1e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	3302      	adds	r3, #2
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e007      	b.n	8002a2e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1cf      	bne.n	80029e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2140      	movs	r1, #64	; 0x40
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f959 	bl	8002d08 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e006      	b.n	8002a6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a6c:	2302      	movs	r3, #2
  }
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3720      	adds	r7, #32
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b084      	sub	sp, #16
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	4613      	mov	r3, r2
 8002a82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d112      	bne.n	8002ab6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_UART_Receive_DMA+0x26>
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e00b      	b.n	8002ab8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f999 	bl	8002de4 <UART_Start_Receive_DMA>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	e000      	b.n	8002ab8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
  }
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b09c      	sub	sp, #112	; 0x70
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d172      	bne.n	8002c0e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b4e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b50:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e5      	bne.n	8002b2e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3314      	adds	r3, #20
 8002b68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	667b      	str	r3, [r7, #100]	; 0x64
 8002b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b82:	647a      	str	r2, [r7, #68]	; 0x44
 8002b84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e5      	bne.n	8002b62 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	3314      	adds	r3, #20
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bac:	663b      	str	r3, [r7, #96]	; 0x60
 8002bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3314      	adds	r3, #20
 8002bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bb6:	633a      	str	r2, [r7, #48]	; 0x30
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bbe:	e841 2300 	strex	r3, r2, [r1]
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1e5      	bne.n	8002b96 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d119      	bne.n	8002c0e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	330c      	adds	r3, #12
 8002be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	e853 3f00 	ldrex	r3, [r3]
 8002be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f023 0310 	bic.w	r3, r3, #16
 8002bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	330c      	adds	r3, #12
 8002bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bfa:	61fa      	str	r2, [r7, #28]
 8002bfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfe:	69b9      	ldr	r1, [r7, #24]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	e841 2300 	strex	r3, r2, [r1]
 8002c06:	617b      	str	r3, [r7, #20]
   return(result);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e5      	bne.n	8002bda <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c10:	2200      	movs	r2, #0
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c20:	4619      	mov	r1, r3
 8002c22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002c24:	f7ff ff67 	bl	8002af6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c28:	e002      	b.n	8002c30 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002c2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002c2c:	f7ff ff48 	bl	8002ac0 <HAL_UART_RxCpltCallback>
}
 8002c30:	bf00      	nop
 8002c32:	3770      	adds	r7, #112	; 0x70
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff ff49 	bl	8002af6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c64:	e002      	b.n	8002c6c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff ff33 	bl	8002ad2 <HAL_UART_RxHalfCpltCallback>
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf14      	ite	ne
 8002c94:	2301      	movne	r3, #1
 8002c96:	2300      	moveq	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b21      	cmp	r3, #33	; 0x21
 8002ca6:	d108      	bne.n	8002cba <UART_DMAError+0x46>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002cb4:	68b8      	ldr	r0, [r7, #8]
 8002cb6:	f000 f92f 	bl	8002f18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b22      	cmp	r3, #34	; 0x22
 8002cda:	d108      	bne.n	8002cee <UART_DMAError+0x7a>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ce8:	68b8      	ldr	r0, [r7, #8]
 8002cea:	f000 f93c 	bl	8002f66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	f043 0210 	orr.w	r2, r3, #16
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cfa:	68b8      	ldr	r0, [r7, #8]
 8002cfc:	f7ff fef2 	bl	8002ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b090      	sub	sp, #64	; 0x40
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d18:	e050      	b.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d20:	d04c      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d28:	f7fd fe64 	bl	80009f4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d241      	bcs.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d58:	637a      	str	r2, [r7, #52]	; 0x34
 8002d5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3314      	adds	r3, #20
 8002d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	e853 3f00 	ldrex	r3, [r3]
 8002d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d8c:	623a      	str	r2, [r7, #32]
 8002d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	69f9      	ldr	r1, [r7, #28]
 8002d92:	6a3a      	ldr	r2, [r7, #32]
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e5      	bne.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e00f      	b.n	8002ddc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d09f      	beq.n	8002d1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3740      	adds	r7, #64	; 0x40
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b098      	sub	sp, #96	; 0x60
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	88fa      	ldrh	r2, [r7, #6]
 8002dfc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2222      	movs	r2, #34	; 0x22
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	4a3e      	ldr	r2, [pc, #248]	; (8002f0c <UART_Start_Receive_DMA+0x128>)
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	4a3d      	ldr	r2, [pc, #244]	; (8002f10 <UART_Start_Receive_DMA+0x12c>)
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	4a3c      	ldr	r2, [pc, #240]	; (8002f14 <UART_Start_Receive_DMA+0x130>)
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	2200      	movs	r2, #0
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002e2c:	f107 0308 	add.w	r3, r7, #8
 8002e30:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	f7fd ff6c 	bl	8000d20 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d019      	beq.n	8002e9a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e86:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e8e:	e841 2300 	strex	r3, r2, [r1]
 8002e92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e5      	bne.n	8002e66 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	e853 3f00 	ldrex	r3, [r3]
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eba:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ebc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e5      	bne.n	8002e9a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3314      	adds	r3, #20
 8002ed4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3314      	adds	r3, #20
 8002eec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eee:	627a      	str	r2, [r7, #36]	; 0x24
 8002ef0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef2:	6a39      	ldr	r1, [r7, #32]
 8002ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1e5      	bne.n	8002ece <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3760      	adds	r7, #96	; 0x60
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	08002b0d 	.word	0x08002b0d
 8002f10:	08002c39 	.word	0x08002c39
 8002f14:	08002c75 	.word	0x08002c75

08002f18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	330c      	adds	r3, #12
 8002f26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	e853 3f00 	ldrex	r3, [r3]
 8002f2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	61ba      	str	r2, [r7, #24]
 8002f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f44:	6979      	ldr	r1, [r7, #20]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	e841 2300 	strex	r3, r2, [r1]
 8002f4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e5      	bne.n	8002f20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002f5c:	bf00      	nop
 8002f5e:	3724      	adds	r7, #36	; 0x24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b095      	sub	sp, #84	; 0x54
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f8e:	643a      	str	r2, [r7, #64]	; 0x40
 8002f90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3314      	adds	r3, #20
 8002fa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3314      	adds	r3, #20
 8002fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e5      	bne.n	8002fa2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d119      	bne.n	8003012 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f023 0310 	bic.w	r3, r3, #16
 8002ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ffe:	61ba      	str	r2, [r7, #24]
 8003000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003002:	6979      	ldr	r1, [r7, #20]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	613b      	str	r3, [r7, #16]
   return(result);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e5      	bne.n	8002fde <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003020:	bf00      	nop
 8003022:	3754      	adds	r7, #84	; 0x54
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr
	...

0800302c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003066:	f023 030c 	bic.w	r3, r3, #12
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	430b      	orrs	r3, r1
 8003072:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <UART_SetConfig+0x114>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d103      	bne.n	800309c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7fe fd52 	bl	8001b3c <HAL_RCC_GetPCLK2Freq>
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	e002      	b.n	80030a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800309c:	f7fe fd3a 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 80030a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009a      	lsls	r2, r3, #2
 80030ac:	441a      	add	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b8:	4a22      	ldr	r2, [pc, #136]	; (8003144 <UART_SetConfig+0x118>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	0119      	lsls	r1, r3, #4
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009a      	lsls	r2, r3, #2
 80030cc:	441a      	add	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d8:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <UART_SetConfig+0x118>)
 80030da:	fba3 0302 	umull	r0, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2064      	movs	r0, #100	; 0x64
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	3332      	adds	r3, #50	; 0x32
 80030ec:	4a15      	ldr	r2, [pc, #84]	; (8003144 <UART_SetConfig+0x118>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f8:	4419      	add	r1, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009a      	lsls	r2, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <UART_SetConfig+0x118>)
 8003112:	fba3 0302 	umull	r0, r3, r3, r2
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2064      	movs	r0, #100	; 0x64
 800311a:	fb00 f303 	mul.w	r3, r0, r3
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	3332      	adds	r3, #50	; 0x32
 8003124:	4a07      	ldr	r2, [pc, #28]	; (8003144 <UART_SetConfig+0x118>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	440a      	add	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40013800 	.word	0x40013800
 8003144:	51eb851f 	.word	0x51eb851f

08003148 <siprintf>:
 8003148:	b40e      	push	{r1, r2, r3}
 800314a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800314e:	b500      	push	{lr}
 8003150:	b09c      	sub	sp, #112	; 0x70
 8003152:	ab1d      	add	r3, sp, #116	; 0x74
 8003154:	9002      	str	r0, [sp, #8]
 8003156:	9006      	str	r0, [sp, #24]
 8003158:	9107      	str	r1, [sp, #28]
 800315a:	9104      	str	r1, [sp, #16]
 800315c:	4808      	ldr	r0, [pc, #32]	; (8003180 <siprintf+0x38>)
 800315e:	4909      	ldr	r1, [pc, #36]	; (8003184 <siprintf+0x3c>)
 8003160:	f853 2b04 	ldr.w	r2, [r3], #4
 8003164:	9105      	str	r1, [sp, #20]
 8003166:	6800      	ldr	r0, [r0, #0]
 8003168:	a902      	add	r1, sp, #8
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	f000 f98e 	bl	800348c <_svfiprintf_r>
 8003170:	2200      	movs	r2, #0
 8003172:	9b02      	ldr	r3, [sp, #8]
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	b01c      	add	sp, #112	; 0x70
 8003178:	f85d eb04 	ldr.w	lr, [sp], #4
 800317c:	b003      	add	sp, #12
 800317e:	4770      	bx	lr
 8003180:	20000058 	.word	0x20000058
 8003184:	ffff0208 	.word	0xffff0208

08003188 <memset>:
 8003188:	4603      	mov	r3, r0
 800318a:	4402      	add	r2, r0
 800318c:	4293      	cmp	r3, r2
 800318e:	d100      	bne.n	8003192 <memset+0xa>
 8003190:	4770      	bx	lr
 8003192:	f803 1b01 	strb.w	r1, [r3], #1
 8003196:	e7f9      	b.n	800318c <memset+0x4>

08003198 <__errno>:
 8003198:	4b01      	ldr	r3, [pc, #4]	; (80031a0 <__errno+0x8>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000058 	.word	0x20000058

080031a4 <__libc_init_array>:
 80031a4:	b570      	push	{r4, r5, r6, lr}
 80031a6:	2600      	movs	r6, #0
 80031a8:	4d0c      	ldr	r5, [pc, #48]	; (80031dc <__libc_init_array+0x38>)
 80031aa:	4c0d      	ldr	r4, [pc, #52]	; (80031e0 <__libc_init_array+0x3c>)
 80031ac:	1b64      	subs	r4, r4, r5
 80031ae:	10a4      	asrs	r4, r4, #2
 80031b0:	42a6      	cmp	r6, r4
 80031b2:	d109      	bne.n	80031c8 <__libc_init_array+0x24>
 80031b4:	f000 fc7a 	bl	8003aac <_init>
 80031b8:	2600      	movs	r6, #0
 80031ba:	4d0a      	ldr	r5, [pc, #40]	; (80031e4 <__libc_init_array+0x40>)
 80031bc:	4c0a      	ldr	r4, [pc, #40]	; (80031e8 <__libc_init_array+0x44>)
 80031be:	1b64      	subs	r4, r4, r5
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	42a6      	cmp	r6, r4
 80031c4:	d105      	bne.n	80031d2 <__libc_init_array+0x2e>
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80031cc:	4798      	blx	r3
 80031ce:	3601      	adds	r6, #1
 80031d0:	e7ee      	b.n	80031b0 <__libc_init_array+0xc>
 80031d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031d6:	4798      	blx	r3
 80031d8:	3601      	adds	r6, #1
 80031da:	e7f2      	b.n	80031c2 <__libc_init_array+0x1e>
 80031dc:	08003b2c 	.word	0x08003b2c
 80031e0:	08003b2c 	.word	0x08003b2c
 80031e4:	08003b2c 	.word	0x08003b2c
 80031e8:	08003b30 	.word	0x08003b30

080031ec <__retarget_lock_acquire_recursive>:
 80031ec:	4770      	bx	lr

080031ee <__retarget_lock_release_recursive>:
 80031ee:	4770      	bx	lr

080031f0 <_free_r>:
 80031f0:	b538      	push	{r3, r4, r5, lr}
 80031f2:	4605      	mov	r5, r0
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d040      	beq.n	800327a <_free_r+0x8a>
 80031f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031fc:	1f0c      	subs	r4, r1, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bfb8      	it	lt
 8003202:	18e4      	addlt	r4, r4, r3
 8003204:	f000 f8dc 	bl	80033c0 <__malloc_lock>
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <_free_r+0x8c>)
 800320a:	6813      	ldr	r3, [r2, #0]
 800320c:	b933      	cbnz	r3, 800321c <_free_r+0x2c>
 800320e:	6063      	str	r3, [r4, #4]
 8003210:	6014      	str	r4, [r2, #0]
 8003212:	4628      	mov	r0, r5
 8003214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003218:	f000 b8d8 	b.w	80033cc <__malloc_unlock>
 800321c:	42a3      	cmp	r3, r4
 800321e:	d908      	bls.n	8003232 <_free_r+0x42>
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	1821      	adds	r1, r4, r0
 8003224:	428b      	cmp	r3, r1
 8003226:	bf01      	itttt	eq
 8003228:	6819      	ldreq	r1, [r3, #0]
 800322a:	685b      	ldreq	r3, [r3, #4]
 800322c:	1809      	addeq	r1, r1, r0
 800322e:	6021      	streq	r1, [r4, #0]
 8003230:	e7ed      	b.n	800320e <_free_r+0x1e>
 8003232:	461a      	mov	r2, r3
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	b10b      	cbz	r3, 800323c <_free_r+0x4c>
 8003238:	42a3      	cmp	r3, r4
 800323a:	d9fa      	bls.n	8003232 <_free_r+0x42>
 800323c:	6811      	ldr	r1, [r2, #0]
 800323e:	1850      	adds	r0, r2, r1
 8003240:	42a0      	cmp	r0, r4
 8003242:	d10b      	bne.n	800325c <_free_r+0x6c>
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	4401      	add	r1, r0
 8003248:	1850      	adds	r0, r2, r1
 800324a:	4283      	cmp	r3, r0
 800324c:	6011      	str	r1, [r2, #0]
 800324e:	d1e0      	bne.n	8003212 <_free_r+0x22>
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4408      	add	r0, r1
 8003256:	6010      	str	r0, [r2, #0]
 8003258:	6053      	str	r3, [r2, #4]
 800325a:	e7da      	b.n	8003212 <_free_r+0x22>
 800325c:	d902      	bls.n	8003264 <_free_r+0x74>
 800325e:	230c      	movs	r3, #12
 8003260:	602b      	str	r3, [r5, #0]
 8003262:	e7d6      	b.n	8003212 <_free_r+0x22>
 8003264:	6820      	ldr	r0, [r4, #0]
 8003266:	1821      	adds	r1, r4, r0
 8003268:	428b      	cmp	r3, r1
 800326a:	bf01      	itttt	eq
 800326c:	6819      	ldreq	r1, [r3, #0]
 800326e:	685b      	ldreq	r3, [r3, #4]
 8003270:	1809      	addeq	r1, r1, r0
 8003272:	6021      	streq	r1, [r4, #0]
 8003274:	6063      	str	r3, [r4, #4]
 8003276:	6054      	str	r4, [r2, #4]
 8003278:	e7cb      	b.n	8003212 <_free_r+0x22>
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	200002dc 	.word	0x200002dc

08003280 <sbrk_aligned>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4e0e      	ldr	r6, [pc, #56]	; (80032bc <sbrk_aligned+0x3c>)
 8003284:	460c      	mov	r4, r1
 8003286:	6831      	ldr	r1, [r6, #0]
 8003288:	4605      	mov	r5, r0
 800328a:	b911      	cbnz	r1, 8003292 <sbrk_aligned+0x12>
 800328c:	f000 fbaa 	bl	80039e4 <_sbrk_r>
 8003290:	6030      	str	r0, [r6, #0]
 8003292:	4621      	mov	r1, r4
 8003294:	4628      	mov	r0, r5
 8003296:	f000 fba5 	bl	80039e4 <_sbrk_r>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	d00a      	beq.n	80032b4 <sbrk_aligned+0x34>
 800329e:	1cc4      	adds	r4, r0, #3
 80032a0:	f024 0403 	bic.w	r4, r4, #3
 80032a4:	42a0      	cmp	r0, r4
 80032a6:	d007      	beq.n	80032b8 <sbrk_aligned+0x38>
 80032a8:	1a21      	subs	r1, r4, r0
 80032aa:	4628      	mov	r0, r5
 80032ac:	f000 fb9a 	bl	80039e4 <_sbrk_r>
 80032b0:	3001      	adds	r0, #1
 80032b2:	d101      	bne.n	80032b8 <sbrk_aligned+0x38>
 80032b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80032b8:	4620      	mov	r0, r4
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	200002e0 	.word	0x200002e0

080032c0 <_malloc_r>:
 80032c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032c4:	1ccd      	adds	r5, r1, #3
 80032c6:	f025 0503 	bic.w	r5, r5, #3
 80032ca:	3508      	adds	r5, #8
 80032cc:	2d0c      	cmp	r5, #12
 80032ce:	bf38      	it	cc
 80032d0:	250c      	movcc	r5, #12
 80032d2:	2d00      	cmp	r5, #0
 80032d4:	4607      	mov	r7, r0
 80032d6:	db01      	blt.n	80032dc <_malloc_r+0x1c>
 80032d8:	42a9      	cmp	r1, r5
 80032da:	d905      	bls.n	80032e8 <_malloc_r+0x28>
 80032dc:	230c      	movs	r3, #12
 80032de:	2600      	movs	r6, #0
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	4630      	mov	r0, r6
 80032e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80033bc <_malloc_r+0xfc>
 80032ec:	f000 f868 	bl	80033c0 <__malloc_lock>
 80032f0:	f8d8 3000 	ldr.w	r3, [r8]
 80032f4:	461c      	mov	r4, r3
 80032f6:	bb5c      	cbnz	r4, 8003350 <_malloc_r+0x90>
 80032f8:	4629      	mov	r1, r5
 80032fa:	4638      	mov	r0, r7
 80032fc:	f7ff ffc0 	bl	8003280 <sbrk_aligned>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	4604      	mov	r4, r0
 8003304:	d155      	bne.n	80033b2 <_malloc_r+0xf2>
 8003306:	f8d8 4000 	ldr.w	r4, [r8]
 800330a:	4626      	mov	r6, r4
 800330c:	2e00      	cmp	r6, #0
 800330e:	d145      	bne.n	800339c <_malloc_r+0xdc>
 8003310:	2c00      	cmp	r4, #0
 8003312:	d048      	beq.n	80033a6 <_malloc_r+0xe6>
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	4631      	mov	r1, r6
 8003318:	4638      	mov	r0, r7
 800331a:	eb04 0903 	add.w	r9, r4, r3
 800331e:	f000 fb61 	bl	80039e4 <_sbrk_r>
 8003322:	4581      	cmp	r9, r0
 8003324:	d13f      	bne.n	80033a6 <_malloc_r+0xe6>
 8003326:	6821      	ldr	r1, [r4, #0]
 8003328:	4638      	mov	r0, r7
 800332a:	1a6d      	subs	r5, r5, r1
 800332c:	4629      	mov	r1, r5
 800332e:	f7ff ffa7 	bl	8003280 <sbrk_aligned>
 8003332:	3001      	adds	r0, #1
 8003334:	d037      	beq.n	80033a6 <_malloc_r+0xe6>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	442b      	add	r3, r5
 800333a:	6023      	str	r3, [r4, #0]
 800333c:	f8d8 3000 	ldr.w	r3, [r8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d038      	beq.n	80033b6 <_malloc_r+0xf6>
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	42a2      	cmp	r2, r4
 8003348:	d12b      	bne.n	80033a2 <_malloc_r+0xe2>
 800334a:	2200      	movs	r2, #0
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	e00f      	b.n	8003370 <_malloc_r+0xb0>
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	1b52      	subs	r2, r2, r5
 8003354:	d41f      	bmi.n	8003396 <_malloc_r+0xd6>
 8003356:	2a0b      	cmp	r2, #11
 8003358:	d917      	bls.n	800338a <_malloc_r+0xca>
 800335a:	1961      	adds	r1, r4, r5
 800335c:	42a3      	cmp	r3, r4
 800335e:	6025      	str	r5, [r4, #0]
 8003360:	bf18      	it	ne
 8003362:	6059      	strne	r1, [r3, #4]
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	bf08      	it	eq
 8003368:	f8c8 1000 	streq.w	r1, [r8]
 800336c:	5162      	str	r2, [r4, r5]
 800336e:	604b      	str	r3, [r1, #4]
 8003370:	4638      	mov	r0, r7
 8003372:	f104 060b 	add.w	r6, r4, #11
 8003376:	f000 f829 	bl	80033cc <__malloc_unlock>
 800337a:	f026 0607 	bic.w	r6, r6, #7
 800337e:	1d23      	adds	r3, r4, #4
 8003380:	1af2      	subs	r2, r6, r3
 8003382:	d0ae      	beq.n	80032e2 <_malloc_r+0x22>
 8003384:	1b9b      	subs	r3, r3, r6
 8003386:	50a3      	str	r3, [r4, r2]
 8003388:	e7ab      	b.n	80032e2 <_malloc_r+0x22>
 800338a:	42a3      	cmp	r3, r4
 800338c:	6862      	ldr	r2, [r4, #4]
 800338e:	d1dd      	bne.n	800334c <_malloc_r+0x8c>
 8003390:	f8c8 2000 	str.w	r2, [r8]
 8003394:	e7ec      	b.n	8003370 <_malloc_r+0xb0>
 8003396:	4623      	mov	r3, r4
 8003398:	6864      	ldr	r4, [r4, #4]
 800339a:	e7ac      	b.n	80032f6 <_malloc_r+0x36>
 800339c:	4634      	mov	r4, r6
 800339e:	6876      	ldr	r6, [r6, #4]
 80033a0:	e7b4      	b.n	800330c <_malloc_r+0x4c>
 80033a2:	4613      	mov	r3, r2
 80033a4:	e7cc      	b.n	8003340 <_malloc_r+0x80>
 80033a6:	230c      	movs	r3, #12
 80033a8:	4638      	mov	r0, r7
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	f000 f80e 	bl	80033cc <__malloc_unlock>
 80033b0:	e797      	b.n	80032e2 <_malloc_r+0x22>
 80033b2:	6025      	str	r5, [r4, #0]
 80033b4:	e7dc      	b.n	8003370 <_malloc_r+0xb0>
 80033b6:	605b      	str	r3, [r3, #4]
 80033b8:	deff      	udf	#255	; 0xff
 80033ba:	bf00      	nop
 80033bc:	200002dc 	.word	0x200002dc

080033c0 <__malloc_lock>:
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <__malloc_lock+0x8>)
 80033c2:	f7ff bf13 	b.w	80031ec <__retarget_lock_acquire_recursive>
 80033c6:	bf00      	nop
 80033c8:	200002d8 	.word	0x200002d8

080033cc <__malloc_unlock>:
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <__malloc_unlock+0x8>)
 80033ce:	f7ff bf0e 	b.w	80031ee <__retarget_lock_release_recursive>
 80033d2:	bf00      	nop
 80033d4:	200002d8 	.word	0x200002d8

080033d8 <__ssputs_r>:
 80033d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033dc:	461f      	mov	r7, r3
 80033de:	688e      	ldr	r6, [r1, #8]
 80033e0:	4682      	mov	sl, r0
 80033e2:	42be      	cmp	r6, r7
 80033e4:	460c      	mov	r4, r1
 80033e6:	4690      	mov	r8, r2
 80033e8:	680b      	ldr	r3, [r1, #0]
 80033ea:	d82c      	bhi.n	8003446 <__ssputs_r+0x6e>
 80033ec:	898a      	ldrh	r2, [r1, #12]
 80033ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033f2:	d026      	beq.n	8003442 <__ssputs_r+0x6a>
 80033f4:	6965      	ldr	r5, [r4, #20]
 80033f6:	6909      	ldr	r1, [r1, #16]
 80033f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033fc:	eba3 0901 	sub.w	r9, r3, r1
 8003400:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003404:	1c7b      	adds	r3, r7, #1
 8003406:	444b      	add	r3, r9
 8003408:	106d      	asrs	r5, r5, #1
 800340a:	429d      	cmp	r5, r3
 800340c:	bf38      	it	cc
 800340e:	461d      	movcc	r5, r3
 8003410:	0553      	lsls	r3, r2, #21
 8003412:	d527      	bpl.n	8003464 <__ssputs_r+0x8c>
 8003414:	4629      	mov	r1, r5
 8003416:	f7ff ff53 	bl	80032c0 <_malloc_r>
 800341a:	4606      	mov	r6, r0
 800341c:	b360      	cbz	r0, 8003478 <__ssputs_r+0xa0>
 800341e:	464a      	mov	r2, r9
 8003420:	6921      	ldr	r1, [r4, #16]
 8003422:	f000 fafd 	bl	8003a20 <memcpy>
 8003426:	89a3      	ldrh	r3, [r4, #12]
 8003428:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800342c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003430:	81a3      	strh	r3, [r4, #12]
 8003432:	6126      	str	r6, [r4, #16]
 8003434:	444e      	add	r6, r9
 8003436:	6026      	str	r6, [r4, #0]
 8003438:	463e      	mov	r6, r7
 800343a:	6165      	str	r5, [r4, #20]
 800343c:	eba5 0509 	sub.w	r5, r5, r9
 8003440:	60a5      	str	r5, [r4, #8]
 8003442:	42be      	cmp	r6, r7
 8003444:	d900      	bls.n	8003448 <__ssputs_r+0x70>
 8003446:	463e      	mov	r6, r7
 8003448:	4632      	mov	r2, r6
 800344a:	4641      	mov	r1, r8
 800344c:	6820      	ldr	r0, [r4, #0]
 800344e:	f000 faaf 	bl	80039b0 <memmove>
 8003452:	2000      	movs	r0, #0
 8003454:	68a3      	ldr	r3, [r4, #8]
 8003456:	1b9b      	subs	r3, r3, r6
 8003458:	60a3      	str	r3, [r4, #8]
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	4433      	add	r3, r6
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003464:	462a      	mov	r2, r5
 8003466:	f000 fae9 	bl	8003a3c <_realloc_r>
 800346a:	4606      	mov	r6, r0
 800346c:	2800      	cmp	r0, #0
 800346e:	d1e0      	bne.n	8003432 <__ssputs_r+0x5a>
 8003470:	4650      	mov	r0, sl
 8003472:	6921      	ldr	r1, [r4, #16]
 8003474:	f7ff febc 	bl	80031f0 <_free_r>
 8003478:	230c      	movs	r3, #12
 800347a:	f8ca 3000 	str.w	r3, [sl]
 800347e:	89a3      	ldrh	r3, [r4, #12]
 8003480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003488:	81a3      	strh	r3, [r4, #12]
 800348a:	e7e9      	b.n	8003460 <__ssputs_r+0x88>

0800348c <_svfiprintf_r>:
 800348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003490:	4698      	mov	r8, r3
 8003492:	898b      	ldrh	r3, [r1, #12]
 8003494:	4607      	mov	r7, r0
 8003496:	061b      	lsls	r3, r3, #24
 8003498:	460d      	mov	r5, r1
 800349a:	4614      	mov	r4, r2
 800349c:	b09d      	sub	sp, #116	; 0x74
 800349e:	d50e      	bpl.n	80034be <_svfiprintf_r+0x32>
 80034a0:	690b      	ldr	r3, [r1, #16]
 80034a2:	b963      	cbnz	r3, 80034be <_svfiprintf_r+0x32>
 80034a4:	2140      	movs	r1, #64	; 0x40
 80034a6:	f7ff ff0b 	bl	80032c0 <_malloc_r>
 80034aa:	6028      	str	r0, [r5, #0]
 80034ac:	6128      	str	r0, [r5, #16]
 80034ae:	b920      	cbnz	r0, 80034ba <_svfiprintf_r+0x2e>
 80034b0:	230c      	movs	r3, #12
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034b8:	e0d0      	b.n	800365c <_svfiprintf_r+0x1d0>
 80034ba:	2340      	movs	r3, #64	; 0x40
 80034bc:	616b      	str	r3, [r5, #20]
 80034be:	2300      	movs	r3, #0
 80034c0:	9309      	str	r3, [sp, #36]	; 0x24
 80034c2:	2320      	movs	r3, #32
 80034c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034c8:	2330      	movs	r3, #48	; 0x30
 80034ca:	f04f 0901 	mov.w	r9, #1
 80034ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80034d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003674 <_svfiprintf_r+0x1e8>
 80034d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034da:	4623      	mov	r3, r4
 80034dc:	469a      	mov	sl, r3
 80034de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034e2:	b10a      	cbz	r2, 80034e8 <_svfiprintf_r+0x5c>
 80034e4:	2a25      	cmp	r2, #37	; 0x25
 80034e6:	d1f9      	bne.n	80034dc <_svfiprintf_r+0x50>
 80034e8:	ebba 0b04 	subs.w	fp, sl, r4
 80034ec:	d00b      	beq.n	8003506 <_svfiprintf_r+0x7a>
 80034ee:	465b      	mov	r3, fp
 80034f0:	4622      	mov	r2, r4
 80034f2:	4629      	mov	r1, r5
 80034f4:	4638      	mov	r0, r7
 80034f6:	f7ff ff6f 	bl	80033d8 <__ssputs_r>
 80034fa:	3001      	adds	r0, #1
 80034fc:	f000 80a9 	beq.w	8003652 <_svfiprintf_r+0x1c6>
 8003500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003502:	445a      	add	r2, fp
 8003504:	9209      	str	r2, [sp, #36]	; 0x24
 8003506:	f89a 3000 	ldrb.w	r3, [sl]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80a1 	beq.w	8003652 <_svfiprintf_r+0x1c6>
 8003510:	2300      	movs	r3, #0
 8003512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003516:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800351a:	f10a 0a01 	add.w	sl, sl, #1
 800351e:	9304      	str	r3, [sp, #16]
 8003520:	9307      	str	r3, [sp, #28]
 8003522:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003526:	931a      	str	r3, [sp, #104]	; 0x68
 8003528:	4654      	mov	r4, sl
 800352a:	2205      	movs	r2, #5
 800352c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003530:	4850      	ldr	r0, [pc, #320]	; (8003674 <_svfiprintf_r+0x1e8>)
 8003532:	f000 fa67 	bl	8003a04 <memchr>
 8003536:	9a04      	ldr	r2, [sp, #16]
 8003538:	b9d8      	cbnz	r0, 8003572 <_svfiprintf_r+0xe6>
 800353a:	06d0      	lsls	r0, r2, #27
 800353c:	bf44      	itt	mi
 800353e:	2320      	movmi	r3, #32
 8003540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003544:	0711      	lsls	r1, r2, #28
 8003546:	bf44      	itt	mi
 8003548:	232b      	movmi	r3, #43	; 0x2b
 800354a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800354e:	f89a 3000 	ldrb.w	r3, [sl]
 8003552:	2b2a      	cmp	r3, #42	; 0x2a
 8003554:	d015      	beq.n	8003582 <_svfiprintf_r+0xf6>
 8003556:	4654      	mov	r4, sl
 8003558:	2000      	movs	r0, #0
 800355a:	f04f 0c0a 	mov.w	ip, #10
 800355e:	9a07      	ldr	r2, [sp, #28]
 8003560:	4621      	mov	r1, r4
 8003562:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003566:	3b30      	subs	r3, #48	; 0x30
 8003568:	2b09      	cmp	r3, #9
 800356a:	d94d      	bls.n	8003608 <_svfiprintf_r+0x17c>
 800356c:	b1b0      	cbz	r0, 800359c <_svfiprintf_r+0x110>
 800356e:	9207      	str	r2, [sp, #28]
 8003570:	e014      	b.n	800359c <_svfiprintf_r+0x110>
 8003572:	eba0 0308 	sub.w	r3, r0, r8
 8003576:	fa09 f303 	lsl.w	r3, r9, r3
 800357a:	4313      	orrs	r3, r2
 800357c:	46a2      	mov	sl, r4
 800357e:	9304      	str	r3, [sp, #16]
 8003580:	e7d2      	b.n	8003528 <_svfiprintf_r+0x9c>
 8003582:	9b03      	ldr	r3, [sp, #12]
 8003584:	1d19      	adds	r1, r3, #4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	9103      	str	r1, [sp, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	bfbb      	ittet	lt
 800358e:	425b      	neglt	r3, r3
 8003590:	f042 0202 	orrlt.w	r2, r2, #2
 8003594:	9307      	strge	r3, [sp, #28]
 8003596:	9307      	strlt	r3, [sp, #28]
 8003598:	bfb8      	it	lt
 800359a:	9204      	strlt	r2, [sp, #16]
 800359c:	7823      	ldrb	r3, [r4, #0]
 800359e:	2b2e      	cmp	r3, #46	; 0x2e
 80035a0:	d10c      	bne.n	80035bc <_svfiprintf_r+0x130>
 80035a2:	7863      	ldrb	r3, [r4, #1]
 80035a4:	2b2a      	cmp	r3, #42	; 0x2a
 80035a6:	d134      	bne.n	8003612 <_svfiprintf_r+0x186>
 80035a8:	9b03      	ldr	r3, [sp, #12]
 80035aa:	3402      	adds	r4, #2
 80035ac:	1d1a      	adds	r2, r3, #4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	9203      	str	r2, [sp, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bfb8      	it	lt
 80035b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80035ba:	9305      	str	r3, [sp, #20]
 80035bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003678 <_svfiprintf_r+0x1ec>
 80035c0:	2203      	movs	r2, #3
 80035c2:	4650      	mov	r0, sl
 80035c4:	7821      	ldrb	r1, [r4, #0]
 80035c6:	f000 fa1d 	bl	8003a04 <memchr>
 80035ca:	b138      	cbz	r0, 80035dc <_svfiprintf_r+0x150>
 80035cc:	2240      	movs	r2, #64	; 0x40
 80035ce:	9b04      	ldr	r3, [sp, #16]
 80035d0:	eba0 000a 	sub.w	r0, r0, sl
 80035d4:	4082      	lsls	r2, r0
 80035d6:	4313      	orrs	r3, r2
 80035d8:	3401      	adds	r4, #1
 80035da:	9304      	str	r3, [sp, #16]
 80035dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e0:	2206      	movs	r2, #6
 80035e2:	4826      	ldr	r0, [pc, #152]	; (800367c <_svfiprintf_r+0x1f0>)
 80035e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035e8:	f000 fa0c 	bl	8003a04 <memchr>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d038      	beq.n	8003662 <_svfiprintf_r+0x1d6>
 80035f0:	4b23      	ldr	r3, [pc, #140]	; (8003680 <_svfiprintf_r+0x1f4>)
 80035f2:	bb1b      	cbnz	r3, 800363c <_svfiprintf_r+0x1b0>
 80035f4:	9b03      	ldr	r3, [sp, #12]
 80035f6:	3307      	adds	r3, #7
 80035f8:	f023 0307 	bic.w	r3, r3, #7
 80035fc:	3308      	adds	r3, #8
 80035fe:	9303      	str	r3, [sp, #12]
 8003600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003602:	4433      	add	r3, r6
 8003604:	9309      	str	r3, [sp, #36]	; 0x24
 8003606:	e768      	b.n	80034da <_svfiprintf_r+0x4e>
 8003608:	460c      	mov	r4, r1
 800360a:	2001      	movs	r0, #1
 800360c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003610:	e7a6      	b.n	8003560 <_svfiprintf_r+0xd4>
 8003612:	2300      	movs	r3, #0
 8003614:	f04f 0c0a 	mov.w	ip, #10
 8003618:	4619      	mov	r1, r3
 800361a:	3401      	adds	r4, #1
 800361c:	9305      	str	r3, [sp, #20]
 800361e:	4620      	mov	r0, r4
 8003620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003624:	3a30      	subs	r2, #48	; 0x30
 8003626:	2a09      	cmp	r2, #9
 8003628:	d903      	bls.n	8003632 <_svfiprintf_r+0x1a6>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0c6      	beq.n	80035bc <_svfiprintf_r+0x130>
 800362e:	9105      	str	r1, [sp, #20]
 8003630:	e7c4      	b.n	80035bc <_svfiprintf_r+0x130>
 8003632:	4604      	mov	r4, r0
 8003634:	2301      	movs	r3, #1
 8003636:	fb0c 2101 	mla	r1, ip, r1, r2
 800363a:	e7f0      	b.n	800361e <_svfiprintf_r+0x192>
 800363c:	ab03      	add	r3, sp, #12
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	462a      	mov	r2, r5
 8003642:	4638      	mov	r0, r7
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <_svfiprintf_r+0x1f8>)
 8003646:	a904      	add	r1, sp, #16
 8003648:	f3af 8000 	nop.w
 800364c:	1c42      	adds	r2, r0, #1
 800364e:	4606      	mov	r6, r0
 8003650:	d1d6      	bne.n	8003600 <_svfiprintf_r+0x174>
 8003652:	89ab      	ldrh	r3, [r5, #12]
 8003654:	065b      	lsls	r3, r3, #25
 8003656:	f53f af2d 	bmi.w	80034b4 <_svfiprintf_r+0x28>
 800365a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800365c:	b01d      	add	sp, #116	; 0x74
 800365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003662:	ab03      	add	r3, sp, #12
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	462a      	mov	r2, r5
 8003668:	4638      	mov	r0, r7
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <_svfiprintf_r+0x1f8>)
 800366c:	a904      	add	r1, sp, #16
 800366e:	f000 f87d 	bl	800376c <_printf_i>
 8003672:	e7eb      	b.n	800364c <_svfiprintf_r+0x1c0>
 8003674:	08003af6 	.word	0x08003af6
 8003678:	08003afc 	.word	0x08003afc
 800367c:	08003b00 	.word	0x08003b00
 8003680:	00000000 	.word	0x00000000
 8003684:	080033d9 	.word	0x080033d9

08003688 <_printf_common>:
 8003688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800368c:	4616      	mov	r6, r2
 800368e:	4699      	mov	r9, r3
 8003690:	688a      	ldr	r2, [r1, #8]
 8003692:	690b      	ldr	r3, [r1, #16]
 8003694:	4607      	mov	r7, r0
 8003696:	4293      	cmp	r3, r2
 8003698:	bfb8      	it	lt
 800369a:	4613      	movlt	r3, r2
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036a2:	460c      	mov	r4, r1
 80036a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036a8:	b10a      	cbz	r2, 80036ae <_printf_common+0x26>
 80036aa:	3301      	adds	r3, #1
 80036ac:	6033      	str	r3, [r6, #0]
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	0699      	lsls	r1, r3, #26
 80036b2:	bf42      	ittt	mi
 80036b4:	6833      	ldrmi	r3, [r6, #0]
 80036b6:	3302      	addmi	r3, #2
 80036b8:	6033      	strmi	r3, [r6, #0]
 80036ba:	6825      	ldr	r5, [r4, #0]
 80036bc:	f015 0506 	ands.w	r5, r5, #6
 80036c0:	d106      	bne.n	80036d0 <_printf_common+0x48>
 80036c2:	f104 0a19 	add.w	sl, r4, #25
 80036c6:	68e3      	ldr	r3, [r4, #12]
 80036c8:	6832      	ldr	r2, [r6, #0]
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	42ab      	cmp	r3, r5
 80036ce:	dc2b      	bgt.n	8003728 <_printf_common+0xa0>
 80036d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036d4:	1e13      	subs	r3, r2, #0
 80036d6:	6822      	ldr	r2, [r4, #0]
 80036d8:	bf18      	it	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	0692      	lsls	r2, r2, #26
 80036de:	d430      	bmi.n	8003742 <_printf_common+0xba>
 80036e0:	4649      	mov	r1, r9
 80036e2:	4638      	mov	r0, r7
 80036e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e8:	47c0      	blx	r8
 80036ea:	3001      	adds	r0, #1
 80036ec:	d023      	beq.n	8003736 <_printf_common+0xae>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	6922      	ldr	r2, [r4, #16]
 80036f2:	f003 0306 	and.w	r3, r3, #6
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	bf14      	ite	ne
 80036fa:	2500      	movne	r5, #0
 80036fc:	6833      	ldreq	r3, [r6, #0]
 80036fe:	f04f 0600 	mov.w	r6, #0
 8003702:	bf08      	it	eq
 8003704:	68e5      	ldreq	r5, [r4, #12]
 8003706:	f104 041a 	add.w	r4, r4, #26
 800370a:	bf08      	it	eq
 800370c:	1aed      	subeq	r5, r5, r3
 800370e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003712:	bf08      	it	eq
 8003714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003718:	4293      	cmp	r3, r2
 800371a:	bfc4      	itt	gt
 800371c:	1a9b      	subgt	r3, r3, r2
 800371e:	18ed      	addgt	r5, r5, r3
 8003720:	42b5      	cmp	r5, r6
 8003722:	d11a      	bne.n	800375a <_printf_common+0xd2>
 8003724:	2000      	movs	r0, #0
 8003726:	e008      	b.n	800373a <_printf_common+0xb2>
 8003728:	2301      	movs	r3, #1
 800372a:	4652      	mov	r2, sl
 800372c:	4649      	mov	r1, r9
 800372e:	4638      	mov	r0, r7
 8003730:	47c0      	blx	r8
 8003732:	3001      	adds	r0, #1
 8003734:	d103      	bne.n	800373e <_printf_common+0xb6>
 8003736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800373a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373e:	3501      	adds	r5, #1
 8003740:	e7c1      	b.n	80036c6 <_printf_common+0x3e>
 8003742:	2030      	movs	r0, #48	; 0x30
 8003744:	18e1      	adds	r1, r4, r3
 8003746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003750:	4422      	add	r2, r4
 8003752:	3302      	adds	r3, #2
 8003754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003758:	e7c2      	b.n	80036e0 <_printf_common+0x58>
 800375a:	2301      	movs	r3, #1
 800375c:	4622      	mov	r2, r4
 800375e:	4649      	mov	r1, r9
 8003760:	4638      	mov	r0, r7
 8003762:	47c0      	blx	r8
 8003764:	3001      	adds	r0, #1
 8003766:	d0e6      	beq.n	8003736 <_printf_common+0xae>
 8003768:	3601      	adds	r6, #1
 800376a:	e7d9      	b.n	8003720 <_printf_common+0x98>

0800376c <_printf_i>:
 800376c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003770:	7e0f      	ldrb	r7, [r1, #24]
 8003772:	4691      	mov	r9, r2
 8003774:	2f78      	cmp	r7, #120	; 0x78
 8003776:	4680      	mov	r8, r0
 8003778:	460c      	mov	r4, r1
 800377a:	469a      	mov	sl, r3
 800377c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800377e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003782:	d807      	bhi.n	8003794 <_printf_i+0x28>
 8003784:	2f62      	cmp	r7, #98	; 0x62
 8003786:	d80a      	bhi.n	800379e <_printf_i+0x32>
 8003788:	2f00      	cmp	r7, #0
 800378a:	f000 80d5 	beq.w	8003938 <_printf_i+0x1cc>
 800378e:	2f58      	cmp	r7, #88	; 0x58
 8003790:	f000 80c1 	beq.w	8003916 <_printf_i+0x1aa>
 8003794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800379c:	e03a      	b.n	8003814 <_printf_i+0xa8>
 800379e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037a2:	2b15      	cmp	r3, #21
 80037a4:	d8f6      	bhi.n	8003794 <_printf_i+0x28>
 80037a6:	a101      	add	r1, pc, #4	; (adr r1, 80037ac <_printf_i+0x40>)
 80037a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037ac:	08003805 	.word	0x08003805
 80037b0:	08003819 	.word	0x08003819
 80037b4:	08003795 	.word	0x08003795
 80037b8:	08003795 	.word	0x08003795
 80037bc:	08003795 	.word	0x08003795
 80037c0:	08003795 	.word	0x08003795
 80037c4:	08003819 	.word	0x08003819
 80037c8:	08003795 	.word	0x08003795
 80037cc:	08003795 	.word	0x08003795
 80037d0:	08003795 	.word	0x08003795
 80037d4:	08003795 	.word	0x08003795
 80037d8:	0800391f 	.word	0x0800391f
 80037dc:	08003845 	.word	0x08003845
 80037e0:	080038d9 	.word	0x080038d9
 80037e4:	08003795 	.word	0x08003795
 80037e8:	08003795 	.word	0x08003795
 80037ec:	08003941 	.word	0x08003941
 80037f0:	08003795 	.word	0x08003795
 80037f4:	08003845 	.word	0x08003845
 80037f8:	08003795 	.word	0x08003795
 80037fc:	08003795 	.word	0x08003795
 8003800:	080038e1 	.word	0x080038e1
 8003804:	682b      	ldr	r3, [r5, #0]
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	602a      	str	r2, [r5, #0]
 800380c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003814:	2301      	movs	r3, #1
 8003816:	e0a0      	b.n	800395a <_printf_i+0x1ee>
 8003818:	6820      	ldr	r0, [r4, #0]
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	0607      	lsls	r7, r0, #24
 800381e:	f103 0104 	add.w	r1, r3, #4
 8003822:	6029      	str	r1, [r5, #0]
 8003824:	d501      	bpl.n	800382a <_printf_i+0xbe>
 8003826:	681e      	ldr	r6, [r3, #0]
 8003828:	e003      	b.n	8003832 <_printf_i+0xc6>
 800382a:	0646      	lsls	r6, r0, #25
 800382c:	d5fb      	bpl.n	8003826 <_printf_i+0xba>
 800382e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003832:	2e00      	cmp	r6, #0
 8003834:	da03      	bge.n	800383e <_printf_i+0xd2>
 8003836:	232d      	movs	r3, #45	; 0x2d
 8003838:	4276      	negs	r6, r6
 800383a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800383e:	230a      	movs	r3, #10
 8003840:	4859      	ldr	r0, [pc, #356]	; (80039a8 <_printf_i+0x23c>)
 8003842:	e012      	b.n	800386a <_printf_i+0xfe>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	6820      	ldr	r0, [r4, #0]
 8003848:	1d19      	adds	r1, r3, #4
 800384a:	6029      	str	r1, [r5, #0]
 800384c:	0605      	lsls	r5, r0, #24
 800384e:	d501      	bpl.n	8003854 <_printf_i+0xe8>
 8003850:	681e      	ldr	r6, [r3, #0]
 8003852:	e002      	b.n	800385a <_printf_i+0xee>
 8003854:	0641      	lsls	r1, r0, #25
 8003856:	d5fb      	bpl.n	8003850 <_printf_i+0xe4>
 8003858:	881e      	ldrh	r6, [r3, #0]
 800385a:	2f6f      	cmp	r7, #111	; 0x6f
 800385c:	bf0c      	ite	eq
 800385e:	2308      	moveq	r3, #8
 8003860:	230a      	movne	r3, #10
 8003862:	4851      	ldr	r0, [pc, #324]	; (80039a8 <_printf_i+0x23c>)
 8003864:	2100      	movs	r1, #0
 8003866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800386a:	6865      	ldr	r5, [r4, #4]
 800386c:	2d00      	cmp	r5, #0
 800386e:	bfa8      	it	ge
 8003870:	6821      	ldrge	r1, [r4, #0]
 8003872:	60a5      	str	r5, [r4, #8]
 8003874:	bfa4      	itt	ge
 8003876:	f021 0104 	bicge.w	r1, r1, #4
 800387a:	6021      	strge	r1, [r4, #0]
 800387c:	b90e      	cbnz	r6, 8003882 <_printf_i+0x116>
 800387e:	2d00      	cmp	r5, #0
 8003880:	d04b      	beq.n	800391a <_printf_i+0x1ae>
 8003882:	4615      	mov	r5, r2
 8003884:	fbb6 f1f3 	udiv	r1, r6, r3
 8003888:	fb03 6711 	mls	r7, r3, r1, r6
 800388c:	5dc7      	ldrb	r7, [r0, r7]
 800388e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003892:	4637      	mov	r7, r6
 8003894:	42bb      	cmp	r3, r7
 8003896:	460e      	mov	r6, r1
 8003898:	d9f4      	bls.n	8003884 <_printf_i+0x118>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d10b      	bne.n	80038b6 <_printf_i+0x14a>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	07de      	lsls	r6, r3, #31
 80038a2:	d508      	bpl.n	80038b6 <_printf_i+0x14a>
 80038a4:	6923      	ldr	r3, [r4, #16]
 80038a6:	6861      	ldr	r1, [r4, #4]
 80038a8:	4299      	cmp	r1, r3
 80038aa:	bfde      	ittt	le
 80038ac:	2330      	movle	r3, #48	; 0x30
 80038ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80038b6:	1b52      	subs	r2, r2, r5
 80038b8:	6122      	str	r2, [r4, #16]
 80038ba:	464b      	mov	r3, r9
 80038bc:	4621      	mov	r1, r4
 80038be:	4640      	mov	r0, r8
 80038c0:	f8cd a000 	str.w	sl, [sp]
 80038c4:	aa03      	add	r2, sp, #12
 80038c6:	f7ff fedf 	bl	8003688 <_printf_common>
 80038ca:	3001      	adds	r0, #1
 80038cc:	d14a      	bne.n	8003964 <_printf_i+0x1f8>
 80038ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d2:	b004      	add	sp, #16
 80038d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	f043 0320 	orr.w	r3, r3, #32
 80038de:	6023      	str	r3, [r4, #0]
 80038e0:	2778      	movs	r7, #120	; 0x78
 80038e2:	4832      	ldr	r0, [pc, #200]	; (80039ac <_printf_i+0x240>)
 80038e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	6829      	ldr	r1, [r5, #0]
 80038ec:	061f      	lsls	r7, r3, #24
 80038ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80038f2:	d402      	bmi.n	80038fa <_printf_i+0x18e>
 80038f4:	065f      	lsls	r7, r3, #25
 80038f6:	bf48      	it	mi
 80038f8:	b2b6      	uxthmi	r6, r6
 80038fa:	07df      	lsls	r7, r3, #31
 80038fc:	bf48      	it	mi
 80038fe:	f043 0320 	orrmi.w	r3, r3, #32
 8003902:	6029      	str	r1, [r5, #0]
 8003904:	bf48      	it	mi
 8003906:	6023      	strmi	r3, [r4, #0]
 8003908:	b91e      	cbnz	r6, 8003912 <_printf_i+0x1a6>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	f023 0320 	bic.w	r3, r3, #32
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	2310      	movs	r3, #16
 8003914:	e7a6      	b.n	8003864 <_printf_i+0xf8>
 8003916:	4824      	ldr	r0, [pc, #144]	; (80039a8 <_printf_i+0x23c>)
 8003918:	e7e4      	b.n	80038e4 <_printf_i+0x178>
 800391a:	4615      	mov	r5, r2
 800391c:	e7bd      	b.n	800389a <_printf_i+0x12e>
 800391e:	682b      	ldr	r3, [r5, #0]
 8003920:	6826      	ldr	r6, [r4, #0]
 8003922:	1d18      	adds	r0, r3, #4
 8003924:	6961      	ldr	r1, [r4, #20]
 8003926:	6028      	str	r0, [r5, #0]
 8003928:	0635      	lsls	r5, r6, #24
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	d501      	bpl.n	8003932 <_printf_i+0x1c6>
 800392e:	6019      	str	r1, [r3, #0]
 8003930:	e002      	b.n	8003938 <_printf_i+0x1cc>
 8003932:	0670      	lsls	r0, r6, #25
 8003934:	d5fb      	bpl.n	800392e <_printf_i+0x1c2>
 8003936:	8019      	strh	r1, [r3, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	4615      	mov	r5, r2
 800393c:	6123      	str	r3, [r4, #16]
 800393e:	e7bc      	b.n	80038ba <_printf_i+0x14e>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	2100      	movs	r1, #0
 8003944:	1d1a      	adds	r2, r3, #4
 8003946:	602a      	str	r2, [r5, #0]
 8003948:	681d      	ldr	r5, [r3, #0]
 800394a:	6862      	ldr	r2, [r4, #4]
 800394c:	4628      	mov	r0, r5
 800394e:	f000 f859 	bl	8003a04 <memchr>
 8003952:	b108      	cbz	r0, 8003958 <_printf_i+0x1ec>
 8003954:	1b40      	subs	r0, r0, r5
 8003956:	6060      	str	r0, [r4, #4]
 8003958:	6863      	ldr	r3, [r4, #4]
 800395a:	6123      	str	r3, [r4, #16]
 800395c:	2300      	movs	r3, #0
 800395e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003962:	e7aa      	b.n	80038ba <_printf_i+0x14e>
 8003964:	462a      	mov	r2, r5
 8003966:	4649      	mov	r1, r9
 8003968:	4640      	mov	r0, r8
 800396a:	6923      	ldr	r3, [r4, #16]
 800396c:	47d0      	blx	sl
 800396e:	3001      	adds	r0, #1
 8003970:	d0ad      	beq.n	80038ce <_printf_i+0x162>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	079b      	lsls	r3, r3, #30
 8003976:	d413      	bmi.n	80039a0 <_printf_i+0x234>
 8003978:	68e0      	ldr	r0, [r4, #12]
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	4298      	cmp	r0, r3
 800397e:	bfb8      	it	lt
 8003980:	4618      	movlt	r0, r3
 8003982:	e7a6      	b.n	80038d2 <_printf_i+0x166>
 8003984:	2301      	movs	r3, #1
 8003986:	4632      	mov	r2, r6
 8003988:	4649      	mov	r1, r9
 800398a:	4640      	mov	r0, r8
 800398c:	47d0      	blx	sl
 800398e:	3001      	adds	r0, #1
 8003990:	d09d      	beq.n	80038ce <_printf_i+0x162>
 8003992:	3501      	adds	r5, #1
 8003994:	68e3      	ldr	r3, [r4, #12]
 8003996:	9903      	ldr	r1, [sp, #12]
 8003998:	1a5b      	subs	r3, r3, r1
 800399a:	42ab      	cmp	r3, r5
 800399c:	dcf2      	bgt.n	8003984 <_printf_i+0x218>
 800399e:	e7eb      	b.n	8003978 <_printf_i+0x20c>
 80039a0:	2500      	movs	r5, #0
 80039a2:	f104 0619 	add.w	r6, r4, #25
 80039a6:	e7f5      	b.n	8003994 <_printf_i+0x228>
 80039a8:	08003b07 	.word	0x08003b07
 80039ac:	08003b18 	.word	0x08003b18

080039b0 <memmove>:
 80039b0:	4288      	cmp	r0, r1
 80039b2:	b510      	push	{r4, lr}
 80039b4:	eb01 0402 	add.w	r4, r1, r2
 80039b8:	d902      	bls.n	80039c0 <memmove+0x10>
 80039ba:	4284      	cmp	r4, r0
 80039bc:	4623      	mov	r3, r4
 80039be:	d807      	bhi.n	80039d0 <memmove+0x20>
 80039c0:	1e43      	subs	r3, r0, #1
 80039c2:	42a1      	cmp	r1, r4
 80039c4:	d008      	beq.n	80039d8 <memmove+0x28>
 80039c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039ce:	e7f8      	b.n	80039c2 <memmove+0x12>
 80039d0:	4601      	mov	r1, r0
 80039d2:	4402      	add	r2, r0
 80039d4:	428a      	cmp	r2, r1
 80039d6:	d100      	bne.n	80039da <memmove+0x2a>
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80039de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80039e2:	e7f7      	b.n	80039d4 <memmove+0x24>

080039e4 <_sbrk_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	2300      	movs	r3, #0
 80039e8:	4d05      	ldr	r5, [pc, #20]	; (8003a00 <_sbrk_r+0x1c>)
 80039ea:	4604      	mov	r4, r0
 80039ec:	4608      	mov	r0, r1
 80039ee:	602b      	str	r3, [r5, #0]
 80039f0:	f7fc ff46 	bl	8000880 <_sbrk>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_sbrk_r+0x1a>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_sbrk_r+0x1a>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	200002d4 	.word	0x200002d4

08003a04 <memchr>:
 8003a04:	4603      	mov	r3, r0
 8003a06:	b510      	push	{r4, lr}
 8003a08:	b2c9      	uxtb	r1, r1
 8003a0a:	4402      	add	r2, r0
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	d101      	bne.n	8003a16 <memchr+0x12>
 8003a12:	2000      	movs	r0, #0
 8003a14:	e003      	b.n	8003a1e <memchr+0x1a>
 8003a16:	7804      	ldrb	r4, [r0, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	428c      	cmp	r4, r1
 8003a1c:	d1f6      	bne.n	8003a0c <memchr+0x8>
 8003a1e:	bd10      	pop	{r4, pc}

08003a20 <memcpy>:
 8003a20:	440a      	add	r2, r1
 8003a22:	4291      	cmp	r1, r2
 8003a24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a28:	d100      	bne.n	8003a2c <memcpy+0xc>
 8003a2a:	4770      	bx	lr
 8003a2c:	b510      	push	{r4, lr}
 8003a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a32:	4291      	cmp	r1, r2
 8003a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a38:	d1f9      	bne.n	8003a2e <memcpy+0xe>
 8003a3a:	bd10      	pop	{r4, pc}

08003a3c <_realloc_r>:
 8003a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a40:	4680      	mov	r8, r0
 8003a42:	4614      	mov	r4, r2
 8003a44:	460e      	mov	r6, r1
 8003a46:	b921      	cbnz	r1, 8003a52 <_realloc_r+0x16>
 8003a48:	4611      	mov	r1, r2
 8003a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4e:	f7ff bc37 	b.w	80032c0 <_malloc_r>
 8003a52:	b92a      	cbnz	r2, 8003a60 <_realloc_r+0x24>
 8003a54:	f7ff fbcc 	bl	80031f0 <_free_r>
 8003a58:	4625      	mov	r5, r4
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a60:	f000 f81b 	bl	8003a9a <_malloc_usable_size_r>
 8003a64:	4284      	cmp	r4, r0
 8003a66:	4607      	mov	r7, r0
 8003a68:	d802      	bhi.n	8003a70 <_realloc_r+0x34>
 8003a6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a6e:	d812      	bhi.n	8003a96 <_realloc_r+0x5a>
 8003a70:	4621      	mov	r1, r4
 8003a72:	4640      	mov	r0, r8
 8003a74:	f7ff fc24 	bl	80032c0 <_malloc_r>
 8003a78:	4605      	mov	r5, r0
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d0ed      	beq.n	8003a5a <_realloc_r+0x1e>
 8003a7e:	42bc      	cmp	r4, r7
 8003a80:	4622      	mov	r2, r4
 8003a82:	4631      	mov	r1, r6
 8003a84:	bf28      	it	cs
 8003a86:	463a      	movcs	r2, r7
 8003a88:	f7ff ffca 	bl	8003a20 <memcpy>
 8003a8c:	4631      	mov	r1, r6
 8003a8e:	4640      	mov	r0, r8
 8003a90:	f7ff fbae 	bl	80031f0 <_free_r>
 8003a94:	e7e1      	b.n	8003a5a <_realloc_r+0x1e>
 8003a96:	4635      	mov	r5, r6
 8003a98:	e7df      	b.n	8003a5a <_realloc_r+0x1e>

08003a9a <_malloc_usable_size_r>:
 8003a9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a9e:	1f18      	subs	r0, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bfbc      	itt	lt
 8003aa4:	580b      	ldrlt	r3, [r1, r0]
 8003aa6:	18c0      	addlt	r0, r0, r3
 8003aa8:	4770      	bx	lr
	...

08003aac <_init>:
 8003aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aae:	bf00      	nop
 8003ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab2:	bc08      	pop	{r3}
 8003ab4:	469e      	mov	lr, r3
 8003ab6:	4770      	bx	lr

08003ab8 <_fini>:
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	bf00      	nop
 8003abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003abe:	bc08      	pop	{r3}
 8003ac0:	469e      	mov	lr, r3
 8003ac2:	4770      	bx	lr
