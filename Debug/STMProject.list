
STMProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006594  08006594  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006594  08006594  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006594  08006594  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006594  08006594  00016594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006598  08006598  00016598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800659c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd8  20000060  080065fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c38  080065fc  00021c38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015552  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030de  00000000  00000000  0003561e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f36  00000000  00000000  00039a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b73  00000000  00000000  0003a9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b68  00000000  00000000  0003d521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a8a  00000000  00000000  00052089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005700  00000000  00000000  000e5b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000eb214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006490 	.word	0x08006490

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006490 	.word	0x08006490

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc18 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f82c 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f966 	bl	800042c <MX_GPIO_Init>
  MX_DMA_Init();
 8000160:	f000 f946 	bl	80003f0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000164:	f000 f8c0 	bl	80002e8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000168:	f000 f918 	bl	800039c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800016c:	f000 f868 	bl	8000240 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f003 f802 	bl	8003178 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <main+0x4c>)
 8000176:	2100      	movs	r1, #0
 8000178:	4809      	ldr	r0, [pc, #36]	; (80001a0 <main+0x50>)
 800017a:	f003 f863 	bl	8003244 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a08      	ldr	r2, [pc, #32]	; (80001a4 <main+0x54>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8000184:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <main+0x58>)
 8000186:	2100      	movs	r1, #0
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <main+0x5c>)
 800018a:	f003 f85b 	bl	8003244 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <main+0x60>)
 8000192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000194:	f003 f822 	bl	80031dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000198:	e7fe      	b.n	8000198 <main+0x48>
 800019a:	bf00      	nop
 800019c:	080064ec 	.word	0x080064ec
 80001a0:	080004ed 	.word	0x080004ed
 80001a4:	20000198 	.word	0x20000198
 80001a8:	08006510 	.word	0x08006510
 80001ac:	08000545 	.word	0x08000545
 80001b0:	2000019c 	.word	0x2000019c

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f005 fcd2 	bl	8005b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e8:	2302      	movs	r3, #2
 80001ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 f8d7 	bl	80013b0 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000208:	f000 f9f0 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f001 fb44 	bl	80018b4 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000232:	f000 f9db 	bl	80005ec <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	; 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08c      	sub	sp, #48	; 0x30
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000246:	f107 030c 	add.w	r3, r7, #12
 800024a:	2224      	movs	r2, #36	; 0x24
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f005 fc8c 	bl	8005b6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800025c:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <MX_TIM2_Init+0xa4>)
 800025e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <MX_TIM2_Init+0xa4>)
 8000266:	2200      	movs	r2, #0
 8000268:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800026a:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <MX_TIM2_Init+0xa4>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <MX_TIM2_Init+0xa4>)
 8000272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000276:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <MX_TIM2_Init+0xa4>)
 800027a:	2200      	movs	r2, #0
 800027c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <MX_TIM2_Init+0xa4>)
 8000280:	2280      	movs	r2, #128	; 0x80
 8000282:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000284:	2303      	movs	r3, #3
 8000286:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800028c:	2301      	movs	r3, #1
 800028e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000294:	230a      	movs	r3, #10
 8000296:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800029c:	2301      	movs	r3, #1
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80002a8:	f107 030c 	add.w	r3, r7, #12
 80002ac:	4619      	mov	r1, r3
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <MX_TIM2_Init+0xa4>)
 80002b0:	f001 fd80 	bl	8001db4 <HAL_TIM_Encoder_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80002ba:	f000 f997 	bl	80005ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	4806      	ldr	r0, [pc, #24]	; (80002e4 <MX_TIM2_Init+0xa4>)
 80002cc:	f002 faa8 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80002d6:	f000 f989 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	3730      	adds	r7, #48	; 0x30
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000007c 	.word	0x2000007c

080002e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ee:	f107 0320 	add.w	r3, r7, #32
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]
 8000306:	615a      	str	r2, [r3, #20]
 8000308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_TIM3_Init+0xac>)
 800030c:	4a22      	ldr	r2, [pc, #136]	; (8000398 <MX_TIM3_Init+0xb0>)
 800030e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000310:	4b20      	ldr	r3, [pc, #128]	; (8000394 <MX_TIM3_Init+0xac>)
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_TIM3_Init+0xac>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_TIM3_Init+0xac>)
 800031e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_TIM3_Init+0xac>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_TIM3_Init+0xac>)
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000330:	4818      	ldr	r0, [pc, #96]	; (8000394 <MX_TIM3_Init+0xac>)
 8000332:	f001 fc4d 	bl	8001bd0 <HAL_TIM_PWM_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800033c:	f000 f956 	bl	80005ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000348:	f107 0320 	add.w	r3, r7, #32
 800034c:	4619      	mov	r1, r3
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <MX_TIM3_Init+0xac>)
 8000350:	f002 fa66 	bl	8002820 <HAL_TIMEx_MasterConfigSynchronization>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800035a:	f000 f947 	bl	80005ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800035e:	2360      	movs	r3, #96	; 0x60
 8000360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	4807      	ldr	r0, [pc, #28]	; (8000394 <MX_TIM3_Init+0xac>)
 8000376:	f001 ff55 	bl	8002224 <HAL_TIM_PWM_ConfigChannel>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000380:	f000 f934 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <MX_TIM3_Init+0xac>)
 8000386:	f000 f9c1 	bl	800070c <HAL_TIM_MspPostInit>

}
 800038a:	bf00      	nop
 800038c:	3728      	adds	r7, #40	; 0x28
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200000c4 	.word	0x200000c4
 8000398:	40000400 	.word	0x40000400

0800039c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <MX_USART2_UART_Init+0x50>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003d4:	f002 fa94 	bl	8002900 <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003de:	f000 f905 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2000010c 	.word	0x2000010c
 80003ec:	40004400 	.word	0x40004400

080003f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_DMA_Init+0x38>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <MX_DMA_Init+0x38>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_DMA_Init+0x38>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2105      	movs	r1, #5
 8000412:	2010      	movs	r0, #16
 8000414:	f000 fbf1 	bl	8000bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000418:	2010      	movs	r0, #16
 800041a:	f000 fc0a 	bl	8000c32 <HAL_NVIC_EnableIRQ>

}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a26      	ldr	r2, [pc, #152]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000446:	f043 0310 	orr.w	r3, r3, #16
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <MX_GPIO_Init+0xb4>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0310 	and.w	r3, r3, #16
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000458:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <MX_GPIO_Init+0xb4>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a20      	ldr	r2, [pc, #128]	; (80004e0 <MX_GPIO_Init+0xb4>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0320 	and.w	r3, r3, #32
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a1a      	ldr	r2, [pc, #104]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_GPIO_Init+0xb4>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048e:	4815      	ldr	r0, [pc, #84]	; (80004e4 <MX_GPIO_Init+0xb8>)
 8000490:	f000 ff5c 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2120      	movs	r1, #32
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <MX_GPIO_Init+0xbc>)
 800049a:	f000 ff57 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800049e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480b      	ldr	r0, [pc, #44]	; (80004e4 <MX_GPIO_Init+0xb8>)
 80004b8:	f000 fdc4 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004bc:	2320      	movs	r3, #32
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_GPIO_Init+0xbc>)
 80004d4:	f000 fdb6 	bl	8001044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40011000 	.word	0x40011000
 80004e8:	40010800 	.word	0x40010800

080004ec <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b090      	sub	sp, #64	; 0x40
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80004f4:	213c      	movs	r1, #60	; 0x3c
 80004f6:	4810      	ldr	r0, [pc, #64]	; (8000538 <StartBlink01+0x4c>)
 80004f8:	f001 fcfe 	bl	8001ef8 <HAL_TIM_Encoder_Start>
	uint8_t message[50] = {'\0'};
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	222e      	movs	r2, #46	; 0x2e
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f005 fb2f 	bl	8005b6c <memset>
  /* Infinite loop */
  for(;;)
  {
    sprintf(message, "Encoder Ticks = %d\n\r", ((TIM2->CNT)>>2));
 800050e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000514:	089a      	lsrs	r2, r3, #2
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4908      	ldr	r1, [pc, #32]	; (800053c <StartBlink01+0x50>)
 800051c:	4618      	mov	r0, r3
 800051e:	f005 fb05 	bl	8005b2c <siprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 8000522:	f107 010c 	add.w	r1, r7, #12
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	2232      	movs	r2, #50	; 0x32
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <StartBlink01+0x54>)
 800052c:	f002 fa38 	bl	80029a0 <HAL_UART_Transmit>
    osDelay(10);
 8000530:	200a      	movs	r0, #10
 8000532:	f002 ff31 	bl	8003398 <osDelay>
  {
 8000536:	e7ea      	b.n	800050e <StartBlink01+0x22>
 8000538:	2000007c 	.word	0x2000007c
 800053c:	080064bc 	.word	0x080064bc
 8000540:	2000010c 	.word	0x2000010c

08000544 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800054c:	2100      	movs	r1, #0
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <StartMotorTask+0x98>)
 8000550:	f001 fb8e 	bl	8001c70 <HAL_TIM_PWM_Start>
  int32_t dutyCycle = 100;
 8000554:	2364      	movs	r3, #100	; 0x64
 8000556:	617b      	str	r3, [r7, #20]
  uint8_t RxData[7];
  /* Infinite loop */
  for(;;)
  {

	  HAL_UART_Receive_DMA(&huart2, RxData, sizeof(RxData));
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2207      	movs	r2, #7
 800055e:	4619      	mov	r1, r3
 8000560:	481f      	ldr	r0, [pc, #124]	; (80005e0 <StartMotorTask+0x9c>)
 8000562:	f002 faa0 	bl	8002aa6 <HAL_UART_Receive_DMA>
	  dutyCycle = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
      for(uint8_t i = 0; RxData[i] != '\n' && i< sizeof(RxData); i++)
 800056a:	2300      	movs	r3, #0
 800056c:	74fb      	strb	r3, [r7, #19]
 800056e:	e01b      	b.n	80005a8 <StartMotorTask+0x64>
      {
    	  if(RxData[i]== '-')
 8000570:	7cfb      	ldrb	r3, [r7, #19]
 8000572:	3318      	adds	r3, #24
 8000574:	443b      	add	r3, r7
 8000576:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800057a:	2b2d      	cmp	r3, #45	; 0x2d
 800057c:	d103      	bne.n	8000586 <StartMotorTask+0x42>
    	  {
    		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800057e:	2120      	movs	r1, #32
 8000580:	4818      	ldr	r0, [pc, #96]	; (80005e4 <StartMotorTask+0xa0>)
 8000582:	f000 fefb 	bl	800137c <HAL_GPIO_TogglePin>
    	  }

    	  dutyCycle = dutyCycle*10 + (RxData[i] - '0');
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	461a      	mov	r2, r3
 8000592:	7cfb      	ldrb	r3, [r7, #19]
 8000594:	3318      	adds	r3, #24
 8000596:	443b      	add	r3, r7
 8000598:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800059c:	3b30      	subs	r3, #48	; 0x30
 800059e:	4413      	add	r3, r2
 80005a0:	617b      	str	r3, [r7, #20]
      for(uint8_t i = 0; RxData[i] != '\n' && i< sizeof(RxData); i++)
 80005a2:	7cfb      	ldrb	r3, [r7, #19]
 80005a4:	3301      	adds	r3, #1
 80005a6:	74fb      	strb	r3, [r7, #19]
 80005a8:	7cfb      	ldrb	r3, [r7, #19]
 80005aa:	3318      	adds	r3, #24
 80005ac:	443b      	add	r3, r7
 80005ae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80005b2:	2b0a      	cmp	r3, #10
 80005b4:	d002      	beq.n	80005bc <StartMotorTask+0x78>
 80005b6:	7cfb      	ldrb	r3, [r7, #19]
 80005b8:	2b06      	cmp	r3, #6
 80005ba:	d9d9      	bls.n	8000570 <StartMotorTask+0x2c>

      }

      if(dutyCycle < 45535)
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	f24b 12de 	movw	r2, #45534	; 0xb1de
 80005c2:	4293      	cmp	r3, r2
 80005c4:	dc03      	bgt.n	80005ce <StartMotorTask+0x8a>
      	  TIM3->CCR1 = dutyCycle;
 80005c6:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <StartMotorTask+0xa4>)
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	6353      	str	r3, [r2, #52]	; 0x34
 80005cc:	e002      	b.n	80005d4 <StartMotorTask+0x90>
      else
    	  TIM3->CCR1 = 0;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <StartMotorTask+0xa4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
//      tick += wait;
//      osDelayUntil(tick);
      osDelay(250);
 80005d4:	20fa      	movs	r0, #250	; 0xfa
 80005d6:	f002 fedf 	bl	8003398 <osDelay>
	  HAL_UART_Receive_DMA(&huart2, RxData, sizeof(RxData));
 80005da:	e7bd      	b.n	8000558 <StartMotorTask+0x14>
 80005dc:	200000c4 	.word	0x200000c4
 80005e0:	2000010c 	.word	0x2000010c
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40000400 	.word	0x40000400

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_MspInit+0x4c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a10      	ldr	r2, [pc, #64]	; (8000644 <HAL_MspInit+0x4c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_MspInit+0x4c>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <HAL_MspInit+0x4c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_MspInit+0x4c>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <HAL_MspInit+0x4c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	210f      	movs	r1, #15
 8000632:	f06f 0001 	mvn.w	r0, #1
 8000636:	f000 fae0 	bl	8000bfa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0310 	add.w	r3, r7, #16
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000666:	d12b      	bne.n	80006c0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <HAL_TIM_Encoder_MspInit+0x80>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	4a16      	ldr	r2, [pc, #88]	; (80006c8 <HAL_TIM_Encoder_MspInit+0x80>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	61d3      	str	r3, [r2, #28]
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_TIM_Encoder_MspInit+0x80>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000698:	2303      	movs	r3, #3
 800069a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	4808      	ldr	r0, [pc, #32]	; (80006cc <HAL_TIM_Encoder_MspInit+0x84>)
 80006ac:	f000 fcca 	bl	8001044 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2105      	movs	r1, #5
 80006b4:	201c      	movs	r0, #28
 80006b6:	f000 faa0 	bl	8000bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006ba:	201c      	movs	r0, #28
 80006bc:	f000 fab9 	bl	8000c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800

080006d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <HAL_TIM_PWM_MspInit+0x34>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d10b      	bne.n	80006fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <HAL_TIM_PWM_MspInit+0x38>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_TIM_PWM_MspInit+0x38>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <HAL_TIM_PWM_MspInit+0x38>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40000400 	.word	0x40000400
 8000708:	40021000 	.word	0x40021000

0800070c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0310 	add.w	r3, r7, #16
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <HAL_TIM_MspPostInit+0x58>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d117      	bne.n	800075c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_TIM_MspPostInit+0x5c>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <HAL_TIM_MspPostInit+0x5c>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_TIM_MspPostInit+0x5c>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <HAL_TIM_MspPostInit+0x60>)
 8000758:	f000 fc74 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40000400 	.word	0x40000400
 8000768:	40021000 	.word	0x40021000
 800076c:	40010800 	.word	0x40010800

08000770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <HAL_UART_MspInit+0xd4>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d155      	bne.n	800083c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000790:	4b2d      	ldr	r3, [pc, #180]	; (8000848 <HAL_UART_MspInit+0xd8>)
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	4a2c      	ldr	r2, [pc, #176]	; (8000848 <HAL_UART_MspInit+0xd8>)
 8000796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800079a:	61d3      	str	r3, [r2, #28]
 800079c:	4b2a      	ldr	r3, [pc, #168]	; (8000848 <HAL_UART_MspInit+0xd8>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b27      	ldr	r3, [pc, #156]	; (8000848 <HAL_UART_MspInit+0xd8>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a26      	ldr	r2, [pc, #152]	; (8000848 <HAL_UART_MspInit+0xd8>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <HAL_UART_MspInit+0xd8>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c0:	2304      	movs	r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	481e      	ldr	r0, [pc, #120]	; (800084c <HAL_UART_MspInit+0xdc>)
 80007d4:	f000 fc36 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007d8:	2308      	movs	r3, #8
 80007da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	4619      	mov	r1, r3
 80007ea:	4818      	ldr	r0, [pc, #96]	; (800084c <HAL_UART_MspInit+0xdc>)
 80007ec:	f000 fc2a 	bl	8001044 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <HAL_UART_MspInit+0xe0>)
 80007f2:	4a18      	ldr	r2, [pc, #96]	; (8000854 <HAL_UART_MspInit+0xe4>)
 80007f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <HAL_UART_MspInit+0xe0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <HAL_UART_MspInit+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <HAL_UART_MspInit+0xe0>)
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_UART_MspInit+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_UART_MspInit+0xe0>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_UART_MspInit+0xe0>)
 8000816:	2220      	movs	r2, #32
 8000818:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <HAL_UART_MspInit+0xe0>)
 800081c:	2200      	movs	r2, #0
 800081e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <HAL_UART_MspInit+0xe0>)
 8000822:	f000 fa21 	bl	8000c68 <HAL_DMA_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800082c:	f7ff fede 	bl	80005ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_UART_MspInit+0xe0>)
 8000834:	63da      	str	r2, [r3, #60]	; 0x3c
 8000836:	4a06      	ldr	r2, [pc, #24]	; (8000850 <HAL_UART_MspInit+0xe0>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40004400 	.word	0x40004400
 8000848:	40021000 	.word	0x40021000
 800084c:	40010800 	.word	0x40010800
 8000850:	20000154 	.word	0x20000154
 8000854:	4002006c 	.word	0x4002006c

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000886:	f000 f8c5 	bl	8000a14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800088a:	f004 f991 	bl	8004bb0 <xTaskGetSchedulerState>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d001      	beq.n	8000898 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000894:	f004 fef0 	bl	8005678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <DMA1_Channel6_IRQHandler+0x10>)
 80008a2:	f000 fa9b 	bl	8000ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000154 	.word	0x20000154

080008b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <TIM2_IRQHandler+0x10>)
 80008b6:	f001 fbad 	bl	8002014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2000007c 	.word	0x2000007c

080008c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <_sbrk+0x5c>)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <_sbrk+0x60>)
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <_sbrk+0x64>)
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <_sbrk+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d207      	bcs.n	8000904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f4:	f005 f942 	bl	8005b7c <__errno>
 80008f8:	4603      	mov	r3, r0
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000902:	e009      	b.n	8000918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <_sbrk+0x64>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <_sbrk+0x64>)
 8000914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20005000 	.word	0x20005000
 8000924:	00000400 	.word	0x00000400
 8000928:	200001a0 	.word	0x200001a0
 800092c:	20001c38 	.word	0x20001c38

08000930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800093c:	f7ff fff8 	bl	8000930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000942:	490c      	ldr	r1, [pc, #48]	; (8000974 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000958:	4c09      	ldr	r4, [pc, #36]	; (8000980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000966:	f005 f90f 	bl	8005b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fbf1 	bl	8000150 <main>
  bx lr
 800096e:	4770      	bx	lr
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000978:	0800659c 	.word	0x0800659c
  ldr r2, =_sbss
 800097c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000980:	20001c38 	.word	0x20001c38

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_Init+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_Init+0x28>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 f923 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff fe28 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f93b 	bl	8000c4e <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f0:	f000 f903 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x1c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x20>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <HAL_IncTick+0x20>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200001a4 	.word	0x200001a4

08000a38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <HAL_GetTick+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	200001a4 	.word	0x200001a4

08000a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7e:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <__NVIC_SetPriorityGrouping+0x44>)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	60d3      	str	r3, [r2, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <__NVIC_GetPriorityGrouping+0x18>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db0b      	blt.n	8000ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	f003 021f 	and.w	r2, r3, #31
 8000ac8:	4906      	ldr	r1, [pc, #24]	; (8000ae4 <__NVIC_EnableIRQ+0x34>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f7ff ff90 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff2d 	bl	8000a4c <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff42 	bl	8000a94 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff90 	bl	8000b3c <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5f 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff35 	bl	8000ab0 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e043      	b.n	8000d06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_DMA_Init+0xa8>)
 8000c86:	4413      	add	r3, r2
 8000c88:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <HAL_DMA_Init+0xac>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	009a      	lsls	r2, r3, #2
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_DMA_Init+0xb0>)
 8000c9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000cb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000cb6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	bffdfff8 	.word	0xbffdfff8
 8000d14:	cccccccd 	.word	0xcccccccd
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <HAL_DMA_Start_IT+0x20>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e04b      	b.n	8000dd4 <HAL_DMA_Start_IT+0xb8>
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d13a      	bne.n	8000dc6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2202      	movs	r2, #2
 8000d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f022 0201 	bic.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f000 f937 	bl	8000fe8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d008      	beq.n	8000d94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f042 020e 	orr.w	r2, r2, #14
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e00f      	b.n	8000db4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0204 	bic.w	r2, r2, #4
 8000da2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 020a 	orr.w	r2, r2, #10
 8000db2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0201 	orr.w	r2, r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	e005      	b.n	8000dd2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	2204      	movs	r2, #4
 8000dfa:	409a      	lsls	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d04f      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0xc8>
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d04a      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0320 	and.w	r3, r3, #32
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d107      	bne.n	8000e2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0204 	bic.w	r2, r2, #4
 8000e2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a66      	ldr	r2, [pc, #408]	; (8000fcc <HAL_DMA_IRQHandler+0x1f0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d029      	beq.n	8000e8a <HAL_DMA_IRQHandler+0xae>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a65      	ldr	r2, [pc, #404]	; (8000fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d022      	beq.n	8000e86 <HAL_DMA_IRQHandler+0xaa>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a63      	ldr	r2, [pc, #396]	; (8000fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d01a      	beq.n	8000e80 <HAL_DMA_IRQHandler+0xa4>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a62      	ldr	r2, [pc, #392]	; (8000fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d012      	beq.n	8000e7a <HAL_DMA_IRQHandler+0x9e>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a60      	ldr	r2, [pc, #384]	; (8000fdc <HAL_DMA_IRQHandler+0x200>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00a      	beq.n	8000e74 <HAL_DMA_IRQHandler+0x98>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a5f      	ldr	r2, [pc, #380]	; (8000fe0 <HAL_DMA_IRQHandler+0x204>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d102      	bne.n	8000e6e <HAL_DMA_IRQHandler+0x92>
 8000e68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6c:	e00e      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e72:	e00b      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e78:	e008      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e7e:	e005      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e84:	e002      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e86:	2340      	movs	r3, #64	; 0x40
 8000e88:	e000      	b.n	8000e8c <HAL_DMA_IRQHandler+0xb0>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	4a55      	ldr	r2, [pc, #340]	; (8000fe4 <HAL_DMA_IRQHandler+0x208>)
 8000e8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 8094 	beq.w	8000fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000ea2:	e08e      	b.n	8000fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d056      	beq.n	8000f62 <HAL_DMA_IRQHandler+0x186>
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d051      	beq.n	8000f62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0320 	and.w	r3, r3, #32
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10b      	bne.n	8000ee4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 020a 	bic.w	r2, r2, #10
 8000eda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a38      	ldr	r2, [pc, #224]	; (8000fcc <HAL_DMA_IRQHandler+0x1f0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d029      	beq.n	8000f42 <HAL_DMA_IRQHandler+0x166>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a37      	ldr	r2, [pc, #220]	; (8000fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d022      	beq.n	8000f3e <HAL_DMA_IRQHandler+0x162>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01a      	beq.n	8000f38 <HAL_DMA_IRQHandler+0x15c>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a34      	ldr	r2, [pc, #208]	; (8000fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d012      	beq.n	8000f32 <HAL_DMA_IRQHandler+0x156>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a32      	ldr	r2, [pc, #200]	; (8000fdc <HAL_DMA_IRQHandler+0x200>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00a      	beq.n	8000f2c <HAL_DMA_IRQHandler+0x150>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <HAL_DMA_IRQHandler+0x204>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d102      	bne.n	8000f26 <HAL_DMA_IRQHandler+0x14a>
 8000f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f24:	e00e      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f2a:	e00b      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f30:	e008      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f36:	e005      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3c:	e002      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f3e:	2320      	movs	r3, #32
 8000f40:	e000      	b.n	8000f44 <HAL_DMA_IRQHandler+0x168>
 8000f42:	2302      	movs	r3, #2
 8000f44:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <HAL_DMA_IRQHandler+0x208>)
 8000f46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d034      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f60:	e02f      	b.n	8000fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	2208      	movs	r2, #8
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d028      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x1e8>
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d023      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 020e 	bic.w	r2, r2, #14
 8000f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d004      	beq.n	8000fc4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	4798      	blx	r3
    }
  }
  return;
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
}
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40020008 	.word	0x40020008
 8000fd0:	4002001c 	.word	0x4002001c
 8000fd4:	40020030 	.word	0x40020030
 8000fd8:	40020044 	.word	0x40020044
 8000fdc:	40020058 	.word	0x40020058
 8000fe0:	4002006c 	.word	0x4002006c
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b10      	cmp	r3, #16
 8001014:	d108      	bne.n	8001028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001026:	e007      	b.n	8001038 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	60da      	str	r2, [r3, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b08b      	sub	sp, #44	; 0x2c
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	e169      	b.n	800132c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001058:	2201      	movs	r2, #1
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8158 	bne.w	8001326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a9a      	ldr	r2, [pc, #616]	; (80012e4 <HAL_GPIO_Init+0x2a0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d05e      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 8001080:	4a98      	ldr	r2, [pc, #608]	; (80012e4 <HAL_GPIO_Init+0x2a0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d875      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 8001086:	4a98      	ldr	r2, [pc, #608]	; (80012e8 <HAL_GPIO_Init+0x2a4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d058      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 800108c:	4a96      	ldr	r2, [pc, #600]	; (80012e8 <HAL_GPIO_Init+0x2a4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d86f      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 8001092:	4a96      	ldr	r2, [pc, #600]	; (80012ec <HAL_GPIO_Init+0x2a8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d052      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 8001098:	4a94      	ldr	r2, [pc, #592]	; (80012ec <HAL_GPIO_Init+0x2a8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d869      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 800109e:	4a94      	ldr	r2, [pc, #592]	; (80012f0 <HAL_GPIO_Init+0x2ac>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d04c      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 80010a4:	4a92      	ldr	r2, [pc, #584]	; (80012f0 <HAL_GPIO_Init+0x2ac>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d863      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010aa:	4a92      	ldr	r2, [pc, #584]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d046      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 80010b0:	4a90      	ldr	r2, [pc, #576]	; (80012f4 <HAL_GPIO_Init+0x2b0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d85d      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010b6:	2b12      	cmp	r3, #18
 80010b8:	d82a      	bhi.n	8001110 <HAL_GPIO_Init+0xcc>
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d859      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010be:	a201      	add	r2, pc, #4	; (adr r2, 80010c4 <HAL_GPIO_Init+0x80>)
 80010c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c4:	0800113f 	.word	0x0800113f
 80010c8:	08001119 	.word	0x08001119
 80010cc:	0800112b 	.word	0x0800112b
 80010d0:	0800116d 	.word	0x0800116d
 80010d4:	08001173 	.word	0x08001173
 80010d8:	08001173 	.word	0x08001173
 80010dc:	08001173 	.word	0x08001173
 80010e0:	08001173 	.word	0x08001173
 80010e4:	08001173 	.word	0x08001173
 80010e8:	08001173 	.word	0x08001173
 80010ec:	08001173 	.word	0x08001173
 80010f0:	08001173 	.word	0x08001173
 80010f4:	08001173 	.word	0x08001173
 80010f8:	08001173 	.word	0x08001173
 80010fc:	08001173 	.word	0x08001173
 8001100:	08001173 	.word	0x08001173
 8001104:	08001173 	.word	0x08001173
 8001108:	08001121 	.word	0x08001121
 800110c:	08001135 	.word	0x08001135
 8001110:	4a79      	ldr	r2, [pc, #484]	; (80012f8 <HAL_GPIO_Init+0x2b4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001116:	e02c      	b.n	8001172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e029      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	3304      	adds	r3, #4
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e024      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	3308      	adds	r3, #8
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e01f      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	330c      	adds	r3, #12
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e01a      	b.n	8001174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001146:	2304      	movs	r3, #4
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e013      	b.n	8001174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001154:	2308      	movs	r3, #8
 8001156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	611a      	str	r2, [r3, #16]
          break;
 800115e:	e009      	b.n	8001174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001160:	2308      	movs	r3, #8
 8001162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	615a      	str	r2, [r3, #20]
          break;
 800116a:	e003      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x130>
          break;
 8001172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bff      	cmp	r3, #255	; 0xff
 8001178:	d801      	bhi.n	800117e <HAL_GPIO_Init+0x13a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	e001      	b.n	8001182 <HAL_GPIO_Init+0x13e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3304      	adds	r3, #4
 8001182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2bff      	cmp	r3, #255	; 0xff
 8001188:	d802      	bhi.n	8001190 <HAL_GPIO_Init+0x14c>
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x152>
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	3b08      	subs	r3, #8
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	210f      	movs	r1, #15
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	6a39      	ldr	r1, [r7, #32]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	431a      	orrs	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80b1 	beq.w	8001326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c4:	4b4d      	ldr	r3, [pc, #308]	; (80012fc <HAL_GPIO_Init+0x2b8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x2b8>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b4a      	ldr	r3, [pc, #296]	; (80012fc <HAL_GPIO_Init+0x2b8>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_GPIO_Init+0x2bc>)
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a40      	ldr	r2, [pc, #256]	; (8001304 <HAL_GPIO_Init+0x2c0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d013      	beq.n	8001230 <HAL_GPIO_Init+0x1ec>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3f      	ldr	r2, [pc, #252]	; (8001308 <HAL_GPIO_Init+0x2c4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d00d      	beq.n	800122c <HAL_GPIO_Init+0x1e8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a3e      	ldr	r2, [pc, #248]	; (800130c <HAL_GPIO_Init+0x2c8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d007      	beq.n	8001228 <HAL_GPIO_Init+0x1e4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a3d      	ldr	r2, [pc, #244]	; (8001310 <HAL_GPIO_Init+0x2cc>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d101      	bne.n	8001224 <HAL_GPIO_Init+0x1e0>
 8001220:	2303      	movs	r3, #3
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001224:	2304      	movs	r3, #4
 8001226:	e004      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001228:	2302      	movs	r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001230:	2300      	movs	r3, #0
 8001232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001242:	492f      	ldr	r1, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x2bc>)
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	492c      	ldr	r1, [pc, #176]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	43db      	mvns	r3, r3
 8001272:	4928      	ldr	r1, [pc, #160]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 8001274:	4013      	ands	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4922      	ldr	r1, [pc, #136]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	43db      	mvns	r3, r3
 800129a:	491e      	ldr	r1, [pc, #120]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 800129c:	4013      	ands	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4918      	ldr	r1, [pc, #96]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4914      	ldr	r1, [pc, #80]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d021      	beq.n	8001318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	490e      	ldr	r1, [pc, #56]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e021      	b.n	8001326 <HAL_GPIO_Init+0x2e2>
 80012e2:	bf00      	nop
 80012e4:	10320000 	.word	0x10320000
 80012e8:	10310000 	.word	0x10310000
 80012ec:	10220000 	.word	0x10220000
 80012f0:	10210000 	.word	0x10210000
 80012f4:	10120000 	.word	0x10120000
 80012f8:	10110000 	.word	0x10110000
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000
 8001304:	40010800 	.word	0x40010800
 8001308:	40010c00 	.word	0x40010c00
 800130c:	40011000 	.word	0x40011000
 8001310:	40011400 	.word	0x40011400
 8001314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_GPIO_Init+0x304>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	43db      	mvns	r3, r3
 8001320:	4909      	ldr	r1, [pc, #36]	; (8001348 <HAL_GPIO_Init+0x304>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f ae8e 	bne.w	8001058 <HAL_GPIO_Init+0x14>
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	372c      	adds	r7, #44	; 0x2c
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	611a      	str	r2, [r3, #16]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800138e:	887a      	ldrh	r2, [r7, #2]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4013      	ands	r3, r2
 8001394:	041a      	lsls	r2, r3, #16
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43d9      	mvns	r1, r3
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	400b      	ands	r3, r1
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	611a      	str	r2, [r3, #16]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e272      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8087 	beq.w	80014de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d0:	4b92      	ldr	r3, [pc, #584]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 030c 	and.w	r3, r3, #12
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d00c      	beq.n	80013f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013dc:	4b8f      	ldr	r3, [pc, #572]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d112      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
 80013e8:	4b8c      	ldr	r3, [pc, #560]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f4:	d10b      	bne.n	800140e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f6:	4b89      	ldr	r3, [pc, #548]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d06c      	beq.n	80014dc <HAL_RCC_OscConfig+0x12c>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d168      	bne.n	80014dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e24c      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x76>
 8001418:	4b80      	ldr	r3, [pc, #512]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a7f      	ldr	r2, [pc, #508]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800141e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	e02e      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x98>
 800142e:	4b7b      	ldr	r3, [pc, #492]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7a      	ldr	r2, [pc, #488]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b78      	ldr	r3, [pc, #480]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a77      	ldr	r2, [pc, #476]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e01d      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0xbc>
 8001452:	4b72      	ldr	r3, [pc, #456]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a71      	ldr	r2, [pc, #452]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b6f      	ldr	r3, [pc, #444]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6e      	ldr	r2, [pc, #440]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0xd4>
 800146c:	4b6b      	ldr	r3, [pc, #428]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a6a      	ldr	r2, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b68      	ldr	r3, [pc, #416]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a67      	ldr	r2, [pc, #412]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fad4 	bl	8000a38 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fad0 	bl	8000a38 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e200      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0xe4>
 80014b2:	e014      	b.n	80014de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b4:	f7ff fac0 	bl	8000a38 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fabc 	bl	8000a38 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	; 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e1ec      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ce:	4b53      	ldr	r3, [pc, #332]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x10c>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d063      	beq.n	80015b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ea:	4b4c      	ldr	r3, [pc, #304]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00b      	beq.n	800150e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d11c      	bne.n	800153c <HAL_RCC_OscConfig+0x18c>
 8001502:	4b46      	ldr	r3, [pc, #280]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d116      	bne.n	800153c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	4b43      	ldr	r3, [pc, #268]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <HAL_RCC_OscConfig+0x176>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e1c0      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4939      	ldr	r1, [pc, #228]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153a:	e03a      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x270>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154a:	f7ff fa75 	bl	8000a38 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fa71 	bl	8000a38 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1a1      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4927      	ldr	r1, [pc, #156]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
 8001584:	e015      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <HAL_RCC_OscConfig+0x270>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fa54 	bl	8000a38 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001594:	f7ff fa50 	bl	8000a38 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e180      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d03a      	beq.n	8001634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d019      	beq.n	80015fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_RCC_OscConfig+0x274>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa34 	bl	8000a38 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d4:	f7ff fa30 	bl	8000a38 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e160      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f000 face 	bl	8001b94 <RCC_Delay>
 80015f8:	e01c      	b.n	8001634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_RCC_OscConfig+0x274>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001600:	f7ff fa1a 	bl	8000a38 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001606:	e00f      	b.n	8001628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fa16 	bl	8000a38 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d908      	bls.n	8001628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e146      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	42420000 	.word	0x42420000
 8001624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b92      	ldr	r3, [pc, #584]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1e9      	bne.n	8001608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a6 	beq.w	800178e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001646:	4b8b      	ldr	r3, [pc, #556]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10d      	bne.n	800166e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a87      	ldr	r2, [pc, #540]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b85      	ldr	r3, [pc, #532]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800166a:	2301      	movs	r3, #1
 800166c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b82      	ldr	r3, [pc, #520]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d118      	bne.n	80016ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7e      	ldr	r2, [pc, #504]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7ff f9d7 	bl	8000a38 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7ff f9d3 	bl	8000a38 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	; 0x64
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e103      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a0:	4b75      	ldr	r3, [pc, #468]	; (8001878 <HAL_RCC_OscConfig+0x4c8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x312>
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	4a6e      	ldr	r2, [pc, #440]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
 80016c0:	e02d      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x334>
 80016ca:	4b6a      	ldr	r3, [pc, #424]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a69      	ldr	r2, [pc, #420]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	4b67      	ldr	r3, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a66      	ldr	r2, [pc, #408]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	e01c      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x356>
 80016ec:	4b61      	ldr	r3, [pc, #388]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4a60      	ldr	r2, [pc, #384]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	4b5e      	ldr	r3, [pc, #376]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4a5d      	ldr	r2, [pc, #372]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e00b      	b.n	800171e <HAL_RCC_OscConfig+0x36e>
 8001706:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	4a5a      	ldr	r2, [pc, #360]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6213      	str	r3, [r2, #32]
 8001712:	4b58      	ldr	r3, [pc, #352]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a57      	ldr	r2, [pc, #348]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d015      	beq.n	8001752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff f987 	bl	8000a38 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff f983 	bl	8000a38 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e0b1      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	4b4b      	ldr	r3, [pc, #300]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ee      	beq.n	800172e <HAL_RCC_OscConfig+0x37e>
 8001750:	e014      	b.n	800177c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff f971 	bl	8000a38 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001758:	e00a      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7ff f96d 	bl	8000a38 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e09b      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	4b40      	ldr	r3, [pc, #256]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ee      	bne.n	800175a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001782:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a3b      	ldr	r2, [pc, #236]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8087 	beq.w	80018a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001798:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d061      	beq.n	8001868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d146      	bne.n	800183a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff f941 	bl	8000a38 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff f93d 	bl	8000a38 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e06d      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017e2:	4b24      	ldr	r3, [pc, #144]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	4921      	ldr	r1, [pc, #132]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a19      	ldr	r1, [r3, #32]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	430b      	orrs	r3, r1
 8001806:	491b      	ldr	r1, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_OscConfig+0x4cc>)
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff f911 	bl	8000a38 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff f90d 	bl	8000a38 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e03d      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x46a>
 8001838:	e035      	b.n	80018a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_RCC_OscConfig+0x4cc>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff f8fa 	bl	8000a38 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001848:	f7ff f8f6 	bl	8000a38 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e026      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x498>
 8001866:	e01e      	b.n	80018a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d107      	bne.n	8001880 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e019      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
 8001874:	40021000 	.word	0x40021000
 8001878:	40007000 	.word	0x40007000
 800187c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x500>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	429a      	cmp	r2, r3
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0d0      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d910      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 0207 	bic.w	r2, r3, #7
 80018de:	4965      	ldr	r1, [pc, #404]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0b8      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4a58      	ldr	r2, [pc, #352]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800191a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a52      	ldr	r2, [pc, #328]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	494d      	ldr	r1, [pc, #308]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d040      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e07f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e073      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b3d      	ldr	r3, [pc, #244]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06b      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4936      	ldr	r1, [pc, #216]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a4:	f7ff f848 	bl	8000a38 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff f844 	bl	8000a38 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e053      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d210      	bcs.n	8001a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f023 0207 	bic.w	r2, r3, #7
 80019ea:	4922      	ldr	r1, [pc, #136]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e032      	b.n	8001a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	4916      	ldr	r1, [pc, #88]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a42:	f000 f821 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	490a      	ldr	r1, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1cc>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1d0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe ffa6 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40022000 	.word	0x40022000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	08006534 	.word	0x08006534
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_GetSysClockFreq+0x36>
 8001ab6:	e027      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aba:	613b      	str	r3, [r7, #16]
      break;
 8001abc:	e027      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	0c9b      	lsrs	r3, r3, #18
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ac8:	5cd3      	ldrb	r3, [r2, r3]
 8001aca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d010      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	0c5b      	lsrs	r3, r3, #17
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aea:	fb03 f202 	mul.w	r2, r3, r2
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e004      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a0c      	ldr	r2, [pc, #48]	; (8001b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	613b      	str	r3, [r7, #16]
      break;
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b0a:	613b      	str	r3, [r7, #16]
      break;
 8001b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0e:	693b      	ldr	r3, [r7, #16]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	007a1200 	.word	0x007a1200
 8001b24:	0800654c 	.word	0x0800654c
 8001b28:	0800655c 	.word	0x0800655c
 8001b2c:	003d0900 	.word	0x003d0900

08001b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b48:	f7ff fff2 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	08006544 	.word	0x08006544

08001b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b70:	f7ff ffde 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	0adb      	lsrs	r3, r3, #11
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	08006544 	.word	0x08006544

08001b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <RCC_Delay+0x34>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <RCC_Delay+0x38>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0a5b      	lsrs	r3, r3, #9
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bb0:	bf00      	nop
  }
  while (Delay --);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1e5a      	subs	r2, r3, #1
 8001bb6:	60fa      	str	r2, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f9      	bne.n	8001bb0 <RCC_Delay+0x1c>
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	10624dd3 	.word	0x10624dd3

08001bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e041      	b.n	8001c66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fd6a 	bl	80006d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f000 fbf8 	bl	8002404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_TIM_PWM_Start+0x24>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e022      	b.n	8001cda <HAL_TIM_PWM_Start+0x6a>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d109      	bne.n	8001cae <HAL_TIM_PWM_Start+0x3e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	e015      	b.n	8001cda <HAL_TIM_PWM_Start+0x6a>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d109      	bne.n	8001cc8 <HAL_TIM_PWM_Start+0x58>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	e008      	b.n	8001cda <HAL_TIM_PWM_Start+0x6a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	bf14      	ite	ne
 8001cd4:	2301      	movne	r3, #1
 8001cd6:	2300      	moveq	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e05e      	b.n	8001da0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d104      	bne.n	8001cf2 <HAL_TIM_PWM_Start+0x82>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf0:	e013      	b.n	8001d1a <HAL_TIM_PWM_Start+0xaa>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d104      	bne.n	8001d02 <HAL_TIM_PWM_Start+0x92>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d00:	e00b      	b.n	8001d1a <HAL_TIM_PWM_Start+0xaa>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d104      	bne.n	8001d12 <HAL_TIM_PWM_Start+0xa2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d10:	e003      	b.n	8001d1a <HAL_TIM_PWM_Start+0xaa>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	6839      	ldr	r1, [r7, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fd58 	bl	80027d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <HAL_TIM_PWM_Start+0x138>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d107      	bne.n	8001d42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_TIM_PWM_Start+0x138>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00e      	beq.n	8001d6a <HAL_TIM_PWM_Start+0xfa>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d009      	beq.n	8001d6a <HAL_TIM_PWM_Start+0xfa>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_TIM_PWM_Start+0x13c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d004      	beq.n	8001d6a <HAL_TIM_PWM_Start+0xfa>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <HAL_TIM_PWM_Start+0x140>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d111      	bne.n	8001d8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b06      	cmp	r3, #6
 8001d7a:	d010      	beq.n	8001d9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8c:	e007      	b.n	8001d9e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40000800 	.word	0x40000800

08001db4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e093      	b.n	8001ef0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7fe fc33 	bl	8000648 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001df8:	f023 0307 	bic.w	r3, r3, #7
 8001dfc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3304      	adds	r3, #4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4610      	mov	r0, r2
 8001e0a:	f000 fafb 	bl	8002404 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	4313      	orrs	r3, r2
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e54:	f023 030c 	bic.w	r3, r3, #12
 8001e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	011a      	lsls	r2, r3, #4
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	031b      	lsls	r3, r3, #12
 8001e84:	4313      	orrs	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001e92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d110      	bne.n	8001f4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d102      	bne.n	8001f34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f2e:	7b7b      	ldrb	r3, [r7, #13]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d001      	beq.n	8001f38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e069      	b.n	800200c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f48:	e031      	b.n	8001fae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d110      	bne.n	8001f72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f50:	7bbb      	ldrb	r3, [r7, #14]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f56:	7b3b      	ldrb	r3, [r7, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d001      	beq.n	8001f60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e055      	b.n	800200c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f70:	e01d      	b.n	8001fae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d108      	bne.n	8001f8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f78:	7bbb      	ldrb	r3, [r7, #14]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f7e:	7b7b      	ldrb	r3, [r7, #13]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f84:	7b3b      	ldrb	r3, [r7, #12]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d001      	beq.n	8001f8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e03e      	b.n	800200c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2202      	movs	r2, #2
 8001f9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_TIM_Encoder_Start+0xc4>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d008      	beq.n	8001fcc <HAL_TIM_Encoder_Start+0xd4>
 8001fba:	e00f      	b.n	8001fdc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fc07 	bl	80027d8 <TIM_CCxChannelCmd>
      break;
 8001fca:	e016      	b.n	8001ffa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fbff 	bl	80027d8 <TIM_CCxChannelCmd>
      break;
 8001fda:	e00e      	b.n	8001ffa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fbf7 	bl	80027d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fbf0 	bl	80027d8 <TIM_CCxChannelCmd>
      break;
 8001ff8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0201 	orr.w	r2, r2, #1
 8002008:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d122      	bne.n	8002070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b02      	cmp	r3, #2
 8002036:	d11b      	bne.n	8002070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0202 	mvn.w	r2, #2
 8002040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f9b8 	bl	80023cc <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f9ab 	bl	80023ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f9ba 	bl	80023de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d122      	bne.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b04      	cmp	r3, #4
 800208a:	d11b      	bne.n	80020c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0204 	mvn.w	r2, #4
 8002094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f98e 	bl	80023cc <HAL_TIM_IC_CaptureCallback>
 80020b0:	e005      	b.n	80020be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f981 	bl	80023ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f990 	bl	80023de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d122      	bne.n	8002118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d11b      	bne.n	8002118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0208 	mvn.w	r2, #8
 80020e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2204      	movs	r2, #4
 80020ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f964 	bl	80023cc <HAL_TIM_IC_CaptureCallback>
 8002104:	e005      	b.n	8002112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f957 	bl	80023ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f966 	bl	80023de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b10      	cmp	r3, #16
 8002124:	d122      	bne.n	800216c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b10      	cmp	r3, #16
 8002132:	d11b      	bne.n	800216c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f06f 0210 	mvn.w	r2, #16
 800213c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2208      	movs	r2, #8
 8002142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f93a 	bl	80023cc <HAL_TIM_IC_CaptureCallback>
 8002158:	e005      	b.n	8002166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f92d 	bl	80023ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f93c 	bl	80023de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0201 	mvn.w	r2, #1
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f908 	bl	80023a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a2:	2b80      	cmp	r3, #128	; 0x80
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b80      	cmp	r3, #128	; 0x80
 80021b2:	d107      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fb95 	bl	80028ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ce:	2b40      	cmp	r3, #64	; 0x40
 80021d0:	d10e      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d107      	bne.n	80021f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f900 	bl	80023f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d10e      	bne.n	800221c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b20      	cmp	r3, #32
 800220a:	d107      	bne.n	800221c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0220 	mvn.w	r2, #32
 8002214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 fb60 	bl	80028dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800223e:	2302      	movs	r3, #2
 8002240:	e0ae      	b.n	80023a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b0c      	cmp	r3, #12
 800224e:	f200 809f 	bhi.w	8002390 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002252:	a201      	add	r2, pc, #4	; (adr r2, 8002258 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002258:	0800228d 	.word	0x0800228d
 800225c:	08002391 	.word	0x08002391
 8002260:	08002391 	.word	0x08002391
 8002264:	08002391 	.word	0x08002391
 8002268:	080022cd 	.word	0x080022cd
 800226c:	08002391 	.word	0x08002391
 8002270:	08002391 	.word	0x08002391
 8002274:	08002391 	.word	0x08002391
 8002278:	0800230f 	.word	0x0800230f
 800227c:	08002391 	.word	0x08002391
 8002280:	08002391 	.word	0x08002391
 8002284:	08002391 	.word	0x08002391
 8002288:	0800234f 	.word	0x0800234f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f918 	bl	80024c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0208 	orr.w	r2, r2, #8
 80022a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6999      	ldr	r1, [r3, #24]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	619a      	str	r2, [r3, #24]
      break;
 80022ca:	e064      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f95e 	bl	8002594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699a      	ldr	r2, [r3, #24]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6999      	ldr	r1, [r3, #24]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	021a      	lsls	r2, r3, #8
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	619a      	str	r2, [r3, #24]
      break;
 800230c:	e043      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f9a7 	bl	8002668 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0208 	orr.w	r2, r2, #8
 8002328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0204 	bic.w	r2, r2, #4
 8002338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69d9      	ldr	r1, [r3, #28]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	61da      	str	r2, [r3, #28]
      break;
 800234c:	e023      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f9f1 	bl	800273c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69da      	ldr	r2, [r3, #28]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69d9      	ldr	r1, [r3, #28]
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	021a      	lsls	r2, r3, #8
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	61da      	str	r2, [r3, #28]
      break;
 800238e:	e002      	b.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	75fb      	strb	r3, [r7, #23]
      break;
 8002394:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800239e:	7dfb      	ldrb	r3, [r7, #23]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
	...

08002404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a29      	ldr	r2, [pc, #164]	; (80024bc <TIM_Base_SetConfig+0xb8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00b      	beq.n	8002434 <TIM_Base_SetConfig+0x30>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002422:	d007      	beq.n	8002434 <TIM_Base_SetConfig+0x30>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <TIM_Base_SetConfig+0xbc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <TIM_Base_SetConfig+0x30>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <TIM_Base_SetConfig+0xc0>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d108      	bne.n	8002446 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <TIM_Base_SetConfig+0xb8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00b      	beq.n	8002466 <TIM_Base_SetConfig+0x62>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d007      	beq.n	8002466 <TIM_Base_SetConfig+0x62>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a19      	ldr	r2, [pc, #100]	; (80024c0 <TIM_Base_SetConfig+0xbc>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d003      	beq.n	8002466 <TIM_Base_SetConfig+0x62>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <TIM_Base_SetConfig+0xc0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d108      	bne.n	8002478 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a07      	ldr	r2, [pc, #28]	; (80024bc <TIM_Base_SetConfig+0xb8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d103      	bne.n	80024ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	615a      	str	r2, [r3, #20]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40000800 	.word	0x40000800

080024c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f023 0201 	bic.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0303 	bic.w	r3, r3, #3
 80024fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f023 0302 	bic.w	r3, r3, #2
 8002510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <TIM_OC1_SetConfig+0xc8>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d10c      	bne.n	800253e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f023 0308 	bic.w	r3, r3, #8
 800252a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a13      	ldr	r2, [pc, #76]	; (8002590 <TIM_OC1_SetConfig+0xc8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d111      	bne.n	800256a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800254c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	621a      	str	r2, [r3, #32]
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40012c00 	.word	0x40012c00

08002594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f023 0210 	bic.w	r2, r3, #16
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f023 0320 	bic.w	r3, r3, #32
 80025de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <TIM_OC2_SetConfig+0xd0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d10d      	bne.n	8002610 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800260e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a14      	ldr	r2, [pc, #80]	; (8002664 <TIM_OC2_SetConfig+0xd0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d113      	bne.n	8002640 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800261e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	621a      	str	r2, [r3, #32]
}
 800265a:	bf00      	nop
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	40012c00 	.word	0x40012c00

08002668 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f023 0303 	bic.w	r3, r3, #3
 800269e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <TIM_OC3_SetConfig+0xd0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d10d      	bne.n	80026e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <TIM_OC3_SetConfig+0xd0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d113      	bne.n	8002712 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	621a      	str	r2, [r3, #32]
}
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40012c00 	.word	0x40012c00

0800273c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800276a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	031b      	lsls	r3, r3, #12
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a0f      	ldr	r2, [pc, #60]	; (80027d4 <TIM_OC4_SetConfig+0x98>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d109      	bne.n	80027b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40012c00 	.word	0x40012c00

080027d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2201      	movs	r2, #1
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a1a      	ldr	r2, [r3, #32]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	fa01 f303 	lsl.w	r3, r1, r3
 8002810:	431a      	orrs	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	621a      	str	r2, [r3, #32]
}
 8002816:	bf00      	nop
 8002818:	371c      	adds	r7, #28
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002834:	2302      	movs	r3, #2
 8002836:	e046      	b.n	80028c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a16      	ldr	r2, [pc, #88]	; (80028d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00e      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002884:	d009      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10c      	bne.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800

080028dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e042      	b.n	8002998 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fd ff22 	bl	8000770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fb89 	bl	800305c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d16d      	bne.n	8002a9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_UART_Transmit+0x2c>
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e066      	b.n	8002a9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2221      	movs	r2, #33	; 0x21
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029de:	f7fe f82b 	bl	8000a38 <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	88fa      	ldrh	r2, [r7, #6]
 80029e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f8:	d108      	bne.n	8002a0c <HAL_UART_Transmit+0x6c>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d104      	bne.n	8002a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e003      	b.n	8002a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a14:	e02a      	b.n	8002a6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f989 	bl	8002d38 <UART_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e036      	b.n	8002a9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10b      	bne.n	8002a4e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	3302      	adds	r3, #2
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	e007      	b.n	8002a5e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1cf      	bne.n	8002a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2140      	movs	r1, #64	; 0x40
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f959 	bl	8002d38 <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e006      	b.n	8002a9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e000      	b.n	8002a9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
  }
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d112      	bne.n	8002ae6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_UART_Receive_DMA+0x26>
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e00b      	b.n	8002ae8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f999 	bl	8002e14 <UART_Start_Receive_DMA>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	e000      	b.n	8002ae8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b09c      	sub	sp, #112	; 0x70
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d172      	bne.n	8002c3e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b80:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e5      	bne.n	8002b5e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3314      	adds	r3, #20
 8002b98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	667b      	str	r3, [r7, #100]	; 0x64
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3314      	adds	r3, #20
 8002bb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bb2:	647a      	str	r2, [r7, #68]	; 0x44
 8002bb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e5      	bne.n	8002b92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	623b      	str	r3, [r7, #32]
   return(result);
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8002bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3314      	adds	r3, #20
 8002be4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002be6:	633a      	str	r2, [r7, #48]	; 0x30
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e5      	bne.n	8002bc6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d119      	bne.n	8002c3e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	e853 3f00 	ldrex	r3, [r3]
 8002c18:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f023 0310 	bic.w	r3, r3, #16
 8002c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	330c      	adds	r3, #12
 8002c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c2a:	61fa      	str	r2, [r7, #28]
 8002c2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	69b9      	ldr	r1, [r7, #24]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	e841 2300 	strex	r3, r2, [r1]
 8002c36:	617b      	str	r3, [r7, #20]
   return(result);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e5      	bne.n	8002c0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c40:	2200      	movs	r2, #0
 8002c42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d106      	bne.n	8002c5a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c50:	4619      	mov	r1, r3
 8002c52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002c54:	f7ff ff67 	bl	8002b26 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c58:	e002      	b.n	8002c60 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002c5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002c5c:	f7ff ff48 	bl	8002af0 <HAL_UART_RxCpltCallback>
}
 8002c60:	bf00      	nop
 8002c62:	3770      	adds	r7, #112	; 0x70
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d108      	bne.n	8002c96 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f7ff ff49 	bl	8002b26 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c94:	e002      	b.n	8002c9c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f7ff ff33 	bl	8002b02 <HAL_UART_RxHalfCpltCallback>
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b21      	cmp	r3, #33	; 0x21
 8002cd6:	d108      	bne.n	8002cea <UART_DMAError+0x46>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ce4:	68b8      	ldr	r0, [r7, #8]
 8002ce6:	f000 f92f 	bl	8002f48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b22      	cmp	r3, #34	; 0x22
 8002d0a:	d108      	bne.n	8002d1e <UART_DMAError+0x7a>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2200      	movs	r2, #0
 8002d16:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d18:	68b8      	ldr	r0, [r7, #8]
 8002d1a:	f000 f93c 	bl	8002f96 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d2a:	68b8      	ldr	r0, [r7, #8]
 8002d2c:	f7ff fef2 	bl	8002b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b090      	sub	sp, #64	; 0x40
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d48:	e050      	b.n	8002dec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d50:	d04c      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d007      	beq.n	8002d68 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d58:	f7fd fe6e 	bl	8000a38 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d241      	bcs.n	8002dec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	330c      	adds	r3, #12
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d88:	637a      	str	r2, [r7, #52]	; 0x34
 8002d8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e5      	bne.n	8002d68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	e853 3f00 	ldrex	r3, [r3]
 8002daa:	613b      	str	r3, [r7, #16]
   return(result);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3314      	adds	r3, #20
 8002dba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dbc:	623a      	str	r2, [r7, #32]
 8002dbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	69f9      	ldr	r1, [r7, #28]
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e5      	bne.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e00f      	b.n	8002e0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d09f      	beq.n	8002d4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3740      	adds	r7, #64	; 0x40
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b098      	sub	sp, #96	; 0x60
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	88fa      	ldrh	r2, [r7, #6]
 8002e2c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2222      	movs	r2, #34	; 0x22
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	4a3e      	ldr	r2, [pc, #248]	; (8002f3c <UART_Start_Receive_DMA+0x128>)
 8002e42:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	4a3d      	ldr	r2, [pc, #244]	; (8002f40 <UART_Start_Receive_DMA+0x12c>)
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	4a3c      	ldr	r2, [pc, #240]	; (8002f44 <UART_Start_Receive_DMA+0x130>)
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	2200      	movs	r2, #0
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002e5c:	f107 0308 	add.w	r3, r7, #8
 8002e60:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	f7fd ff52 	bl	8000d1c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d019      	beq.n	8002eca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002eb6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002eb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002ebc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e5      	bne.n	8002e96 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3314      	adds	r3, #20
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	e853 3f00 	ldrex	r3, [r3]
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3314      	adds	r3, #20
 8002ee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002eea:	63ba      	str	r2, [r7, #56]	; 0x38
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ef0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e5      	bne.n	8002eca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f14:	653b      	str	r3, [r7, #80]	; 0x50
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3314      	adds	r3, #20
 8002f1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f1e:	627a      	str	r2, [r7, #36]	; 0x24
 8002f20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	6a39      	ldr	r1, [r7, #32]
 8002f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e5      	bne.n	8002efe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3760      	adds	r7, #96	; 0x60
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	08002b3d 	.word	0x08002b3d
 8002f40:	08002c69 	.word	0x08002c69
 8002f44:	08002ca5 	.word	0x08002ca5

08002f48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	330c      	adds	r3, #12
 8002f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	e853 3f00 	ldrex	r3, [r3]
 8002f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	61ba      	str	r2, [r7, #24]
 8002f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f74:	6979      	ldr	r1, [r7, #20]
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	e841 2300 	strex	r3, r2, [r1]
 8002f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e5      	bne.n	8002f50 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002f8c:	bf00      	nop
 8002f8e:	3724      	adds	r7, #36	; 0x24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b095      	sub	sp, #84	; 0x54
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fbe:	643a      	str	r2, [r7, #64]	; 0x40
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3314      	adds	r3, #20
 8002fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	3314      	adds	r3, #20
 8002ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e5      	bne.n	8002fd2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	2b01      	cmp	r3, #1
 800300c:	d119      	bne.n	8003042 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	60bb      	str	r3, [r7, #8]
   return(result);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f023 0310 	bic.w	r3, r3, #16
 8003024:	647b      	str	r3, [r7, #68]	; 0x44
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	330c      	adds	r3, #12
 800302c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800302e:	61ba      	str	r2, [r7, #24]
 8003030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6979      	ldr	r1, [r7, #20]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	613b      	str	r3, [r7, #16]
   return(result);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e5      	bne.n	800300e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003050:	bf00      	nop
 8003052:	3754      	adds	r7, #84	; 0x54
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
	...

0800305c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003096:	f023 030c 	bic.w	r3, r3, #12
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2c      	ldr	r2, [pc, #176]	; (8003170 <UART_SetConfig+0x114>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d103      	bne.n	80030cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030c4:	f7fe fd52 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	e002      	b.n	80030d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030cc:	f7fe fd3a 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 80030d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009a      	lsls	r2, r3, #2
 80030dc:	441a      	add	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	4a22      	ldr	r2, [pc, #136]	; (8003174 <UART_SetConfig+0x118>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	0119      	lsls	r1, r3, #4
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	009a      	lsls	r2, r3, #2
 80030fc:	441a      	add	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	fbb2 f2f3 	udiv	r2, r2, r3
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <UART_SetConfig+0x118>)
 800310a:	fba3 0302 	umull	r0, r3, r3, r2
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2064      	movs	r0, #100	; 0x64
 8003112:	fb00 f303 	mul.w	r3, r0, r3
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	3332      	adds	r3, #50	; 0x32
 800311c:	4a15      	ldr	r2, [pc, #84]	; (8003174 <UART_SetConfig+0x118>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003128:	4419      	add	r1, r3
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <UART_SetConfig+0x118>)
 8003142:	fba3 0302 	umull	r0, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2064      	movs	r0, #100	; 0x64
 800314a:	fb00 f303 	mul.w	r3, r0, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	3332      	adds	r3, #50	; 0x32
 8003154:	4a07      	ldr	r2, [pc, #28]	; (8003174 <UART_SetConfig+0x118>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	f003 020f 	and.w	r2, r3, #15
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	440a      	add	r2, r1
 8003166:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40013800 	.word	0x40013800
 8003174:	51eb851f 	.word	0x51eb851f

08003178 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800317e:	f3ef 8305 	mrs	r3, IPSR
 8003182:	60bb      	str	r3, [r7, #8]
  return(result);
 8003184:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800318a:	f3ef 8310 	mrs	r3, PRIMASK
 800318e:	607b      	str	r3, [r7, #4]
  return(result);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <osKernelInitialize+0x32>
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <osKernelInitialize+0x60>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d109      	bne.n	80031b2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800319e:	f3ef 8311 	mrs	r3, BASEPRI
 80031a2:	603b      	str	r3, [r7, #0]
  return(result);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80031aa:	f06f 0305 	mvn.w	r3, #5
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e00c      	b.n	80031cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <osKernelInitialize+0x60>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d105      	bne.n	80031c6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80031ba:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <osKernelInitialize+0x60>)
 80031bc:	2201      	movs	r2, #1
 80031be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e002      	b.n	80031cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80031cc:	68fb      	ldr	r3, [r7, #12]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	200001a8 	.word	0x200001a8

080031dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031e2:	f3ef 8305 	mrs	r3, IPSR
 80031e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80031e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ee:	f3ef 8310 	mrs	r3, PRIMASK
 80031f2:	607b      	str	r3, [r7, #4]
  return(result);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <osKernelStart+0x32>
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <osKernelStart+0x64>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d109      	bne.n	8003216 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003202:	f3ef 8311 	mrs	r3, BASEPRI
 8003206:	603b      	str	r3, [r7, #0]
  return(result);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <osKernelStart+0x3a>
    stat = osErrorISR;
 800320e:	f06f 0305 	mvn.w	r3, #5
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e00e      	b.n	8003234 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003216:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <osKernelStart+0x64>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d107      	bne.n	800322e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <osKernelStart+0x64>)
 8003220:	2202      	movs	r2, #2
 8003222:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003224:	f001 f878 	bl	8004318 <vTaskStartScheduler>
      stat = osOK;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	e002      	b.n	8003234 <osKernelStart+0x58>
    } else {
      stat = osError;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003232:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003234:	68fb      	ldr	r3, [r7, #12]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200001a8 	.word	0x200001a8

08003244 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b092      	sub	sp, #72	; 0x48
 8003248:	af04      	add	r7, sp, #16
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003254:	f3ef 8305 	mrs	r3, IPSR
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 8094 	bne.w	800338a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003262:	f3ef 8310 	mrs	r3, PRIMASK
 8003266:	623b      	str	r3, [r7, #32]
  return(result);
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 808d 	bne.w	800338a <osThreadNew+0x146>
 8003270:	4b48      	ldr	r3, [pc, #288]	; (8003394 <osThreadNew+0x150>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d106      	bne.n	8003286 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003278:	f3ef 8311 	mrs	r3, BASEPRI
 800327c:	61fb      	str	r3, [r7, #28]
  return(result);
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 8082 	bne.w	800338a <osThreadNew+0x146>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d07e      	beq.n	800338a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003290:	2318      	movs	r3, #24
 8003292:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003294:	2300      	movs	r3, #0
 8003296:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003298:	f107 031b 	add.w	r3, r7, #27
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d045      	beq.n	8003336 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <osThreadNew+0x74>
        name = attr->name;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <osThreadNew+0x9a>
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	2b38      	cmp	r3, #56	; 0x38
 80032d0:	d805      	bhi.n	80032de <osThreadNew+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <osThreadNew+0x9e>
        return (NULL);
 80032de:	2300      	movs	r3, #0
 80032e0:	e054      	b.n	800338c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00e      	beq.n	8003318 <osThreadNew+0xd4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b5b      	cmp	r3, #91	; 0x5b
 8003300:	d90a      	bls.n	8003318 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <osThreadNew+0xd4>
        mem = 1;
 8003312:	2301      	movs	r3, #1
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
 8003316:	e010      	b.n	800333a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10c      	bne.n	800333a <osThreadNew+0xf6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d108      	bne.n	800333a <osThreadNew+0xf6>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <osThreadNew+0xf6>
          mem = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
 8003334:	e001      	b.n	800333a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	2b01      	cmp	r3, #1
 800333e:	d110      	bne.n	8003362 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003348:	9202      	str	r2, [sp, #8]
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003354:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fe12 	bl	8003f80 <xTaskCreateStatic>
 800335c:	4603      	mov	r3, r0
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	e013      	b.n	800338a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	d110      	bne.n	800338a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	b29a      	uxth	r2, r3
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fe5c 	bl	8004038 <xTaskCreate>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d001      	beq.n	800338a <osThreadNew+0x146>
          hTask = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800338a:	697b      	ldr	r3, [r7, #20]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3738      	adds	r7, #56	; 0x38
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200001a8 	.word	0x200001a8

08003398 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033a0:	f3ef 8305 	mrs	r3, IPSR
 80033a4:	613b      	str	r3, [r7, #16]
  return(result);
 80033a6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10f      	bne.n	80033cc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ac:	f3ef 8310 	mrs	r3, PRIMASK
 80033b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <osDelay+0x34>
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <osDelay+0x58>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d109      	bne.n	80033d4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033c0:	f3ef 8311 	mrs	r3, BASEPRI
 80033c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <osDelay+0x3c>
    stat = osErrorISR;
 80033cc:	f06f 0305 	mvn.w	r3, #5
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e007      	b.n	80033e4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 ff66 	bl	80042b0 <vTaskDelay>
    }
  }

  return (stat);
 80033e4:	697b      	ldr	r3, [r7, #20]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	200001a8 	.word	0x200001a8

080033f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a06      	ldr	r2, [pc, #24]	; (800341c <vApplicationGetIdleTaskMemory+0x28>)
 8003404:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <vApplicationGetIdleTaskMemory+0x2c>)
 800340a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	200001ac 	.word	0x200001ac
 8003420:	20000208 	.word	0x20000208

08003424 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a07      	ldr	r2, [pc, #28]	; (8003450 <vApplicationGetTimerTaskMemory+0x2c>)
 8003434:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4a06      	ldr	r2, [pc, #24]	; (8003454 <vApplicationGetTimerTaskMemory+0x30>)
 800343a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003442:	601a      	str	r2, [r3, #0]
}
 8003444:	bf00      	nop
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000408 	.word	0x20000408
 8003454:	20000464 	.word	0x20000464

08003458 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f103 0208 	add.w	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003470:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f103 0208 	add.w	r2, r3, #8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f103 0208 	add.w	r2, r3, #8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350a:	d103      	bne.n	8003514 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e00c      	b.n	800352e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3308      	adds	r3, #8
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	e002      	b.n	8003522 <vListInsert+0x2e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d2f6      	bcs.n	800351c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr

08003564 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6892      	ldr	r2, [r2, #8]
 800357a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6852      	ldr	r2, [r2, #4]
 8003584:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	d103      	bne.n	8003598 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	1e5a      	subs	r2, r3, #1
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
	...

080035b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035de:	bf00      	nop
 80035e0:	e7fe      	b.n	80035e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035e2:	f001 ffcb 	bl	800557c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	441a      	add	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	3b01      	subs	r3, #1
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	22ff      	movs	r2, #255	; 0xff
 8003626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	22ff      	movs	r2, #255	; 0xff
 800362e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d114      	bne.n	8003662 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01a      	beq.n	8003676 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3310      	adds	r3, #16
 8003644:	4618      	mov	r0, r3
 8003646:	f001 f8f1 	bl	800482c <xTaskRemoveFromEventList>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d012      	beq.n	8003676 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <xQueueGenericReset+0xcc>)
 8003652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	e009      	b.n	8003676 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3310      	adds	r3, #16
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fef6 	bl	8003458 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3324      	adds	r3, #36	; 0x24
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fef1 	bl	8003458 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003676:	f001 ffb1 	bl	80055dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800367a:	2301      	movs	r3, #1
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08e      	sub	sp, #56	; 0x38
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <xQueueGenericCreateStatic+0x52>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <xQueueGenericCreateStatic+0x56>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <xQueueGenericCreateStatic+0x58>
 80036de:	2300      	movs	r3, #0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	623b      	str	r3, [r7, #32]
}
 80036f6:	bf00      	nop
 80036f8:	e7fe      	b.n	80036f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <xQueueGenericCreateStatic+0x7e>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <xQueueGenericCreateStatic+0x82>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <xQueueGenericCreateStatic+0x84>
 800370a:	2300      	movs	r3, #0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	61fb      	str	r3, [r7, #28]
}
 8003722:	bf00      	nop
 8003724:	e7fe      	b.n	8003724 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003726:	2350      	movs	r3, #80	; 0x50
 8003728:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b50      	cmp	r3, #80	; 0x50
 800372e:	d00a      	beq.n	8003746 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	61bb      	str	r3, [r7, #24]
}
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003758:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f805 	bl	8003776 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800376e:	4618      	mov	r0, r3
 8003770:	3730      	adds	r7, #48	; 0x30
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	e002      	b.n	8003798 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037a4:	2101      	movs	r1, #1
 80037a6:	69b8      	ldr	r0, [r7, #24]
 80037a8:	f7ff ff06 	bl	80035b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	78fa      	ldrb	r2, [r7, #3]
 80037b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08e      	sub	sp, #56	; 0x38
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037ca:	2300      	movs	r3, #0
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <xQueueGenericSend+0x32>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d103      	bne.n	80037fc <xQueueGenericSend+0x40>
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <xQueueGenericSend+0x44>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <xQueueGenericSend+0x46>
 8003800:	2300      	movs	r3, #0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <xQueueGenericSend+0x60>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003818:	bf00      	nop
 800381a:	e7fe      	b.n	800381a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d103      	bne.n	800382a <xQueueGenericSend+0x6e>
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <xQueueGenericSend+0x72>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGenericSend+0x74>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10a      	bne.n	800384a <xQueueGenericSend+0x8e>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	623b      	str	r3, [r7, #32]
}
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800384a:	f001 f9b1 	bl	8004bb0 <xTaskGetSchedulerState>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <xQueueGenericSend+0x9e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <xQueueGenericSend+0xa2>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <xQueueGenericSend+0xa4>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <xQueueGenericSend+0xbe>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	61fb      	str	r3, [r7, #28]
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800387a:	f001 fe7f 	bl	800557c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <xQueueGenericSend+0xd4>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d129      	bne.n	80038e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003896:	f000 fa07 	bl	8003ca8 <prvCopyDataToQueue>
 800389a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	3324      	adds	r3, #36	; 0x24
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 ffbf 	bl	800482c <xTaskRemoveFromEventList>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d013      	beq.n	80038dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038b4:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <xQueueGenericSend+0x1f8>)
 80038b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	e00a      	b.n	80038dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038cc:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <xQueueGenericSend+0x1f8>)
 80038ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038dc:	f001 fe7e 	bl	80055dc <vPortExitCritical>
				return pdPASS;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e063      	b.n	80039ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ea:	f001 fe77 	bl	80055dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	e05c      	b.n	80039ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d106      	bne.n	8003906 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fff9 	bl	80048f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003902:	2301      	movs	r3, #1
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003906:	f001 fe69 	bl	80055dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800390a:	f000 fd6b 	bl	80043e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800390e:	f001 fe35 	bl	800557c <vPortEnterCritical>
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003918:	b25b      	sxtb	r3, r3
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800391e:	d103      	bne.n	8003928 <xQueueGenericSend+0x16c>
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800392e:	b25b      	sxtb	r3, r3
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003934:	d103      	bne.n	800393e <xQueueGenericSend+0x182>
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800393e:	f001 fe4d 	bl	80055dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003942:	1d3a      	adds	r2, r7, #4
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f000 ffe8 	bl	8004920 <xTaskCheckForTimeOut>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d124      	bne.n	80039a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003958:	f000 fa9e 	bl	8003e98 <prvIsQueueFull>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d018      	beq.n	8003994 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	3310      	adds	r3, #16
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f000 ff0e 	bl	800478c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003972:	f000 fa29 	bl	8003dc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003976:	f000 fd43 	bl	8004400 <xTaskResumeAll>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	f47f af7c 	bne.w	800387a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003982:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <xQueueGenericSend+0x1f8>)
 8003984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	e772      	b.n	800387a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003996:	f000 fa17 	bl	8003dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800399a:	f000 fd31 	bl	8004400 <xTaskResumeAll>
 800399e:	e76c      	b.n	800387a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039a2:	f000 fa11 	bl	8003dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039a6:	f000 fd2b 	bl	8004400 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039aa:	2300      	movs	r3, #0
		}
	}
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3738      	adds	r7, #56	; 0x38
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	e000ed04 	.word	0xe000ed04

080039b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08e      	sub	sp, #56	; 0x38
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d103      	bne.n	80039f4 <xQueueGenericSendFromISR+0x3c>
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <xQueueGenericSendFromISR+0x40>
 80039f4:	2301      	movs	r3, #1
 80039f6:	e000      	b.n	80039fa <xQueueGenericSendFromISR+0x42>
 80039f8:	2300      	movs	r3, #0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	623b      	str	r3, [r7, #32]
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d103      	bne.n	8003a22 <xQueueGenericSendFromISR+0x6a>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <xQueueGenericSendFromISR+0x6e>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <xQueueGenericSendFromISR+0x70>
 8003a26:	2300      	movs	r3, #0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	61fb      	str	r3, [r7, #28]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a42:	f001 fe5d 	bl	8005700 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a46:	f3ef 8211 	mrs	r2, BASEPRI
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	61ba      	str	r2, [r7, #24]
 8003a5c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a5e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d302      	bcc.n	8003a74 <xQueueGenericSendFromISR+0xbc>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d12c      	bne.n	8003ace <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a84:	f000 f910 	bl	8003ca8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a88:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a90:	d112      	bne.n	8003ab8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	3324      	adds	r3, #36	; 0x24
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fec4 	bl	800482c <xTaskRemoveFromEventList>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00e      	beq.n	8003ac8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e007      	b.n	8003ac8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ab8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003abc:	3301      	adds	r3, #1
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	b25a      	sxtb	r2, r3
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003acc:	e001      	b.n	8003ad2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003adc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3738      	adds	r7, #56	; 0x38
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <xQueueReceive+0x30>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	623b      	str	r3, [r7, #32]
}
 8003b14:	bf00      	nop
 8003b16:	e7fe      	b.n	8003b16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <xQueueReceive+0x3e>
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <xQueueReceive+0x42>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <xQueueReceive+0x44>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xQueueReceive+0x5e>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61fb      	str	r3, [r7, #28]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b46:	f001 f833 	bl	8004bb0 <xTaskGetSchedulerState>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <xQueueReceive+0x6e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <xQueueReceive+0x72>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <xQueueReceive+0x74>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <xQueueReceive+0x8e>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	61bb      	str	r3, [r7, #24]
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b76:	f001 fd01 	bl	800557c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01f      	beq.n	8003bc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8a:	f000 f8f7 	bl	8003d7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	1e5a      	subs	r2, r3, #1
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00f      	beq.n	8003bbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	3310      	adds	r3, #16
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fe42 	bl	800482c <xTaskRemoveFromEventList>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bae:	4b3d      	ldr	r3, [pc, #244]	; (8003ca4 <xQueueReceive+0x1bc>)
 8003bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bbe:	f001 fd0d 	bl	80055dc <vPortExitCritical>
				return pdPASS;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e069      	b.n	8003c9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bcc:	f001 fd06 	bl	80055dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e062      	b.n	8003c9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bda:	f107 0310 	add.w	r3, r7, #16
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fe88 	bl	80048f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003be8:	f001 fcf8 	bl	80055dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bec:	f000 fbfa 	bl	80043e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bf0:	f001 fcc4 	bl	800557c <vPortEnterCritical>
 8003bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c00:	d103      	bne.n	8003c0a <xQueueReceive+0x122>
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c16:	d103      	bne.n	8003c20 <xQueueReceive+0x138>
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c20:	f001 fcdc 	bl	80055dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c24:	1d3a      	adds	r2, r7, #4
 8003c26:	f107 0310 	add.w	r3, r7, #16
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fe77 	bl	8004920 <xTaskCheckForTimeOut>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d123      	bne.n	8003c80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c3a:	f000 f917 	bl	8003e6c <prvIsQueueEmpty>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	3324      	adds	r3, #36	; 0x24
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fd9d 	bl	800478c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c54:	f000 f8b8 	bl	8003dc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c58:	f000 fbd2 	bl	8004400 <xTaskResumeAll>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d189      	bne.n	8003b76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <xQueueReceive+0x1bc>)
 8003c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	e780      	b.n	8003b76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c76:	f000 f8a7 	bl	8003dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c7a:	f000 fbc1 	bl	8004400 <xTaskResumeAll>
 8003c7e:	e77a      	b.n	8003b76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c82:	f000 f8a1 	bl	8003dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c86:	f000 fbbb 	bl	8004400 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c8c:	f000 f8ee 	bl	8003e6c <prvIsQueueEmpty>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f43f af6f 	beq.w	8003b76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3730      	adds	r7, #48	; 0x30
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	e000ed04 	.word	0xe000ed04

08003ca8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d14d      	bne.n	8003d6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 ff8a 	bl	8004bec <xTaskPriorityDisinherit>
 8003cd8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	605a      	str	r2, [r3, #4]
 8003ce0:	e043      	b.n	8003d6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d119      	bne.n	8003d1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6898      	ldr	r0, [r3, #8]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	f001 ff6e 	bl	8005bd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	441a      	add	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d32b      	bcc.n	8003d6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	e026      	b.n	8003d6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68d8      	ldr	r0, [r3, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	461a      	mov	r2, r3
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	f001 ff54 	bl	8005bd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68da      	ldr	r2, [r3, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	425b      	negs	r3, r3
 8003d36:	441a      	add	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d207      	bcs.n	8003d58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	425b      	negs	r3, r3
 8003d52:	441a      	add	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d105      	bne.n	8003d6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d72:	697b      	ldr	r3, [r7, #20]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d018      	beq.n	8003dc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	441a      	add	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d303      	bcc.n	8003db0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68d9      	ldr	r1, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	461a      	mov	r2, r3
 8003dba:	6838      	ldr	r0, [r7, #0]
 8003dbc:	f001 ff0a 	bl	8005bd4 <memcpy>
	}
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003dd0:	f001 fbd4 	bl	800557c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ddc:	e011      	b.n	8003e02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3324      	adds	r3, #36	; 0x24
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fd1e 	bl	800482c <xTaskRemoveFromEventList>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003df6:	f000 fdf5 	bl	80049e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	dce9      	bgt.n	8003dde <prvUnlockQueue+0x16>
 8003e0a:	e000      	b.n	8003e0e <prvUnlockQueue+0x46>
					break;
 8003e0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	22ff      	movs	r2, #255	; 0xff
 8003e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e16:	f001 fbe1 	bl	80055dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e1a:	f001 fbaf 	bl	800557c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e26:	e011      	b.n	8003e4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d012      	beq.n	8003e56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3310      	adds	r3, #16
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fcf9 	bl	800482c <xTaskRemoveFromEventList>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e40:	f000 fdd0 	bl	80049e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e44:	7bbb      	ldrb	r3, [r7, #14]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	dce9      	bgt.n	8003e28 <prvUnlockQueue+0x60>
 8003e54:	e000      	b.n	8003e58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	22ff      	movs	r2, #255	; 0xff
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e60:	f001 fbbc 	bl	80055dc <vPortExitCritical>
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e74:	f001 fb82 	bl	800557c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e80:	2301      	movs	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	e001      	b.n	8003e8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e8a:	f001 fba7 	bl	80055dc <vPortExitCritical>

	return xReturn;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ea0:	f001 fb6c 	bl	800557c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d102      	bne.n	8003eb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e001      	b.n	8003eba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eba:	f001 fb8f 	bl	80055dc <vPortExitCritical>

	return xReturn;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e014      	b.n	8003f02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <vQueueAddToRegistry+0x4c>)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ee4:	490b      	ldr	r1, [pc, #44]	; (8003f14 <vQueueAddToRegistry+0x4c>)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <vQueueAddToRegistry+0x4c>)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003efa:	e006      	b.n	8003f0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b07      	cmp	r3, #7
 8003f06:	d9e7      	bls.n	8003ed8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	20000864 	.word	0x20000864

08003f18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f28:	f001 fb28 	bl	800557c <vPortEnterCritical>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f38:	d103      	bne.n	8003f42 <vQueueWaitForMessageRestricted+0x2a>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f4e:	d103      	bne.n	8003f58 <vQueueWaitForMessageRestricted+0x40>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f58:	f001 fb40 	bl	80055dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3324      	adds	r3, #36	; 0x24
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fc31 	bl	80047d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff ff28 	bl	8003dc8 <prvUnlockQueue>
	}
 8003f78:	bf00      	nop
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08e      	sub	sp, #56	; 0x38
 8003f84:	af04      	add	r7, sp, #16
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	623b      	str	r3, [r7, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	61fb      	str	r3, [r7, #28]
}
 8003fc2:	bf00      	nop
 8003fc4:	e7fe      	b.n	8003fc4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fc6:	235c      	movs	r3, #92	; 0x5c
 8003fc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b5c      	cmp	r3, #92	; 0x5c
 8003fce:	d00a      	beq.n	8003fe6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	61bb      	str	r3, [r7, #24]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01e      	beq.n	800402a <xTaskCreateStatic+0xaa>
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01b      	beq.n	800402a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004004:	2300      	movs	r3, #0
 8004006:	9303      	str	r3, [sp, #12]
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	9302      	str	r3, [sp, #8]
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f850 	bl	80040c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004024:	f000 f8d4 	bl	80041d0 <prvAddNewTaskToReadyList>
 8004028:	e001      	b.n	800402e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800402e:	697b      	ldr	r3, [r7, #20]
	}
 8004030:	4618      	mov	r0, r3
 8004032:	3728      	adds	r7, #40	; 0x28
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004038:	b580      	push	{r7, lr}
 800403a:	b08c      	sub	sp, #48	; 0x30
 800403c:	af04      	add	r7, sp, #16
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4618      	mov	r0, r3
 800404e:	f001 fb95 	bl	800577c <pvPortMalloc>
 8004052:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00e      	beq.n	8004078 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800405a:	205c      	movs	r0, #92	; 0x5c
 800405c:	f001 fb8e 	bl	800577c <pvPortMalloc>
 8004060:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
 800406e:	e005      	b.n	800407c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004070:	6978      	ldr	r0, [r7, #20]
 8004072:	f001 fc47 	bl	8005904 <vPortFree>
 8004076:	e001      	b.n	800407c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d017      	beq.n	80040b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	2300      	movs	r3, #0
 800408e:	9303      	str	r3, [sp, #12]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	9302      	str	r3, [sp, #8]
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f80e 	bl	80040c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040a6:	69f8      	ldr	r0, [r7, #28]
 80040a8:	f000 f892 	bl	80041d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040ac:	2301      	movs	r3, #1
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	e002      	b.n	80040b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040b8:	69bb      	ldr	r3, [r7, #24]
	}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b088      	sub	sp, #32
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
 80040ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	461a      	mov	r2, r3
 80040da:	21a5      	movs	r1, #165	; 0xa5
 80040dc:	f001 fd46 	bl	8005b6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040ea:	3b01      	subs	r3, #1
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f023 0307 	bic.w	r3, r3, #7
 80040f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <prvInitialiseNewTask+0x58>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	617b      	str	r3, [r7, #20]
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	e012      	b.n	8004146 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	7819      	ldrb	r1, [r3, #0]
 8004128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	3334      	adds	r3, #52	; 0x34
 8004130:	460a      	mov	r2, r1
 8004132:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	3301      	adds	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2b0f      	cmp	r3, #15
 800414a:	d9e9      	bls.n	8004120 <prvInitialiseNewTask+0x5e>
 800414c:	e000      	b.n	8004150 <prvInitialiseNewTask+0x8e>
		{
			break;
 800414e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	2b37      	cmp	r3, #55	; 0x37
 800415c:	d901      	bls.n	8004162 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800415e:	2337      	movs	r3, #55	; 0x37
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	2200      	movs	r2, #0
 8004172:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	3304      	adds	r3, #4
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f98c 	bl	8003496 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	3318      	adds	r3, #24
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff f987 	bl	8003496 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	2200      	movs	r2, #0
 80041a2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	68f9      	ldr	r1, [r7, #12]
 80041b0:	69b8      	ldr	r0, [r7, #24]
 80041b2:	f001 f8ef 	bl	8005394 <pxPortInitialiseStack>
 80041b6:	4602      	mov	r2, r0
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80041bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041c8:	bf00      	nop
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041d8:	f001 f9d0 	bl	800557c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041dc:	4b2d      	ldr	r3, [pc, #180]	; (8004294 <prvAddNewTaskToReadyList+0xc4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	4a2c      	ldr	r2, [pc, #176]	; (8004294 <prvAddNewTaskToReadyList+0xc4>)
 80041e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041e6:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041ee:	4a2a      	ldr	r2, [pc, #168]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041f4:	4b27      	ldr	r3, [pc, #156]	; (8004294 <prvAddNewTaskToReadyList+0xc4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d110      	bne.n	800421e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041fc:	f000 fc16 	bl	8004a2c <prvInitialiseTaskLists>
 8004200:	e00d      	b.n	800421e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004202:	4b26      	ldr	r3, [pc, #152]	; (800429c <prvAddNewTaskToReadyList+0xcc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800420a:	4b23      	ldr	r3, [pc, #140]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	429a      	cmp	r2, r3
 8004216:	d802      	bhi.n	800421e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004218:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <prvAddNewTaskToReadyList+0xd0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3301      	adds	r3, #1
 8004224:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <prvAddNewTaskToReadyList+0xd0>)
 8004226:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <prvAddNewTaskToReadyList+0xd0>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004234:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <prvAddNewTaskToReadyList+0xd4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d903      	bls.n	8004244 <prvAddNewTaskToReadyList+0x74>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <prvAddNewTaskToReadyList+0xd4>)
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <prvAddNewTaskToReadyList+0xd8>)
 8004252:	441a      	add	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7ff f927 	bl	80034ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004260:	f001 f9bc 	bl	80055dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <prvAddNewTaskToReadyList+0xcc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00e      	beq.n	800428a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <prvAddNewTaskToReadyList+0xc8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	429a      	cmp	r2, r3
 8004278:	d207      	bcs.n	800428a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <prvAddNewTaskToReadyList+0xdc>)
 800427c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000d78 	.word	0x20000d78
 8004298:	200008a4 	.word	0x200008a4
 800429c:	20000d84 	.word	0x20000d84
 80042a0:	20000d94 	.word	0x20000d94
 80042a4:	20000d80 	.word	0x20000d80
 80042a8:	200008a8 	.word	0x200008a8
 80042ac:	e000ed04 	.word	0xe000ed04

080042b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d017      	beq.n	80042f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042c2:	4b13      	ldr	r3, [pc, #76]	; (8004310 <vTaskDelay+0x60>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <vTaskDelay+0x30>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60bb      	str	r3, [r7, #8]
}
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042e0:	f000 f880 	bl	80043e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042e4:	2100      	movs	r1, #0
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fcee 	bl	8004cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042ec:	f000 f888 	bl	8004400 <xTaskResumeAll>
 80042f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d107      	bne.n	8004308 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <vTaskDelay+0x64>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000da0 	.word	0x20000da0
 8004314:	e000ed04 	.word	0xe000ed04

08004318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004326:	463a      	mov	r2, r7
 8004328:	1d39      	adds	r1, r7, #4
 800432a:	f107 0308 	add.w	r3, r7, #8
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff f860 	bl	80033f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	9202      	str	r2, [sp, #8]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	2300      	movs	r3, #0
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	460a      	mov	r2, r1
 8004346:	4921      	ldr	r1, [pc, #132]	; (80043cc <vTaskStartScheduler+0xb4>)
 8004348:	4821      	ldr	r0, [pc, #132]	; (80043d0 <vTaskStartScheduler+0xb8>)
 800434a:	f7ff fe19 	bl	8003f80 <xTaskCreateStatic>
 800434e:	4603      	mov	r3, r0
 8004350:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <vTaskStartScheduler+0xbc>)
 8004352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004354:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <vTaskStartScheduler+0xbc>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800435c:	2301      	movs	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e001      	b.n	8004366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d102      	bne.n	8004372 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800436c:	f000 fd00 	bl	8004d70 <xTimerCreateTimerTask>
 8004370:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d116      	bne.n	80043a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	613b      	str	r3, [r7, #16]
}
 800438a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800438c:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <vTaskStartScheduler+0xc0>)
 800438e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004392:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <vTaskStartScheduler+0xc4>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <vTaskStartScheduler+0xc8>)
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043a0:	f001 f87a 	bl	8005498 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043a4:	e00e      	b.n	80043c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ac:	d10a      	bne.n	80043c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	60fb      	str	r3, [r7, #12]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <vTaskStartScheduler+0xaa>
}
 80043c4:	bf00      	nop
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	080064d4 	.word	0x080064d4
 80043d0:	080049fd 	.word	0x080049fd
 80043d4:	20000d9c 	.word	0x20000d9c
 80043d8:	20000d98 	.word	0x20000d98
 80043dc:	20000d84 	.word	0x20000d84
 80043e0:	20000d7c 	.word	0x20000d7c

080043e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <vTaskSuspendAll+0x18>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	4a03      	ldr	r2, [pc, #12]	; (80043fc <vTaskSuspendAll+0x18>)
 80043f0:	6013      	str	r3, [r2, #0]
}
 80043f2:	bf00      	nop
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000da0 	.word	0x20000da0

08004400 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800440e:	4b42      	ldr	r3, [pc, #264]	; (8004518 <xTaskResumeAll+0x118>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <xTaskResumeAll+0x2c>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	603b      	str	r3, [r7, #0]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800442c:	f001 f8a6 	bl	800557c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004430:	4b39      	ldr	r3, [pc, #228]	; (8004518 <xTaskResumeAll+0x118>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3b01      	subs	r3, #1
 8004436:	4a38      	ldr	r2, [pc, #224]	; (8004518 <xTaskResumeAll+0x118>)
 8004438:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800443a:	4b37      	ldr	r3, [pc, #220]	; (8004518 <xTaskResumeAll+0x118>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d162      	bne.n	8004508 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <xTaskResumeAll+0x11c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d05e      	beq.n	8004508 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800444a:	e02f      	b.n	80044ac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800444c:	4b34      	ldr	r3, [pc, #208]	; (8004520 <xTaskResumeAll+0x120>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	3318      	adds	r3, #24
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff f883 	bl	8003564 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3304      	adds	r3, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff f87e 	bl	8003564 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <xTaskResumeAll+0x124>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d903      	bls.n	800447c <xTaskResumeAll+0x7c>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <xTaskResumeAll+0x124>)
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <xTaskResumeAll+0x128>)
 800448a:	441a      	add	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f7ff f80b 	bl	80034ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449c:	4b23      	ldr	r3, [pc, #140]	; (800452c <xTaskResumeAll+0x12c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80044a6:	4b22      	ldr	r3, [pc, #136]	; (8004530 <xTaskResumeAll+0x130>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044ac:	4b1c      	ldr	r3, [pc, #112]	; (8004520 <xTaskResumeAll+0x120>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1cb      	bne.n	800444c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044ba:	f000 fb55 	bl	8004b68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044be:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <xTaskResumeAll+0x134>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d010      	beq.n	80044ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044ca:	f000 f845 	bl	8004558 <xTaskIncrementTick>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80044d4:	4b16      	ldr	r3, [pc, #88]	; (8004530 <xTaskResumeAll+0x130>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3b01      	subs	r3, #1
 80044de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f1      	bne.n	80044ca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <xTaskResumeAll+0x134>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <xTaskResumeAll+0x130>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044f8:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <xTaskResumeAll+0x138>)
 80044fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004508:	f001 f868 	bl	80055dc <vPortExitCritical>

	return xAlreadyYielded;
 800450c:	68bb      	ldr	r3, [r7, #8]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000da0 	.word	0x20000da0
 800451c:	20000d78 	.word	0x20000d78
 8004520:	20000d38 	.word	0x20000d38
 8004524:	20000d80 	.word	0x20000d80
 8004528:	200008a8 	.word	0x200008a8
 800452c:	200008a4 	.word	0x200008a4
 8004530:	20000d8c 	.word	0x20000d8c
 8004534:	20000d88 	.word	0x20000d88
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004542:	4b04      	ldr	r3, [pc, #16]	; (8004554 <xTaskGetTickCount+0x18>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004548:	687b      	ldr	r3, [r7, #4]
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	20000d7c 	.word	0x20000d7c

08004558 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004562:	4b51      	ldr	r3, [pc, #324]	; (80046a8 <xTaskIncrementTick+0x150>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f040 808e 	bne.w	8004688 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800456c:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <xTaskIncrementTick+0x154>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004574:	4a4d      	ldr	r2, [pc, #308]	; (80046ac <xTaskIncrementTick+0x154>)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d120      	bne.n	80045c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004580:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <xTaskIncrementTick+0x158>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	603b      	str	r3, [r7, #0]
}
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <xTaskIncrementTick+0x46>
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <xTaskIncrementTick+0x158>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <xTaskIncrementTick+0x15c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a41      	ldr	r2, [pc, #260]	; (80046b0 <xTaskIncrementTick+0x158>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4a41      	ldr	r2, [pc, #260]	; (80046b4 <xTaskIncrementTick+0x15c>)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4b40      	ldr	r3, [pc, #256]	; (80046b8 <xTaskIncrementTick+0x160>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	4a3f      	ldr	r2, [pc, #252]	; (80046b8 <xTaskIncrementTick+0x160>)
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	f000 fad3 	bl	8004b68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045c2:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <xTaskIncrementTick+0x164>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d34e      	bcc.n	800466a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045cc:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <xTaskIncrementTick+0x158>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <xTaskIncrementTick+0x82>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <xTaskIncrementTick+0x84>
 80045da:	2300      	movs	r3, #0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e0:	4b36      	ldr	r3, [pc, #216]	; (80046bc <xTaskIncrementTick+0x164>)
 80045e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045e6:	601a      	str	r2, [r3, #0]
					break;
 80045e8:	e03f      	b.n	800466a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045ea:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <xTaskIncrementTick+0x158>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d203      	bcs.n	800460a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004602:	4a2e      	ldr	r2, [pc, #184]	; (80046bc <xTaskIncrementTick+0x164>)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6013      	str	r3, [r2, #0]
						break;
 8004608:	e02f      	b.n	800466a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	3304      	adds	r3, #4
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe ffa8 	bl	8003564 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	2b00      	cmp	r3, #0
 800461a:	d004      	beq.n	8004626 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	3318      	adds	r3, #24
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe ff9f 	bl	8003564 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462a:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <xTaskIncrementTick+0x168>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d903      	bls.n	800463a <xTaskIncrementTick+0xe2>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <xTaskIncrementTick+0x168>)
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4a1f      	ldr	r2, [pc, #124]	; (80046c4 <xTaskIncrementTick+0x16c>)
 8004648:	441a      	add	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	3304      	adds	r3, #4
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f7fe ff2c 	bl	80034ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <xTaskIncrementTick+0x170>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	429a      	cmp	r2, r3
 8004662:	d3b3      	bcc.n	80045cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004664:	2301      	movs	r3, #1
 8004666:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004668:	e7b0      	b.n	80045cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800466a:	4b17      	ldr	r3, [pc, #92]	; (80046c8 <xTaskIncrementTick+0x170>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004670:	4914      	ldr	r1, [pc, #80]	; (80046c4 <xTaskIncrementTick+0x16c>)
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d907      	bls.n	8004692 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004682:	2301      	movs	r3, #1
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e004      	b.n	8004692 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <xTaskIncrementTick+0x174>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <xTaskIncrementTick+0x174>)
 8004690:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004692:	4b0f      	ldr	r3, [pc, #60]	; (80046d0 <xTaskIncrementTick+0x178>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800469a:	2301      	movs	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800469e:	697b      	ldr	r3, [r7, #20]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000da0 	.word	0x20000da0
 80046ac:	20000d7c 	.word	0x20000d7c
 80046b0:	20000d30 	.word	0x20000d30
 80046b4:	20000d34 	.word	0x20000d34
 80046b8:	20000d90 	.word	0x20000d90
 80046bc:	20000d98 	.word	0x20000d98
 80046c0:	20000d80 	.word	0x20000d80
 80046c4:	200008a8 	.word	0x200008a8
 80046c8:	200008a4 	.word	0x200008a4
 80046cc:	20000d88 	.word	0x20000d88
 80046d0:	20000d8c 	.word	0x20000d8c

080046d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046da:	4b27      	ldr	r3, [pc, #156]	; (8004778 <vTaskSwitchContext+0xa4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046e2:	4b26      	ldr	r3, [pc, #152]	; (800477c <vTaskSwitchContext+0xa8>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046e8:	e041      	b.n	800476e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <vTaskSwitchContext+0xa8>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80046f0:	4b23      	ldr	r3, [pc, #140]	; (8004780 <vTaskSwitchContext+0xac>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	e010      	b.n	800471a <vTaskSwitchContext+0x46>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <vTaskSwitchContext+0x40>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <vTaskSwitchContext+0x3e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3b01      	subs	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	491a      	ldr	r1, [pc, #104]	; (8004784 <vTaskSwitchContext+0xb0>)
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0e4      	beq.n	80046f8 <vTaskSwitchContext+0x24>
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4a12      	ldr	r2, [pc, #72]	; (8004784 <vTaskSwitchContext+0xb0>)
 800473a:	4413      	add	r3, r2
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	3308      	adds	r3, #8
 8004750:	429a      	cmp	r2, r3
 8004752:	d104      	bne.n	800475e <vTaskSwitchContext+0x8a>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	4a08      	ldr	r2, [pc, #32]	; (8004788 <vTaskSwitchContext+0xb4>)
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	4a05      	ldr	r2, [pc, #20]	; (8004780 <vTaskSwitchContext+0xac>)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6013      	str	r3, [r2, #0]
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	20000da0 	.word	0x20000da0
 800477c:	20000d8c 	.word	0x20000d8c
 8004780:	20000d80 	.word	0x20000d80
 8004784:	200008a8 	.word	0x200008a8
 8004788:	200008a4 	.word	0x200008a4

0800478c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	60fb      	str	r3, [r7, #12]
}
 80047ae:	bf00      	nop
 80047b0:	e7fe      	b.n	80047b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <vTaskPlaceOnEventList+0x44>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3318      	adds	r3, #24
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fe fe9a 	bl	80034f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047c0:	2101      	movs	r1, #1
 80047c2:	6838      	ldr	r0, [r7, #0]
 80047c4:	f000 fa80 	bl	8004cc8 <prvAddCurrentTaskToDelayedList>
}
 80047c8:	bf00      	nop
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	200008a4 	.word	0x200008a4

080047d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	617b      	str	r3, [r7, #20]
}
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <vTaskPlaceOnEventListRestricted+0x54>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	3318      	adds	r3, #24
 8004802:	4619      	mov	r1, r3
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7fe fe52 	bl	80034ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004814:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	68b8      	ldr	r0, [r7, #8]
 800481a:	f000 fa55 	bl	8004cc8 <prvAddCurrentTaskToDelayedList>
	}
 800481e:	bf00      	nop
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200008a4 	.word	0x200008a4

0800482c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10a      	bne.n	8004858 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60fb      	str	r3, [r7, #12]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	3318      	adds	r3, #24
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe fe81 	bl	8003564 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004862:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <xTaskRemoveFromEventList+0xb0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11d      	bne.n	80048a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fe78 	bl	8003564 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004878:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <xTaskRemoveFromEventList+0xb4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d903      	bls.n	8004888 <xTaskRemoveFromEventList+0x5c>
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004884:	4a16      	ldr	r2, [pc, #88]	; (80048e0 <xTaskRemoveFromEventList+0xb4>)
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <xTaskRemoveFromEventList+0xb8>)
 8004896:	441a      	add	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	3304      	adds	r3, #4
 800489c:	4619      	mov	r1, r3
 800489e:	4610      	mov	r0, r2
 80048a0:	f7fe fe05 	bl	80034ae <vListInsertEnd>
 80048a4:	e005      	b.n	80048b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	3318      	adds	r3, #24
 80048aa:	4619      	mov	r1, r3
 80048ac:	480e      	ldr	r0, [pc, #56]	; (80048e8 <xTaskRemoveFromEventList+0xbc>)
 80048ae:	f7fe fdfe 	bl	80034ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <xTaskRemoveFromEventList+0xc0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	429a      	cmp	r2, r3
 80048be:	d905      	bls.n	80048cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048c0:	2301      	movs	r3, #1
 80048c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <xTaskRemoveFromEventList+0xc4>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	e001      	b.n	80048d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048d0:	697b      	ldr	r3, [r7, #20]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000da0 	.word	0x20000da0
 80048e0:	20000d80 	.word	0x20000d80
 80048e4:	200008a8 	.word	0x200008a8
 80048e8:	20000d38 	.word	0x20000d38
 80048ec:	200008a4 	.word	0x200008a4
 80048f0:	20000d8c 	.word	0x20000d8c

080048f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <vTaskInternalSetTimeOutState+0x24>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <vTaskInternalSetTimeOutState+0x28>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	605a      	str	r2, [r3, #4]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000d90 	.word	0x20000d90
 800491c:	20000d7c 	.word	0x20000d7c

08004920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10a      	bne.n	8004946 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	613b      	str	r3, [r7, #16]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	60fb      	str	r3, [r7, #12]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004962:	f000 fe0b 	bl	800557c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <xTaskCheckForTimeOut+0xbc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800497e:	d102      	bne.n	8004986 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004980:	2300      	movs	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e023      	b.n	80049ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <xTaskCheckForTimeOut+0xc0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d007      	beq.n	80049a2 <xTaskCheckForTimeOut+0x82>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	429a      	cmp	r2, r3
 800499a:	d302      	bcc.n	80049a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800499c:	2301      	movs	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	e015      	b.n	80049ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d20b      	bcs.n	80049c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	1ad2      	subs	r2, r2, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7ff ff9b 	bl	80048f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	e004      	b.n	80049ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049ce:	f000 fe05 	bl	80055dc <vPortExitCritical>

	return xReturn;
 80049d2:	69fb      	ldr	r3, [r7, #28]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000d7c 	.word	0x20000d7c
 80049e0:	20000d90 	.word	0x20000d90

080049e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <vTaskMissedYield+0x14>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
}
 80049ee:	bf00      	nop
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000d8c 	.word	0x20000d8c

080049fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a04:	f000 f852 	bl	8004aac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a08:	4b06      	ldr	r3, [pc, #24]	; (8004a24 <prvIdleTask+0x28>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d9f9      	bls.n	8004a04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <prvIdleTask+0x2c>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a20:	e7f0      	b.n	8004a04 <prvIdleTask+0x8>
 8004a22:	bf00      	nop
 8004a24:	200008a8 	.word	0x200008a8
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	e00c      	b.n	8004a52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <prvInitialiseTaskLists+0x60>)
 8004a44:	4413      	add	r3, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fd06 	bl	8003458 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b37      	cmp	r3, #55	; 0x37
 8004a56:	d9ef      	bls.n	8004a38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a58:	480d      	ldr	r0, [pc, #52]	; (8004a90 <prvInitialiseTaskLists+0x64>)
 8004a5a:	f7fe fcfd 	bl	8003458 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a5e:	480d      	ldr	r0, [pc, #52]	; (8004a94 <prvInitialiseTaskLists+0x68>)
 8004a60:	f7fe fcfa 	bl	8003458 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a64:	480c      	ldr	r0, [pc, #48]	; (8004a98 <prvInitialiseTaskLists+0x6c>)
 8004a66:	f7fe fcf7 	bl	8003458 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a6a:	480c      	ldr	r0, [pc, #48]	; (8004a9c <prvInitialiseTaskLists+0x70>)
 8004a6c:	f7fe fcf4 	bl	8003458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a70:	480b      	ldr	r0, [pc, #44]	; (8004aa0 <prvInitialiseTaskLists+0x74>)
 8004a72:	f7fe fcf1 	bl	8003458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <prvInitialiseTaskLists+0x78>)
 8004a78:	4a05      	ldr	r2, [pc, #20]	; (8004a90 <prvInitialiseTaskLists+0x64>)
 8004a7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <prvInitialiseTaskLists+0x7c>)
 8004a7e:	4a05      	ldr	r2, [pc, #20]	; (8004a94 <prvInitialiseTaskLists+0x68>)
 8004a80:	601a      	str	r2, [r3, #0]
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200008a8 	.word	0x200008a8
 8004a90:	20000d08 	.word	0x20000d08
 8004a94:	20000d1c 	.word	0x20000d1c
 8004a98:	20000d38 	.word	0x20000d38
 8004a9c:	20000d4c 	.word	0x20000d4c
 8004aa0:	20000d64 	.word	0x20000d64
 8004aa4:	20000d30 	.word	0x20000d30
 8004aa8:	20000d34 	.word	0x20000d34

08004aac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ab2:	e019      	b.n	8004ae8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ab4:	f000 fd62 	bl	800557c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ab8:	4b10      	ldr	r3, [pc, #64]	; (8004afc <prvCheckTasksWaitingTermination+0x50>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe fd4d 	bl	8003564 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <prvCheckTasksWaitingTermination+0x54>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <prvCheckTasksWaitingTermination+0x54>)
 8004ad2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <prvCheckTasksWaitingTermination+0x58>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <prvCheckTasksWaitingTermination+0x58>)
 8004adc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ade:	f000 fd7d 	bl	80055dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f810 	bl	8004b08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ae8:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <prvCheckTasksWaitingTermination+0x58>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e1      	bne.n	8004ab4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000d4c 	.word	0x20000d4c
 8004b00:	20000d78 	.word	0x20000d78
 8004b04:	20000d60 	.word	0x20000d60

08004b08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d108      	bne.n	8004b2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fef0 	bl	8005904 <vPortFree>
				vPortFree( pxTCB );
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 feed 	bl	8005904 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b2a:	e018      	b.n	8004b5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d103      	bne.n	8004b3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fee4 	bl	8005904 <vPortFree>
	}
 8004b3c:	e00f      	b.n	8004b5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d00a      	beq.n	8004b5e <prvDeleteTCB+0x56>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	60fb      	str	r3, [r7, #12]
}
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <prvDeleteTCB+0x54>
	}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <prvResetNextTaskUnblockTime+0x40>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <prvResetNextTaskUnblockTime+0x14>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <prvResetNextTaskUnblockTime+0x16>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b82:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <prvResetNextTaskUnblockTime+0x44>)
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b8a:	e008      	b.n	8004b9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <prvResetNextTaskUnblockTime+0x40>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <prvResetNextTaskUnblockTime+0x44>)
 8004b9c:	6013      	str	r3, [r2, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	20000d30 	.word	0x20000d30
 8004bac:	20000d98 	.word	0x20000d98

08004bb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <xTaskGetSchedulerState+0x34>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	607b      	str	r3, [r7, #4]
 8004bc2:	e008      	b.n	8004bd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bc4:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <xTaskGetSchedulerState+0x38>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	607b      	str	r3, [r7, #4]
 8004bd0:	e001      	b.n	8004bd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004bd6:	687b      	ldr	r3, [r7, #4]
	}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000d84 	.word	0x20000d84
 8004be8:	20000da0 	.word	0x20000da0

08004bec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d056      	beq.n	8004cb0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c02:	4b2e      	ldr	r3, [pc, #184]	; (8004cbc <xTaskPriorityDisinherit+0xd0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d00a      	beq.n	8004c22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60fb      	str	r3, [r7, #12]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	60bb      	str	r3, [r7, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	e7fe      	b.n	8004c3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c44:	1e5a      	subs	r2, r3, #1
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d02c      	beq.n	8004cb0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d128      	bne.n	8004cb0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	3304      	adds	r3, #4
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe fc7e 	bl	8003564 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <xTaskPriorityDisinherit+0xd4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d903      	bls.n	8004c90 <xTaskPriorityDisinherit+0xa4>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <xTaskPriorityDisinherit+0xd4>)
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <xTaskPriorityDisinherit+0xd8>)
 8004c9e:	441a      	add	r2, r3
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f7fe fc01 	bl	80034ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cb0:	697b      	ldr	r3, [r7, #20]
	}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	200008a4 	.word	0x200008a4
 8004cc0:	20000d80 	.word	0x20000d80
 8004cc4:	200008a8 	.word	0x200008a8

08004cc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cd2:	4b21      	ldr	r3, [pc, #132]	; (8004d58 <prvAddCurrentTaskToDelayedList+0x90>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cd8:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fe fc40 	bl	8003564 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cea:	d10a      	bne.n	8004d02 <prvAddCurrentTaskToDelayedList+0x3a>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf2:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4819      	ldr	r0, [pc, #100]	; (8004d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8004cfc:	f7fe fbd7 	bl	80034ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d00:	e026      	b.n	8004d50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d209      	bcs.n	8004d2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f7fe fbe4 	bl	80034f4 <vListInsert>
}
 8004d2c:	e010      	b.n	8004d50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	f7fe fbda 	bl	80034f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d202      	bcs.n	8004d50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d4a:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	6013      	str	r3, [r2, #0]
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000d7c 	.word	0x20000d7c
 8004d5c:	200008a4 	.word	0x200008a4
 8004d60:	20000d64 	.word	0x20000d64
 8004d64:	20000d34 	.word	0x20000d34
 8004d68:	20000d30 	.word	0x20000d30
 8004d6c:	20000d98 	.word	0x20000d98

08004d70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d7a:	f000 facb 	bl	8005314 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d7e:	4b1c      	ldr	r3, [pc, #112]	; (8004df0 <xTimerCreateTimerTask+0x80>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d021      	beq.n	8004dca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d8e:	1d3a      	adds	r2, r7, #4
 8004d90:	f107 0108 	add.w	r1, r7, #8
 8004d94:	f107 030c 	add.w	r3, r7, #12
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fe fb43 	bl	8003424 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	9202      	str	r2, [sp, #8]
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	2302      	movs	r3, #2
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	2300      	movs	r3, #0
 8004dae:	460a      	mov	r2, r1
 8004db0:	4910      	ldr	r1, [pc, #64]	; (8004df4 <xTimerCreateTimerTask+0x84>)
 8004db2:	4811      	ldr	r0, [pc, #68]	; (8004df8 <xTimerCreateTimerTask+0x88>)
 8004db4:	f7ff f8e4 	bl	8003f80 <xTaskCreateStatic>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a10      	ldr	r2, [pc, #64]	; (8004dfc <xTimerCreateTimerTask+0x8c>)
 8004dbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <xTimerCreateTimerTask+0x8c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	613b      	str	r3, [r7, #16]
}
 8004de2:	bf00      	nop
 8004de4:	e7fe      	b.n	8004de4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004de6:	697b      	ldr	r3, [r7, #20]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000dd4 	.word	0x20000dd4
 8004df4:	080064dc 	.word	0x080064dc
 8004df8:	08004f1d 	.word	0x08004f1d
 8004dfc:	20000dd8 	.word	0x20000dd8

08004e00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	623b      	str	r3, [r7, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e2e:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <xTimerGenericCommand+0x98>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d02a      	beq.n	8004e8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	dc18      	bgt.n	8004e7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e48:	f7ff feb2 	bl	8004bb0 <xTaskGetSchedulerState>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d109      	bne.n	8004e66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <xTimerGenericCommand+0x98>)
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	f107 0110 	add.w	r1, r7, #16
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5e:	f7fe fcad 	bl	80037bc <xQueueGenericSend>
 8004e62:	6278      	str	r0, [r7, #36]	; 0x24
 8004e64:	e012      	b.n	8004e8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <xTimerGenericCommand+0x98>)
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	f107 0110 	add.w	r1, r7, #16
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2200      	movs	r2, #0
 8004e72:	f7fe fca3 	bl	80037bc <xQueueGenericSend>
 8004e76:	6278      	str	r0, [r7, #36]	; 0x24
 8004e78:	e008      	b.n	8004e8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <xTimerGenericCommand+0x98>)
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	f107 0110 	add.w	r1, r7, #16
 8004e82:	2300      	movs	r3, #0
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	f7fe fd97 	bl	80039b8 <xQueueGenericSendFromISR>
 8004e8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3728      	adds	r7, #40	; 0x28
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000dd4 	.word	0x20000dd4

08004e9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ea6:	4b1c      	ldr	r3, [pc, #112]	; (8004f18 <prvProcessExpiredTimer+0x7c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fe fb55 	bl	8003564 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d122      	bne.n	8004f08 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	18d1      	adds	r1, r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	6978      	ldr	r0, [r7, #20]
 8004ed0:	f000 f8c8 	bl	8005064 <prvInsertTimerInActiveList>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d016      	beq.n	8004f08 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004eda:	2300      	movs	r3, #0
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	6978      	ldr	r0, [r7, #20]
 8004ee6:	f7ff ff8b 	bl	8004e00 <xTimerGenericCommand>
 8004eea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	60fb      	str	r3, [r7, #12]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	6978      	ldr	r0, [r7, #20]
 8004f0e:	4798      	blx	r3
}
 8004f10:	bf00      	nop
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000dcc 	.word	0x20000dcc

08004f1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f24:	f107 0308 	add.w	r3, r7, #8
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f857 	bl	8004fdc <prvGetNextExpireTime>
 8004f2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4619      	mov	r1, r3
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f803 	bl	8004f40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f3a:	f000 f8d5 	bl	80050e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f3e:	e7f1      	b.n	8004f24 <prvTimerTask+0x8>

08004f40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f4a:	f7ff fa4b 	bl	80043e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f4e:	f107 0308 	add.w	r3, r7, #8
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f866 	bl	8005024 <prvSampleTimeNow>
 8004f58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d130      	bne.n	8004fc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <prvProcessTimerOrBlockTask+0x3c>
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d806      	bhi.n	8004f7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f6e:	f7ff fa47 	bl	8004400 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f72:	68f9      	ldr	r1, [r7, #12]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff ff91 	bl	8004e9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f7a:	e024      	b.n	8004fc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f82:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <prvProcessTimerOrBlockTask+0x90>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f94:	4b0f      	ldr	r3, [pc, #60]	; (8004fd4 <prvProcessTimerOrBlockTask+0x94>)
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f7fe ffb9 	bl	8003f18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004fa6:	f7ff fa2b 	bl	8004400 <xTaskResumeAll>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <prvProcessTimerOrBlockTask+0x98>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
}
 8004fc0:	e001      	b.n	8004fc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004fc2:	f7ff fa1d 	bl	8004400 <xTaskResumeAll>
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000dd0 	.word	0x20000dd0
 8004fd4:	20000dd4 	.word	0x20000dd4
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <prvGetNextExpireTime+0x44>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bf0c      	ite	eq
 8004fee:	2301      	moveq	r3, #1
 8004ff0:	2300      	movne	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d105      	bne.n	800500e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005002:	4b07      	ldr	r3, [pc, #28]	; (8005020 <prvGetNextExpireTime+0x44>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e001      	b.n	8005012 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005012:	68fb      	ldr	r3, [r7, #12]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	20000dcc 	.word	0x20000dcc

08005024 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800502c:	f7ff fa86 	bl	800453c <xTaskGetTickCount>
 8005030:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <prvSampleTimeNow+0x3c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	429a      	cmp	r2, r3
 800503a:	d205      	bcs.n	8005048 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800503c:	f000 f908 	bl	8005250 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e002      	b.n	800504e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800504e:	4a04      	ldr	r2, [pc, #16]	; (8005060 <prvSampleTimeNow+0x3c>)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005054:	68fb      	ldr	r3, [r7, #12]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000ddc 	.word	0x20000ddc

08005064 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d812      	bhi.n	80050b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	1ad2      	subs	r2, r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	429a      	cmp	r2, r3
 8005096:	d302      	bcc.n	800509e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e01b      	b.n	80050d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800509e:	4b10      	ldr	r3, [pc, #64]	; (80050e0 <prvInsertTimerInActiveList+0x7c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3304      	adds	r3, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fe fa23 	bl	80034f4 <vListInsert>
 80050ae:	e012      	b.n	80050d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d206      	bcs.n	80050c6 <prvInsertTimerInActiveList+0x62>
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d302      	bcc.n	80050c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e007      	b.n	80050d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <prvInsertTimerInActiveList+0x80>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fe fa0f 	bl	80034f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050d6:	697b      	ldr	r3, [r7, #20]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000dd0 	.word	0x20000dd0
 80050e4:	20000dcc 	.word	0x20000dcc

080050e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08e      	sub	sp, #56	; 0x38
 80050ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050ee:	e09d      	b.n	800522c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	da18      	bge.n	8005128 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	3304      	adds	r3, #4
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	61fb      	str	r3, [r7, #28]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800511e:	6850      	ldr	r0, [r2, #4]
 8005120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005122:	6892      	ldr	r2, [r2, #8]
 8005124:	4611      	mov	r1, r2
 8005126:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	db7e      	blt.n	800522c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	3304      	adds	r3, #4
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fa10 	bl	8003564 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005144:	463b      	mov	r3, r7
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff ff6c 	bl	8005024 <prvSampleTimeNow>
 800514c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b09      	cmp	r3, #9
 8005152:	d86a      	bhi.n	800522a <prvProcessReceivedCommands+0x142>
 8005154:	a201      	add	r2, pc, #4	; (adr r2, 800515c <prvProcessReceivedCommands+0x74>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	08005185 	.word	0x08005185
 8005160:	08005185 	.word	0x08005185
 8005164:	08005185 	.word	0x08005185
 8005168:	0800522d 	.word	0x0800522d
 800516c:	080051e1 	.word	0x080051e1
 8005170:	08005219 	.word	0x08005219
 8005174:	08005185 	.word	0x08005185
 8005178:	08005185 	.word	0x08005185
 800517c:	0800522d 	.word	0x0800522d
 8005180:	080051e1 	.word	0x080051e1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	18d1      	adds	r1, r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005192:	f7ff ff67 	bl	8005064 <prvInsertTimerInActiveList>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d047      	beq.n	800522c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d13f      	bne.n	800522c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	441a      	add	r2, r3
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	2100      	movs	r1, #0
 80051bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051be:	f7ff fe1f 	bl	8004e00 <xTimerGenericCommand>
 80051c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d130      	bne.n	800522c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	61bb      	str	r3, [r7, #24]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10a      	bne.n	8005204 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	617b      	str	r3, [r7, #20]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	18d1      	adds	r1, r2, r3
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005210:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005212:	f7ff ff27 	bl	8005064 <prvInsertTimerInActiveList>
					break;
 8005216:	e009      	b.n	800522c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005224:	f000 fb6e 	bl	8005904 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005228:	e000      	b.n	800522c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800522a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800522c:	4b07      	ldr	r3, [pc, #28]	; (800524c <prvProcessReceivedCommands+0x164>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	1d39      	adds	r1, r7, #4
 8005232:	2200      	movs	r2, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe fc57 	bl	8003ae8 <xQueueReceive>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	f47f af57 	bne.w	80050f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	3730      	adds	r7, #48	; 0x30
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000dd4 	.word	0x20000dd4

08005250 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005256:	e045      	b.n	80052e4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005258:	4b2c      	ldr	r3, [pc, #176]	; (800530c <prvSwitchTimerLists+0xbc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005262:	4b2a      	ldr	r3, [pc, #168]	; (800530c <prvSwitchTimerLists+0xbc>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3304      	adds	r3, #4
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe f977 	bl	8003564 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d12e      	bne.n	80052e4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	429a      	cmp	r2, r3
 8005296:	d90e      	bls.n	80052b6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052a4:	4b19      	ldr	r3, [pc, #100]	; (800530c <prvSwitchTimerLists+0xbc>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f7fe f920 	bl	80034f4 <vListInsert>
 80052b4:	e016      	b.n	80052e4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052b6:	2300      	movs	r3, #0
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	2300      	movs	r3, #0
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	2100      	movs	r1, #0
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff fd9d 	bl	8004e00 <xTimerGenericCommand>
 80052c6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	603b      	str	r3, [r7, #0]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <prvSwitchTimerLists+0xbc>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1b4      	bne.n	8005258 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052ee:	4b07      	ldr	r3, [pc, #28]	; (800530c <prvSwitchTimerLists+0xbc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <prvSwitchTimerLists+0xc0>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a04      	ldr	r2, [pc, #16]	; (800530c <prvSwitchTimerLists+0xbc>)
 80052fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <prvSwitchTimerLists+0xc0>)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	6013      	str	r3, [r2, #0]
}
 8005302:	bf00      	nop
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000dcc 	.word	0x20000dcc
 8005310:	20000dd0 	.word	0x20000dd0

08005314 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800531a:	f000 f92f 	bl	800557c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <prvCheckForValidListAndQueue+0x60>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d120      	bne.n	8005368 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005326:	4814      	ldr	r0, [pc, #80]	; (8005378 <prvCheckForValidListAndQueue+0x64>)
 8005328:	f7fe f896 	bl	8003458 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800532c:	4813      	ldr	r0, [pc, #76]	; (800537c <prvCheckForValidListAndQueue+0x68>)
 800532e:	f7fe f893 	bl	8003458 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <prvCheckForValidListAndQueue+0x6c>)
 8005334:	4a10      	ldr	r2, [pc, #64]	; (8005378 <prvCheckForValidListAndQueue+0x64>)
 8005336:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005338:	4b12      	ldr	r3, [pc, #72]	; (8005384 <prvCheckForValidListAndQueue+0x70>)
 800533a:	4a10      	ldr	r2, [pc, #64]	; (800537c <prvCheckForValidListAndQueue+0x68>)
 800533c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800533e:	2300      	movs	r3, #0
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	4b11      	ldr	r3, [pc, #68]	; (8005388 <prvCheckForValidListAndQueue+0x74>)
 8005344:	4a11      	ldr	r2, [pc, #68]	; (800538c <prvCheckForValidListAndQueue+0x78>)
 8005346:	2110      	movs	r1, #16
 8005348:	200a      	movs	r0, #10
 800534a:	f7fe f99d 	bl	8003688 <xQueueGenericCreateStatic>
 800534e:	4603      	mov	r3, r0
 8005350:	4a08      	ldr	r2, [pc, #32]	; (8005374 <prvCheckForValidListAndQueue+0x60>)
 8005352:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005354:	4b07      	ldr	r3, [pc, #28]	; (8005374 <prvCheckForValidListAndQueue+0x60>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <prvCheckForValidListAndQueue+0x60>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	490b      	ldr	r1, [pc, #44]	; (8005390 <prvCheckForValidListAndQueue+0x7c>)
 8005362:	4618      	mov	r0, r3
 8005364:	f7fe fdb0 	bl	8003ec8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005368:	f000 f938 	bl	80055dc <vPortExitCritical>
}
 800536c:	bf00      	nop
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20000dd4 	.word	0x20000dd4
 8005378:	20000da4 	.word	0x20000da4
 800537c:	20000db8 	.word	0x20000db8
 8005380:	20000dcc 	.word	0x20000dcc
 8005384:	20000dd0 	.word	0x20000dd0
 8005388:	20000e80 	.word	0x20000e80
 800538c:	20000de0 	.word	0x20000de0
 8005390:	080064e4 	.word	0x080064e4

08005394 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3b04      	subs	r3, #4
 80053a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3b04      	subs	r3, #4
 80053b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f023 0201 	bic.w	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3b04      	subs	r3, #4
 80053c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053c4:	4a08      	ldr	r2, [pc, #32]	; (80053e8 <pxPortInitialiseStack+0x54>)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3b14      	subs	r3, #20
 80053ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3b20      	subs	r3, #32
 80053da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053dc:	68fb      	ldr	r3, [r7, #12]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr
 80053e8:	080053ed 	.word	0x080053ed

080053ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <prvTaskExitError+0x54>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053fe:	d00a      	beq.n	8005416 <prvTaskExitError+0x2a>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	60fb      	str	r3, [r7, #12]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <prvTaskExitError+0x28>
	__asm volatile
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	60bb      	str	r3, [r7, #8]
}
 8005428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800542a:	bf00      	nop
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0fc      	beq.n	800542c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	2000000c 	.word	0x2000000c
	...

08005450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <pxCurrentTCBConst2>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	6808      	ldr	r0, [r1, #0]
 8005456:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800545a:	f380 8809 	msr	PSP, r0
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	f04e 0e0d 	orr.w	lr, lr, #13
 800546e:	4770      	bx	lr

08005470 <pxCurrentTCBConst2>:
 8005470:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005478:	4806      	ldr	r0, [pc, #24]	; (8005494 <prvPortStartFirstTask+0x1c>)
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f380 8808 	msr	MSP, r0
 8005482:	b662      	cpsie	i
 8005484:	b661      	cpsie	f
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	df00      	svc	0
 8005490:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005492:	bf00      	nop
 8005494:	e000ed08 	.word	0xe000ed08

08005498 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800549e:	4b32      	ldr	r3, [pc, #200]	; (8005568 <xPortStartScheduler+0xd0>)
 80054a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	22ff      	movs	r2, #255	; 0xff
 80054ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4b2a      	ldr	r3, [pc, #168]	; (800556c <xPortStartScheduler+0xd4>)
 80054c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054c6:	4b2a      	ldr	r3, [pc, #168]	; (8005570 <xPortStartScheduler+0xd8>)
 80054c8:	2207      	movs	r2, #7
 80054ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054cc:	e009      	b.n	80054e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80054ce:	4b28      	ldr	r3, [pc, #160]	; (8005570 <xPortStartScheduler+0xd8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	4a26      	ldr	r2, [pc, #152]	; (8005570 <xPortStartScheduler+0xd8>)
 80054d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d0ef      	beq.n	80054ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054ee:	4b20      	ldr	r3, [pc, #128]	; (8005570 <xPortStartScheduler+0xd8>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f1c3 0307 	rsb	r3, r3, #7
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d00a      	beq.n	8005510 <xPortStartScheduler+0x78>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	60bb      	str	r3, [r7, #8]
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <xPortStartScheduler+0xd8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <xPortStartScheduler+0xd8>)
 8005518:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800551a:	4b15      	ldr	r3, [pc, #84]	; (8005570 <xPortStartScheduler+0xd8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005522:	4a13      	ldr	r2, [pc, #76]	; (8005570 <xPortStartScheduler+0xd8>)
 8005524:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800552e:	4b11      	ldr	r3, [pc, #68]	; (8005574 <xPortStartScheduler+0xdc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a10      	ldr	r2, [pc, #64]	; (8005574 <xPortStartScheduler+0xdc>)
 8005534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005538:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800553a:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <xPortStartScheduler+0xdc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <xPortStartScheduler+0xdc>)
 8005540:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005544:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005546:	f000 f8b9 	bl	80056bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <xPortStartScheduler+0xe0>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005550:	f7ff ff92 	bl	8005478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005554:	f7ff f8be 	bl	80046d4 <vTaskSwitchContext>
	prvTaskExitError();
 8005558:	f7ff ff48 	bl	80053ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	e000e400 	.word	0xe000e400
 800556c:	20000ed0 	.word	0x20000ed0
 8005570:	20000ed4 	.word	0x20000ed4
 8005574:	e000ed20 	.word	0xe000ed20
 8005578:	2000000c 	.word	0x2000000c

0800557c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	607b      	str	r3, [r7, #4]
}
 8005594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <vPortEnterCritical+0x58>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3301      	adds	r3, #1
 800559c:	4a0d      	ldr	r2, [pc, #52]	; (80055d4 <vPortEnterCritical+0x58>)
 800559e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055a0:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <vPortEnterCritical+0x58>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d10f      	bne.n	80055c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <vPortEnterCritical+0x5c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	603b      	str	r3, [r7, #0]
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <vPortEnterCritical+0x4a>
	}
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	2000000c 	.word	0x2000000c
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055e2:	4b11      	ldr	r3, [pc, #68]	; (8005628 <vPortExitCritical+0x4c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <vPortExitCritical+0x24>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	607b      	str	r3, [r7, #4]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005600:	4b09      	ldr	r3, [pc, #36]	; (8005628 <vPortExitCritical+0x4c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3b01      	subs	r3, #1
 8005606:	4a08      	ldr	r2, [pc, #32]	; (8005628 <vPortExitCritical+0x4c>)
 8005608:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <vPortExitCritical+0x4c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d105      	bne.n	800561e <vPortExitCritical+0x42>
 8005612:	2300      	movs	r3, #0
 8005614:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f383 8811 	msr	BASEPRI, r3
}
 800561c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	2000000c 	.word	0x2000000c
 800562c:	00000000 	.word	0x00000000

08005630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005630:	f3ef 8009 	mrs	r0, PSP
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <pxCurrentTCBConst>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005640:	6010      	str	r0, [r2, #0]
 8005642:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005646:	f04f 0050 	mov.w	r0, #80	; 0x50
 800564a:	f380 8811 	msr	BASEPRI, r0
 800564e:	f7ff f841 	bl	80046d4 <vTaskSwitchContext>
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f380 8811 	msr	BASEPRI, r0
 800565a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800565e:	6819      	ldr	r1, [r3, #0]
 8005660:	6808      	ldr	r0, [r1, #0]
 8005662:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005666:	f380 8809 	msr	PSP, r0
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	4770      	bx	lr

08005670 <pxCurrentTCBConst>:
 8005670:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	607b      	str	r3, [r7, #4]
}
 8005690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005692:	f7fe ff61 	bl	8004558 <xTaskIncrementTick>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <xPortSysTickHandler+0x40>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f383 8811 	msr	BASEPRI, r3
}
 80056ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056c0:	4b0a      	ldr	r3, [pc, #40]	; (80056ec <vPortSetupTimerInterrupt+0x30>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <vPortSetupTimerInterrupt+0x34>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <vPortSetupTimerInterrupt+0x38>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a09      	ldr	r2, [pc, #36]	; (80056f8 <vPortSetupTimerInterrupt+0x3c>)
 80056d2:	fba2 2303 	umull	r2, r3, r2, r3
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	4a08      	ldr	r2, [pc, #32]	; (80056fc <vPortSetupTimerInterrupt+0x40>)
 80056da:	3b01      	subs	r3, #1
 80056dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056de:	4b03      	ldr	r3, [pc, #12]	; (80056ec <vPortSetupTimerInterrupt+0x30>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	e000e010 	.word	0xe000e010
 80056f0:	e000e018 	.word	0xe000e018
 80056f4:	20000000 	.word	0x20000000
 80056f8:	10624dd3 	.word	0x10624dd3
 80056fc:	e000e014 	.word	0xe000e014

08005700 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005706:	f3ef 8305 	mrs	r3, IPSR
 800570a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b0f      	cmp	r3, #15
 8005710:	d914      	bls.n	800573c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005712:	4a16      	ldr	r2, [pc, #88]	; (800576c <vPortValidateInterruptPriority+0x6c>)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800571c:	4b14      	ldr	r3, [pc, #80]	; (8005770 <vPortValidateInterruptPriority+0x70>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	7afa      	ldrb	r2, [r7, #11]
 8005722:	429a      	cmp	r2, r3
 8005724:	d20a      	bcs.n	800573c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	607b      	str	r3, [r7, #4]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800573c:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <vPortValidateInterruptPriority+0x74>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005744:	4b0c      	ldr	r3, [pc, #48]	; (8005778 <vPortValidateInterruptPriority+0x78>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d90a      	bls.n	8005762 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	603b      	str	r3, [r7, #0]
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <vPortValidateInterruptPriority+0x60>
	}
 8005762:	bf00      	nop
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	bc80      	pop	{r7}
 800576a:	4770      	bx	lr
 800576c:	e000e3f0 	.word	0xe000e3f0
 8005770:	20000ed0 	.word	0x20000ed0
 8005774:	e000ed0c 	.word	0xe000ed0c
 8005778:	20000ed4 	.word	0x20000ed4

0800577c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005788:	f7fe fe2c 	bl	80043e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800578c:	4b58      	ldr	r3, [pc, #352]	; (80058f0 <pvPortMalloc+0x174>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005794:	f000 f910 	bl	80059b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005798:	4b56      	ldr	r3, [pc, #344]	; (80058f4 <pvPortMalloc+0x178>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4013      	ands	r3, r2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 808e 	bne.w	80058c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01d      	beq.n	80057e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057ac:	2208      	movs	r2, #8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4413      	add	r3, r2
 80057b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d014      	beq.n	80057e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	3308      	adds	r3, #8
 80057c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <pvPortMalloc+0x6c>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	617b      	str	r3, [r7, #20]
}
 80057e4:	bf00      	nop
 80057e6:	e7fe      	b.n	80057e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d069      	beq.n	80058c2 <pvPortMalloc+0x146>
 80057ee:	4b42      	ldr	r3, [pc, #264]	; (80058f8 <pvPortMalloc+0x17c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d864      	bhi.n	80058c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057f8:	4b40      	ldr	r3, [pc, #256]	; (80058fc <pvPortMalloc+0x180>)
 80057fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057fc:	4b3f      	ldr	r3, [pc, #252]	; (80058fc <pvPortMalloc+0x180>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005802:	e004      	b.n	800580e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	429a      	cmp	r2, r3
 8005816:	d903      	bls.n	8005820 <pvPortMalloc+0xa4>
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f1      	bne.n	8005804 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <pvPortMalloc+0x174>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005826:	429a      	cmp	r2, r3
 8005828:	d04b      	beq.n	80058c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2208      	movs	r2, #8
 8005830:	4413      	add	r3, r2
 8005832:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	1ad2      	subs	r2, r2, r3
 8005844:	2308      	movs	r3, #8
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	429a      	cmp	r2, r3
 800584a:	d91f      	bls.n	800588c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800584c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <pvPortMalloc+0xf8>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	613b      	str	r3, [r7, #16]
}
 8005870:	bf00      	nop
 8005872:	e7fe      	b.n	8005872 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	1ad2      	subs	r2, r2, r3
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005886:	69b8      	ldr	r0, [r7, #24]
 8005888:	f000 f8f8 	bl	8005a7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <pvPortMalloc+0x17c>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	4a18      	ldr	r2, [pc, #96]	; (80058f8 <pvPortMalloc+0x17c>)
 8005898:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800589a:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <pvPortMalloc+0x17c>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	4b18      	ldr	r3, [pc, #96]	; (8005900 <pvPortMalloc+0x184>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d203      	bcs.n	80058ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058a6:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <pvPortMalloc+0x17c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a15      	ldr	r2, [pc, #84]	; (8005900 <pvPortMalloc+0x184>)
 80058ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <pvPortMalloc+0x178>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80058c2:	f7fe fd9d 	bl	8004400 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <pvPortMalloc+0x16a>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <pvPortMalloc+0x168>
	return pvReturn;
 80058e6:	69fb      	ldr	r3, [r7, #28]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3728      	adds	r7, #40	; 0x28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20001ae0 	.word	0x20001ae0
 80058f4:	20001aec 	.word	0x20001aec
 80058f8:	20001ae4 	.word	0x20001ae4
 80058fc:	20001ad8 	.word	0x20001ad8
 8005900:	20001ae8 	.word	0x20001ae8

08005904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d048      	beq.n	80059a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005916:	2308      	movs	r3, #8
 8005918:	425b      	negs	r3, r3
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <vPortFree+0xac>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <vPortFree+0x44>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <vPortFree+0x62>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	60bb      	str	r3, [r7, #8]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	4b11      	ldr	r3, [pc, #68]	; (80059b0 <vPortFree+0xac>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4013      	ands	r3, r2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d019      	beq.n	80059a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d115      	bne.n	80059a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <vPortFree+0xac>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	43db      	mvns	r3, r3
 8005986:	401a      	ands	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800598c:	f7fe fd2a 	bl	80043e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <vPortFree+0xb0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4413      	add	r3, r2
 800599a:	4a06      	ldr	r2, [pc, #24]	; (80059b4 <vPortFree+0xb0>)
 800599c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800599e:	6938      	ldr	r0, [r7, #16]
 80059a0:	f000 f86c 	bl	8005a7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80059a4:	f7fe fd2c 	bl	8004400 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059a8:	bf00      	nop
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20001aec 	.word	0x20001aec
 80059b4:	20001ae4 	.word	0x20001ae4

080059b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059c4:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <prvHeapInit+0xac>)
 80059c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3307      	adds	r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0307 	bic.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <prvHeapInit+0xac>)
 80059e8:	4413      	add	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059f0:	4a1d      	ldr	r2, [pc, #116]	; (8005a68 <prvHeapInit+0xb0>)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059f6:	4b1c      	ldr	r3, [pc, #112]	; (8005a68 <prvHeapInit+0xb0>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4413      	add	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a04:	2208      	movs	r2, #8
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0307 	bic.w	r3, r3, #7
 8005a12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <prvHeapInit+0xb4>)
 8005a18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <prvHeapInit+0xb4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <prvHeapInit+0xb4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	1ad2      	subs	r2, r2, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <prvHeapInit+0xb4>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <prvHeapInit+0xb8>)
 8005a46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <prvHeapInit+0xbc>)
 8005a4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a50:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <prvHeapInit+0xc0>)
 8005a52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a56:	601a      	str	r2, [r3, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bc80      	pop	{r7}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	20000ed8 	.word	0x20000ed8
 8005a68:	20001ad8 	.word	0x20001ad8
 8005a6c:	20001ae0 	.word	0x20001ae0
 8005a70:	20001ae8 	.word	0x20001ae8
 8005a74:	20001ae4 	.word	0x20001ae4
 8005a78:	20001aec 	.word	0x20001aec

08005a7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a84:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <prvInsertBlockIntoFreeList+0xa8>)
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e002      	b.n	8005a90 <prvInsertBlockIntoFreeList+0x14>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d8f7      	bhi.n	8005a8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d108      	bne.n	8005abe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	441a      	add	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d118      	bne.n	8005b04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <prvInsertBlockIntoFreeList+0xac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d00d      	beq.n	8005afa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	441a      	add	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e008      	b.n	8005b0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <prvInsertBlockIntoFreeList+0xac>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	e003      	b.n	8005b0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d002      	beq.n	8005b1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr
 8005b24:	20001ad8 	.word	0x20001ad8
 8005b28:	20001ae0 	.word	0x20001ae0

08005b2c <siprintf>:
 8005b2c:	b40e      	push	{r1, r2, r3}
 8005b2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b32:	b500      	push	{lr}
 8005b34:	b09c      	sub	sp, #112	; 0x70
 8005b36:	ab1d      	add	r3, sp, #116	; 0x74
 8005b38:	9002      	str	r0, [sp, #8]
 8005b3a:	9006      	str	r0, [sp, #24]
 8005b3c:	9107      	str	r1, [sp, #28]
 8005b3e:	9104      	str	r1, [sp, #16]
 8005b40:	4808      	ldr	r0, [pc, #32]	; (8005b64 <siprintf+0x38>)
 8005b42:	4909      	ldr	r1, [pc, #36]	; (8005b68 <siprintf+0x3c>)
 8005b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b48:	9105      	str	r1, [sp, #20]
 8005b4a:	6800      	ldr	r0, [r0, #0]
 8005b4c:	a902      	add	r1, sp, #8
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	f000 f99c 	bl	8005e8c <_svfiprintf_r>
 8005b54:	2200      	movs	r2, #0
 8005b56:	9b02      	ldr	r3, [sp, #8]
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	b01c      	add	sp, #112	; 0x70
 8005b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b60:	b003      	add	sp, #12
 8005b62:	4770      	bx	lr
 8005b64:	2000005c 	.word	0x2000005c
 8005b68:	ffff0208 	.word	0xffff0208

08005b6c <memset>:
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	4402      	add	r2, r0
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d100      	bne.n	8005b76 <memset+0xa>
 8005b74:	4770      	bx	lr
 8005b76:	f803 1b01 	strb.w	r1, [r3], #1
 8005b7a:	e7f9      	b.n	8005b70 <memset+0x4>

08005b7c <__errno>:
 8005b7c:	4b01      	ldr	r3, [pc, #4]	; (8005b84 <__errno+0x8>)
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2000005c 	.word	0x2000005c

08005b88 <__libc_init_array>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	2600      	movs	r6, #0
 8005b8c:	4d0c      	ldr	r5, [pc, #48]	; (8005bc0 <__libc_init_array+0x38>)
 8005b8e:	4c0d      	ldr	r4, [pc, #52]	; (8005bc4 <__libc_init_array+0x3c>)
 8005b90:	1b64      	subs	r4, r4, r5
 8005b92:	10a4      	asrs	r4, r4, #2
 8005b94:	42a6      	cmp	r6, r4
 8005b96:	d109      	bne.n	8005bac <__libc_init_array+0x24>
 8005b98:	f000 fc7a 	bl	8006490 <_init>
 8005b9c:	2600      	movs	r6, #0
 8005b9e:	4d0a      	ldr	r5, [pc, #40]	; (8005bc8 <__libc_init_array+0x40>)
 8005ba0:	4c0a      	ldr	r4, [pc, #40]	; (8005bcc <__libc_init_array+0x44>)
 8005ba2:	1b64      	subs	r4, r4, r5
 8005ba4:	10a4      	asrs	r4, r4, #2
 8005ba6:	42a6      	cmp	r6, r4
 8005ba8:	d105      	bne.n	8005bb6 <__libc_init_array+0x2e>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb0:	4798      	blx	r3
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7ee      	b.n	8005b94 <__libc_init_array+0xc>
 8005bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bba:	4798      	blx	r3
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	e7f2      	b.n	8005ba6 <__libc_init_array+0x1e>
 8005bc0:	08006594 	.word	0x08006594
 8005bc4:	08006594 	.word	0x08006594
 8005bc8:	08006594 	.word	0x08006594
 8005bcc:	08006598 	.word	0x08006598

08005bd0 <__retarget_lock_acquire_recursive>:
 8005bd0:	4770      	bx	lr

08005bd2 <__retarget_lock_release_recursive>:
 8005bd2:	4770      	bx	lr

08005bd4 <memcpy>:
 8005bd4:	440a      	add	r2, r1
 8005bd6:	4291      	cmp	r1, r2
 8005bd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005bdc:	d100      	bne.n	8005be0 <memcpy+0xc>
 8005bde:	4770      	bx	lr
 8005be0:	b510      	push	{r4, lr}
 8005be2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be6:	4291      	cmp	r1, r2
 8005be8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bec:	d1f9      	bne.n	8005be2 <memcpy+0xe>
 8005bee:	bd10      	pop	{r4, pc}

08005bf0 <_free_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d040      	beq.n	8005c7a <_free_r+0x8a>
 8005bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bfc:	1f0c      	subs	r4, r1, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfb8      	it	lt
 8005c02:	18e4      	addlt	r4, r4, r3
 8005c04:	f000 f8dc 	bl	8005dc0 <__malloc_lock>
 8005c08:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <_free_r+0x8c>)
 8005c0a:	6813      	ldr	r3, [r2, #0]
 8005c0c:	b933      	cbnz	r3, 8005c1c <_free_r+0x2c>
 8005c0e:	6063      	str	r3, [r4, #4]
 8005c10:	6014      	str	r4, [r2, #0]
 8005c12:	4628      	mov	r0, r5
 8005c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c18:	f000 b8d8 	b.w	8005dcc <__malloc_unlock>
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d908      	bls.n	8005c32 <_free_r+0x42>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	1821      	adds	r1, r4, r0
 8005c24:	428b      	cmp	r3, r1
 8005c26:	bf01      	itttt	eq
 8005c28:	6819      	ldreq	r1, [r3, #0]
 8005c2a:	685b      	ldreq	r3, [r3, #4]
 8005c2c:	1809      	addeq	r1, r1, r0
 8005c2e:	6021      	streq	r1, [r4, #0]
 8005c30:	e7ed      	b.n	8005c0e <_free_r+0x1e>
 8005c32:	461a      	mov	r2, r3
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	b10b      	cbz	r3, 8005c3c <_free_r+0x4c>
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	d9fa      	bls.n	8005c32 <_free_r+0x42>
 8005c3c:	6811      	ldr	r1, [r2, #0]
 8005c3e:	1850      	adds	r0, r2, r1
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	d10b      	bne.n	8005c5c <_free_r+0x6c>
 8005c44:	6820      	ldr	r0, [r4, #0]
 8005c46:	4401      	add	r1, r0
 8005c48:	1850      	adds	r0, r2, r1
 8005c4a:	4283      	cmp	r3, r0
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	d1e0      	bne.n	8005c12 <_free_r+0x22>
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	4408      	add	r0, r1
 8005c56:	6010      	str	r0, [r2, #0]
 8005c58:	6053      	str	r3, [r2, #4]
 8005c5a:	e7da      	b.n	8005c12 <_free_r+0x22>
 8005c5c:	d902      	bls.n	8005c64 <_free_r+0x74>
 8005c5e:	230c      	movs	r3, #12
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	e7d6      	b.n	8005c12 <_free_r+0x22>
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	1821      	adds	r1, r4, r0
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf01      	itttt	eq
 8005c6c:	6819      	ldreq	r1, [r3, #0]
 8005c6e:	685b      	ldreq	r3, [r3, #4]
 8005c70:	1809      	addeq	r1, r1, r0
 8005c72:	6021      	streq	r1, [r4, #0]
 8005c74:	6063      	str	r3, [r4, #4]
 8005c76:	6054      	str	r4, [r2, #4]
 8005c78:	e7cb      	b.n	8005c12 <_free_r+0x22>
 8005c7a:	bd38      	pop	{r3, r4, r5, pc}
 8005c7c:	20001c30 	.word	0x20001c30

08005c80 <sbrk_aligned>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4e0e      	ldr	r6, [pc, #56]	; (8005cbc <sbrk_aligned+0x3c>)
 8005c84:	460c      	mov	r4, r1
 8005c86:	6831      	ldr	r1, [r6, #0]
 8005c88:	4605      	mov	r5, r0
 8005c8a:	b911      	cbnz	r1, 8005c92 <sbrk_aligned+0x12>
 8005c8c:	f000 fbaa 	bl	80063e4 <_sbrk_r>
 8005c90:	6030      	str	r0, [r6, #0]
 8005c92:	4621      	mov	r1, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 fba5 	bl	80063e4 <_sbrk_r>
 8005c9a:	1c43      	adds	r3, r0, #1
 8005c9c:	d00a      	beq.n	8005cb4 <sbrk_aligned+0x34>
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	f024 0403 	bic.w	r4, r4, #3
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d007      	beq.n	8005cb8 <sbrk_aligned+0x38>
 8005ca8:	1a21      	subs	r1, r4, r0
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 fb9a 	bl	80063e4 <_sbrk_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d101      	bne.n	8005cb8 <sbrk_aligned+0x38>
 8005cb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005cb8:	4620      	mov	r0, r4
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	20001c34 	.word	0x20001c34

08005cc0 <_malloc_r>:
 8005cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc4:	1ccd      	adds	r5, r1, #3
 8005cc6:	f025 0503 	bic.w	r5, r5, #3
 8005cca:	3508      	adds	r5, #8
 8005ccc:	2d0c      	cmp	r5, #12
 8005cce:	bf38      	it	cc
 8005cd0:	250c      	movcc	r5, #12
 8005cd2:	2d00      	cmp	r5, #0
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	db01      	blt.n	8005cdc <_malloc_r+0x1c>
 8005cd8:	42a9      	cmp	r1, r5
 8005cda:	d905      	bls.n	8005ce8 <_malloc_r+0x28>
 8005cdc:	230c      	movs	r3, #12
 8005cde:	2600      	movs	r6, #0
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005dbc <_malloc_r+0xfc>
 8005cec:	f000 f868 	bl	8005dc0 <__malloc_lock>
 8005cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8005cf4:	461c      	mov	r4, r3
 8005cf6:	bb5c      	cbnz	r4, 8005d50 <_malloc_r+0x90>
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	f7ff ffc0 	bl	8005c80 <sbrk_aligned>
 8005d00:	1c43      	adds	r3, r0, #1
 8005d02:	4604      	mov	r4, r0
 8005d04:	d155      	bne.n	8005db2 <_malloc_r+0xf2>
 8005d06:	f8d8 4000 	ldr.w	r4, [r8]
 8005d0a:	4626      	mov	r6, r4
 8005d0c:	2e00      	cmp	r6, #0
 8005d0e:	d145      	bne.n	8005d9c <_malloc_r+0xdc>
 8005d10:	2c00      	cmp	r4, #0
 8005d12:	d048      	beq.n	8005da6 <_malloc_r+0xe6>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	4631      	mov	r1, r6
 8005d18:	4638      	mov	r0, r7
 8005d1a:	eb04 0903 	add.w	r9, r4, r3
 8005d1e:	f000 fb61 	bl	80063e4 <_sbrk_r>
 8005d22:	4581      	cmp	r9, r0
 8005d24:	d13f      	bne.n	8005da6 <_malloc_r+0xe6>
 8005d26:	6821      	ldr	r1, [r4, #0]
 8005d28:	4638      	mov	r0, r7
 8005d2a:	1a6d      	subs	r5, r5, r1
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7ff ffa7 	bl	8005c80 <sbrk_aligned>
 8005d32:	3001      	adds	r0, #1
 8005d34:	d037      	beq.n	8005da6 <_malloc_r+0xe6>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	442b      	add	r3, r5
 8005d3a:	6023      	str	r3, [r4, #0]
 8005d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d038      	beq.n	8005db6 <_malloc_r+0xf6>
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	42a2      	cmp	r2, r4
 8005d48:	d12b      	bne.n	8005da2 <_malloc_r+0xe2>
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	e00f      	b.n	8005d70 <_malloc_r+0xb0>
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	1b52      	subs	r2, r2, r5
 8005d54:	d41f      	bmi.n	8005d96 <_malloc_r+0xd6>
 8005d56:	2a0b      	cmp	r2, #11
 8005d58:	d917      	bls.n	8005d8a <_malloc_r+0xca>
 8005d5a:	1961      	adds	r1, r4, r5
 8005d5c:	42a3      	cmp	r3, r4
 8005d5e:	6025      	str	r5, [r4, #0]
 8005d60:	bf18      	it	ne
 8005d62:	6059      	strne	r1, [r3, #4]
 8005d64:	6863      	ldr	r3, [r4, #4]
 8005d66:	bf08      	it	eq
 8005d68:	f8c8 1000 	streq.w	r1, [r8]
 8005d6c:	5162      	str	r2, [r4, r5]
 8005d6e:	604b      	str	r3, [r1, #4]
 8005d70:	4638      	mov	r0, r7
 8005d72:	f104 060b 	add.w	r6, r4, #11
 8005d76:	f000 f829 	bl	8005dcc <__malloc_unlock>
 8005d7a:	f026 0607 	bic.w	r6, r6, #7
 8005d7e:	1d23      	adds	r3, r4, #4
 8005d80:	1af2      	subs	r2, r6, r3
 8005d82:	d0ae      	beq.n	8005ce2 <_malloc_r+0x22>
 8005d84:	1b9b      	subs	r3, r3, r6
 8005d86:	50a3      	str	r3, [r4, r2]
 8005d88:	e7ab      	b.n	8005ce2 <_malloc_r+0x22>
 8005d8a:	42a3      	cmp	r3, r4
 8005d8c:	6862      	ldr	r2, [r4, #4]
 8005d8e:	d1dd      	bne.n	8005d4c <_malloc_r+0x8c>
 8005d90:	f8c8 2000 	str.w	r2, [r8]
 8005d94:	e7ec      	b.n	8005d70 <_malloc_r+0xb0>
 8005d96:	4623      	mov	r3, r4
 8005d98:	6864      	ldr	r4, [r4, #4]
 8005d9a:	e7ac      	b.n	8005cf6 <_malloc_r+0x36>
 8005d9c:	4634      	mov	r4, r6
 8005d9e:	6876      	ldr	r6, [r6, #4]
 8005da0:	e7b4      	b.n	8005d0c <_malloc_r+0x4c>
 8005da2:	4613      	mov	r3, r2
 8005da4:	e7cc      	b.n	8005d40 <_malloc_r+0x80>
 8005da6:	230c      	movs	r3, #12
 8005da8:	4638      	mov	r0, r7
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	f000 f80e 	bl	8005dcc <__malloc_unlock>
 8005db0:	e797      	b.n	8005ce2 <_malloc_r+0x22>
 8005db2:	6025      	str	r5, [r4, #0]
 8005db4:	e7dc      	b.n	8005d70 <_malloc_r+0xb0>
 8005db6:	605b      	str	r3, [r3, #4]
 8005db8:	deff      	udf	#255	; 0xff
 8005dba:	bf00      	nop
 8005dbc:	20001c30 	.word	0x20001c30

08005dc0 <__malloc_lock>:
 8005dc0:	4801      	ldr	r0, [pc, #4]	; (8005dc8 <__malloc_lock+0x8>)
 8005dc2:	f7ff bf05 	b.w	8005bd0 <__retarget_lock_acquire_recursive>
 8005dc6:	bf00      	nop
 8005dc8:	20001c2c 	.word	0x20001c2c

08005dcc <__malloc_unlock>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <__malloc_unlock+0x8>)
 8005dce:	f7ff bf00 	b.w	8005bd2 <__retarget_lock_release_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20001c2c 	.word	0x20001c2c

08005dd8 <__ssputs_r>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	461f      	mov	r7, r3
 8005dde:	688e      	ldr	r6, [r1, #8]
 8005de0:	4682      	mov	sl, r0
 8005de2:	42be      	cmp	r6, r7
 8005de4:	460c      	mov	r4, r1
 8005de6:	4690      	mov	r8, r2
 8005de8:	680b      	ldr	r3, [r1, #0]
 8005dea:	d82c      	bhi.n	8005e46 <__ssputs_r+0x6e>
 8005dec:	898a      	ldrh	r2, [r1, #12]
 8005dee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005df2:	d026      	beq.n	8005e42 <__ssputs_r+0x6a>
 8005df4:	6965      	ldr	r5, [r4, #20]
 8005df6:	6909      	ldr	r1, [r1, #16]
 8005df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dfc:	eba3 0901 	sub.w	r9, r3, r1
 8005e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e04:	1c7b      	adds	r3, r7, #1
 8005e06:	444b      	add	r3, r9
 8005e08:	106d      	asrs	r5, r5, #1
 8005e0a:	429d      	cmp	r5, r3
 8005e0c:	bf38      	it	cc
 8005e0e:	461d      	movcc	r5, r3
 8005e10:	0553      	lsls	r3, r2, #21
 8005e12:	d527      	bpl.n	8005e64 <__ssputs_r+0x8c>
 8005e14:	4629      	mov	r1, r5
 8005e16:	f7ff ff53 	bl	8005cc0 <_malloc_r>
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	b360      	cbz	r0, 8005e78 <__ssputs_r+0xa0>
 8005e1e:	464a      	mov	r2, r9
 8005e20:	6921      	ldr	r1, [r4, #16]
 8005e22:	f7ff fed7 	bl	8005bd4 <memcpy>
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	6126      	str	r6, [r4, #16]
 8005e34:	444e      	add	r6, r9
 8005e36:	6026      	str	r6, [r4, #0]
 8005e38:	463e      	mov	r6, r7
 8005e3a:	6165      	str	r5, [r4, #20]
 8005e3c:	eba5 0509 	sub.w	r5, r5, r9
 8005e40:	60a5      	str	r5, [r4, #8]
 8005e42:	42be      	cmp	r6, r7
 8005e44:	d900      	bls.n	8005e48 <__ssputs_r+0x70>
 8005e46:	463e      	mov	r6, r7
 8005e48:	4632      	mov	r2, r6
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	6820      	ldr	r0, [r4, #0]
 8005e4e:	f000 faaf 	bl	80063b0 <memmove>
 8005e52:	2000      	movs	r0, #0
 8005e54:	68a3      	ldr	r3, [r4, #8]
 8005e56:	1b9b      	subs	r3, r3, r6
 8005e58:	60a3      	str	r3, [r4, #8]
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	4433      	add	r3, r6
 8005e5e:	6023      	str	r3, [r4, #0]
 8005e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e64:	462a      	mov	r2, r5
 8005e66:	f000 fadb 	bl	8006420 <_realloc_r>
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1e0      	bne.n	8005e32 <__ssputs_r+0x5a>
 8005e70:	4650      	mov	r0, sl
 8005e72:	6921      	ldr	r1, [r4, #16]
 8005e74:	f7ff febc 	bl	8005bf0 <_free_r>
 8005e78:	230c      	movs	r3, #12
 8005e7a:	f8ca 3000 	str.w	r3, [sl]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e88:	81a3      	strh	r3, [r4, #12]
 8005e8a:	e7e9      	b.n	8005e60 <__ssputs_r+0x88>

08005e8c <_svfiprintf_r>:
 8005e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	4698      	mov	r8, r3
 8005e92:	898b      	ldrh	r3, [r1, #12]
 8005e94:	4607      	mov	r7, r0
 8005e96:	061b      	lsls	r3, r3, #24
 8005e98:	460d      	mov	r5, r1
 8005e9a:	4614      	mov	r4, r2
 8005e9c:	b09d      	sub	sp, #116	; 0x74
 8005e9e:	d50e      	bpl.n	8005ebe <_svfiprintf_r+0x32>
 8005ea0:	690b      	ldr	r3, [r1, #16]
 8005ea2:	b963      	cbnz	r3, 8005ebe <_svfiprintf_r+0x32>
 8005ea4:	2140      	movs	r1, #64	; 0x40
 8005ea6:	f7ff ff0b 	bl	8005cc0 <_malloc_r>
 8005eaa:	6028      	str	r0, [r5, #0]
 8005eac:	6128      	str	r0, [r5, #16]
 8005eae:	b920      	cbnz	r0, 8005eba <_svfiprintf_r+0x2e>
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eb8:	e0d0      	b.n	800605c <_svfiprintf_r+0x1d0>
 8005eba:	2340      	movs	r3, #64	; 0x40
 8005ebc:	616b      	str	r3, [r5, #20]
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec2:	2320      	movs	r3, #32
 8005ec4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ec8:	2330      	movs	r3, #48	; 0x30
 8005eca:	f04f 0901 	mov.w	r9, #1
 8005ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ed2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006074 <_svfiprintf_r+0x1e8>
 8005ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eda:	4623      	mov	r3, r4
 8005edc:	469a      	mov	sl, r3
 8005ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee2:	b10a      	cbz	r2, 8005ee8 <_svfiprintf_r+0x5c>
 8005ee4:	2a25      	cmp	r2, #37	; 0x25
 8005ee6:	d1f9      	bne.n	8005edc <_svfiprintf_r+0x50>
 8005ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8005eec:	d00b      	beq.n	8005f06 <_svfiprintf_r+0x7a>
 8005eee:	465b      	mov	r3, fp
 8005ef0:	4622      	mov	r2, r4
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	f7ff ff6f 	bl	8005dd8 <__ssputs_r>
 8005efa:	3001      	adds	r0, #1
 8005efc:	f000 80a9 	beq.w	8006052 <_svfiprintf_r+0x1c6>
 8005f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f02:	445a      	add	r2, fp
 8005f04:	9209      	str	r2, [sp, #36]	; 0x24
 8005f06:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 80a1 	beq.w	8006052 <_svfiprintf_r+0x1c6>
 8005f10:	2300      	movs	r3, #0
 8005f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f1a:	f10a 0a01 	add.w	sl, sl, #1
 8005f1e:	9304      	str	r3, [sp, #16]
 8005f20:	9307      	str	r3, [sp, #28]
 8005f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f26:	931a      	str	r3, [sp, #104]	; 0x68
 8005f28:	4654      	mov	r4, sl
 8005f2a:	2205      	movs	r2, #5
 8005f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f30:	4850      	ldr	r0, [pc, #320]	; (8006074 <_svfiprintf_r+0x1e8>)
 8005f32:	f000 fa67 	bl	8006404 <memchr>
 8005f36:	9a04      	ldr	r2, [sp, #16]
 8005f38:	b9d8      	cbnz	r0, 8005f72 <_svfiprintf_r+0xe6>
 8005f3a:	06d0      	lsls	r0, r2, #27
 8005f3c:	bf44      	itt	mi
 8005f3e:	2320      	movmi	r3, #32
 8005f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f44:	0711      	lsls	r1, r2, #28
 8005f46:	bf44      	itt	mi
 8005f48:	232b      	movmi	r3, #43	; 0x2b
 8005f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f52:	2b2a      	cmp	r3, #42	; 0x2a
 8005f54:	d015      	beq.n	8005f82 <_svfiprintf_r+0xf6>
 8005f56:	4654      	mov	r4, sl
 8005f58:	2000      	movs	r0, #0
 8005f5a:	f04f 0c0a 	mov.w	ip, #10
 8005f5e:	9a07      	ldr	r2, [sp, #28]
 8005f60:	4621      	mov	r1, r4
 8005f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f66:	3b30      	subs	r3, #48	; 0x30
 8005f68:	2b09      	cmp	r3, #9
 8005f6a:	d94d      	bls.n	8006008 <_svfiprintf_r+0x17c>
 8005f6c:	b1b0      	cbz	r0, 8005f9c <_svfiprintf_r+0x110>
 8005f6e:	9207      	str	r2, [sp, #28]
 8005f70:	e014      	b.n	8005f9c <_svfiprintf_r+0x110>
 8005f72:	eba0 0308 	sub.w	r3, r0, r8
 8005f76:	fa09 f303 	lsl.w	r3, r9, r3
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	46a2      	mov	sl, r4
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	e7d2      	b.n	8005f28 <_svfiprintf_r+0x9c>
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	1d19      	adds	r1, r3, #4
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	9103      	str	r1, [sp, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	bfbb      	ittet	lt
 8005f8e:	425b      	neglt	r3, r3
 8005f90:	f042 0202 	orrlt.w	r2, r2, #2
 8005f94:	9307      	strge	r3, [sp, #28]
 8005f96:	9307      	strlt	r3, [sp, #28]
 8005f98:	bfb8      	it	lt
 8005f9a:	9204      	strlt	r2, [sp, #16]
 8005f9c:	7823      	ldrb	r3, [r4, #0]
 8005f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa0:	d10c      	bne.n	8005fbc <_svfiprintf_r+0x130>
 8005fa2:	7863      	ldrb	r3, [r4, #1]
 8005fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa6:	d134      	bne.n	8006012 <_svfiprintf_r+0x186>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	3402      	adds	r4, #2
 8005fac:	1d1a      	adds	r2, r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	9203      	str	r2, [sp, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfb8      	it	lt
 8005fb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006078 <_svfiprintf_r+0x1ec>
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	4650      	mov	r0, sl
 8005fc4:	7821      	ldrb	r1, [r4, #0]
 8005fc6:	f000 fa1d 	bl	8006404 <memchr>
 8005fca:	b138      	cbz	r0, 8005fdc <_svfiprintf_r+0x150>
 8005fcc:	2240      	movs	r2, #64	; 0x40
 8005fce:	9b04      	ldr	r3, [sp, #16]
 8005fd0:	eba0 000a 	sub.w	r0, r0, sl
 8005fd4:	4082      	lsls	r2, r0
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	3401      	adds	r4, #1
 8005fda:	9304      	str	r3, [sp, #16]
 8005fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe0:	2206      	movs	r2, #6
 8005fe2:	4826      	ldr	r0, [pc, #152]	; (800607c <_svfiprintf_r+0x1f0>)
 8005fe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fe8:	f000 fa0c 	bl	8006404 <memchr>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d038      	beq.n	8006062 <_svfiprintf_r+0x1d6>
 8005ff0:	4b23      	ldr	r3, [pc, #140]	; (8006080 <_svfiprintf_r+0x1f4>)
 8005ff2:	bb1b      	cbnz	r3, 800603c <_svfiprintf_r+0x1b0>
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	3307      	adds	r3, #7
 8005ff8:	f023 0307 	bic.w	r3, r3, #7
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	9303      	str	r3, [sp, #12]
 8006000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006002:	4433      	add	r3, r6
 8006004:	9309      	str	r3, [sp, #36]	; 0x24
 8006006:	e768      	b.n	8005eda <_svfiprintf_r+0x4e>
 8006008:	460c      	mov	r4, r1
 800600a:	2001      	movs	r0, #1
 800600c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006010:	e7a6      	b.n	8005f60 <_svfiprintf_r+0xd4>
 8006012:	2300      	movs	r3, #0
 8006014:	f04f 0c0a 	mov.w	ip, #10
 8006018:	4619      	mov	r1, r3
 800601a:	3401      	adds	r4, #1
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	4620      	mov	r0, r4
 8006020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006024:	3a30      	subs	r2, #48	; 0x30
 8006026:	2a09      	cmp	r2, #9
 8006028:	d903      	bls.n	8006032 <_svfiprintf_r+0x1a6>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0c6      	beq.n	8005fbc <_svfiprintf_r+0x130>
 800602e:	9105      	str	r1, [sp, #20]
 8006030:	e7c4      	b.n	8005fbc <_svfiprintf_r+0x130>
 8006032:	4604      	mov	r4, r0
 8006034:	2301      	movs	r3, #1
 8006036:	fb0c 2101 	mla	r1, ip, r1, r2
 800603a:	e7f0      	b.n	800601e <_svfiprintf_r+0x192>
 800603c:	ab03      	add	r3, sp, #12
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	462a      	mov	r2, r5
 8006042:	4638      	mov	r0, r7
 8006044:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <_svfiprintf_r+0x1f8>)
 8006046:	a904      	add	r1, sp, #16
 8006048:	f3af 8000 	nop.w
 800604c:	1c42      	adds	r2, r0, #1
 800604e:	4606      	mov	r6, r0
 8006050:	d1d6      	bne.n	8006000 <_svfiprintf_r+0x174>
 8006052:	89ab      	ldrh	r3, [r5, #12]
 8006054:	065b      	lsls	r3, r3, #25
 8006056:	f53f af2d 	bmi.w	8005eb4 <_svfiprintf_r+0x28>
 800605a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800605c:	b01d      	add	sp, #116	; 0x74
 800605e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006062:	ab03      	add	r3, sp, #12
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	462a      	mov	r2, r5
 8006068:	4638      	mov	r0, r7
 800606a:	4b06      	ldr	r3, [pc, #24]	; (8006084 <_svfiprintf_r+0x1f8>)
 800606c:	a904      	add	r1, sp, #16
 800606e:	f000 f87d 	bl	800616c <_printf_i>
 8006072:	e7eb      	b.n	800604c <_svfiprintf_r+0x1c0>
 8006074:	0800655e 	.word	0x0800655e
 8006078:	08006564 	.word	0x08006564
 800607c:	08006568 	.word	0x08006568
 8006080:	00000000 	.word	0x00000000
 8006084:	08005dd9 	.word	0x08005dd9

08006088 <_printf_common>:
 8006088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800608c:	4616      	mov	r6, r2
 800608e:	4699      	mov	r9, r3
 8006090:	688a      	ldr	r2, [r1, #8]
 8006092:	690b      	ldr	r3, [r1, #16]
 8006094:	4607      	mov	r7, r0
 8006096:	4293      	cmp	r3, r2
 8006098:	bfb8      	it	lt
 800609a:	4613      	movlt	r3, r2
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060a2:	460c      	mov	r4, r1
 80060a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a8:	b10a      	cbz	r2, 80060ae <_printf_common+0x26>
 80060aa:	3301      	adds	r3, #1
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	0699      	lsls	r1, r3, #26
 80060b2:	bf42      	ittt	mi
 80060b4:	6833      	ldrmi	r3, [r6, #0]
 80060b6:	3302      	addmi	r3, #2
 80060b8:	6033      	strmi	r3, [r6, #0]
 80060ba:	6825      	ldr	r5, [r4, #0]
 80060bc:	f015 0506 	ands.w	r5, r5, #6
 80060c0:	d106      	bne.n	80060d0 <_printf_common+0x48>
 80060c2:	f104 0a19 	add.w	sl, r4, #25
 80060c6:	68e3      	ldr	r3, [r4, #12]
 80060c8:	6832      	ldr	r2, [r6, #0]
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	42ab      	cmp	r3, r5
 80060ce:	dc2b      	bgt.n	8006128 <_printf_common+0xa0>
 80060d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060d4:	1e13      	subs	r3, r2, #0
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	bf18      	it	ne
 80060da:	2301      	movne	r3, #1
 80060dc:	0692      	lsls	r2, r2, #26
 80060de:	d430      	bmi.n	8006142 <_printf_common+0xba>
 80060e0:	4649      	mov	r1, r9
 80060e2:	4638      	mov	r0, r7
 80060e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060e8:	47c0      	blx	r8
 80060ea:	3001      	adds	r0, #1
 80060ec:	d023      	beq.n	8006136 <_printf_common+0xae>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	f003 0306 	and.w	r3, r3, #6
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	bf14      	ite	ne
 80060fa:	2500      	movne	r5, #0
 80060fc:	6833      	ldreq	r3, [r6, #0]
 80060fe:	f04f 0600 	mov.w	r6, #0
 8006102:	bf08      	it	eq
 8006104:	68e5      	ldreq	r5, [r4, #12]
 8006106:	f104 041a 	add.w	r4, r4, #26
 800610a:	bf08      	it	eq
 800610c:	1aed      	subeq	r5, r5, r3
 800610e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006112:	bf08      	it	eq
 8006114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006118:	4293      	cmp	r3, r2
 800611a:	bfc4      	itt	gt
 800611c:	1a9b      	subgt	r3, r3, r2
 800611e:	18ed      	addgt	r5, r5, r3
 8006120:	42b5      	cmp	r5, r6
 8006122:	d11a      	bne.n	800615a <_printf_common+0xd2>
 8006124:	2000      	movs	r0, #0
 8006126:	e008      	b.n	800613a <_printf_common+0xb2>
 8006128:	2301      	movs	r3, #1
 800612a:	4652      	mov	r2, sl
 800612c:	4649      	mov	r1, r9
 800612e:	4638      	mov	r0, r7
 8006130:	47c0      	blx	r8
 8006132:	3001      	adds	r0, #1
 8006134:	d103      	bne.n	800613e <_printf_common+0xb6>
 8006136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613e:	3501      	adds	r5, #1
 8006140:	e7c1      	b.n	80060c6 <_printf_common+0x3e>
 8006142:	2030      	movs	r0, #48	; 0x30
 8006144:	18e1      	adds	r1, r4, r3
 8006146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006150:	4422      	add	r2, r4
 8006152:	3302      	adds	r3, #2
 8006154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006158:	e7c2      	b.n	80060e0 <_printf_common+0x58>
 800615a:	2301      	movs	r3, #1
 800615c:	4622      	mov	r2, r4
 800615e:	4649      	mov	r1, r9
 8006160:	4638      	mov	r0, r7
 8006162:	47c0      	blx	r8
 8006164:	3001      	adds	r0, #1
 8006166:	d0e6      	beq.n	8006136 <_printf_common+0xae>
 8006168:	3601      	adds	r6, #1
 800616a:	e7d9      	b.n	8006120 <_printf_common+0x98>

0800616c <_printf_i>:
 800616c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	7e0f      	ldrb	r7, [r1, #24]
 8006172:	4691      	mov	r9, r2
 8006174:	2f78      	cmp	r7, #120	; 0x78
 8006176:	4680      	mov	r8, r0
 8006178:	460c      	mov	r4, r1
 800617a:	469a      	mov	sl, r3
 800617c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800617e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006182:	d807      	bhi.n	8006194 <_printf_i+0x28>
 8006184:	2f62      	cmp	r7, #98	; 0x62
 8006186:	d80a      	bhi.n	800619e <_printf_i+0x32>
 8006188:	2f00      	cmp	r7, #0
 800618a:	f000 80d5 	beq.w	8006338 <_printf_i+0x1cc>
 800618e:	2f58      	cmp	r7, #88	; 0x58
 8006190:	f000 80c1 	beq.w	8006316 <_printf_i+0x1aa>
 8006194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800619c:	e03a      	b.n	8006214 <_printf_i+0xa8>
 800619e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061a2:	2b15      	cmp	r3, #21
 80061a4:	d8f6      	bhi.n	8006194 <_printf_i+0x28>
 80061a6:	a101      	add	r1, pc, #4	; (adr r1, 80061ac <_printf_i+0x40>)
 80061a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ac:	08006205 	.word	0x08006205
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006195 	.word	0x08006195
 80061b8:	08006195 	.word	0x08006195
 80061bc:	08006195 	.word	0x08006195
 80061c0:	08006195 	.word	0x08006195
 80061c4:	08006219 	.word	0x08006219
 80061c8:	08006195 	.word	0x08006195
 80061cc:	08006195 	.word	0x08006195
 80061d0:	08006195 	.word	0x08006195
 80061d4:	08006195 	.word	0x08006195
 80061d8:	0800631f 	.word	0x0800631f
 80061dc:	08006245 	.word	0x08006245
 80061e0:	080062d9 	.word	0x080062d9
 80061e4:	08006195 	.word	0x08006195
 80061e8:	08006195 	.word	0x08006195
 80061ec:	08006341 	.word	0x08006341
 80061f0:	08006195 	.word	0x08006195
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006195 	.word	0x08006195
 80061fc:	08006195 	.word	0x08006195
 8006200:	080062e1 	.word	0x080062e1
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	1d1a      	adds	r2, r3, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	602a      	str	r2, [r5, #0]
 800620c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006214:	2301      	movs	r3, #1
 8006216:	e0a0      	b.n	800635a <_printf_i+0x1ee>
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	0607      	lsls	r7, r0, #24
 800621e:	f103 0104 	add.w	r1, r3, #4
 8006222:	6029      	str	r1, [r5, #0]
 8006224:	d501      	bpl.n	800622a <_printf_i+0xbe>
 8006226:	681e      	ldr	r6, [r3, #0]
 8006228:	e003      	b.n	8006232 <_printf_i+0xc6>
 800622a:	0646      	lsls	r6, r0, #25
 800622c:	d5fb      	bpl.n	8006226 <_printf_i+0xba>
 800622e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006232:	2e00      	cmp	r6, #0
 8006234:	da03      	bge.n	800623e <_printf_i+0xd2>
 8006236:	232d      	movs	r3, #45	; 0x2d
 8006238:	4276      	negs	r6, r6
 800623a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623e:	230a      	movs	r3, #10
 8006240:	4859      	ldr	r0, [pc, #356]	; (80063a8 <_printf_i+0x23c>)
 8006242:	e012      	b.n	800626a <_printf_i+0xfe>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	6820      	ldr	r0, [r4, #0]
 8006248:	1d19      	adds	r1, r3, #4
 800624a:	6029      	str	r1, [r5, #0]
 800624c:	0605      	lsls	r5, r0, #24
 800624e:	d501      	bpl.n	8006254 <_printf_i+0xe8>
 8006250:	681e      	ldr	r6, [r3, #0]
 8006252:	e002      	b.n	800625a <_printf_i+0xee>
 8006254:	0641      	lsls	r1, r0, #25
 8006256:	d5fb      	bpl.n	8006250 <_printf_i+0xe4>
 8006258:	881e      	ldrh	r6, [r3, #0]
 800625a:	2f6f      	cmp	r7, #111	; 0x6f
 800625c:	bf0c      	ite	eq
 800625e:	2308      	moveq	r3, #8
 8006260:	230a      	movne	r3, #10
 8006262:	4851      	ldr	r0, [pc, #324]	; (80063a8 <_printf_i+0x23c>)
 8006264:	2100      	movs	r1, #0
 8006266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800626a:	6865      	ldr	r5, [r4, #4]
 800626c:	2d00      	cmp	r5, #0
 800626e:	bfa8      	it	ge
 8006270:	6821      	ldrge	r1, [r4, #0]
 8006272:	60a5      	str	r5, [r4, #8]
 8006274:	bfa4      	itt	ge
 8006276:	f021 0104 	bicge.w	r1, r1, #4
 800627a:	6021      	strge	r1, [r4, #0]
 800627c:	b90e      	cbnz	r6, 8006282 <_printf_i+0x116>
 800627e:	2d00      	cmp	r5, #0
 8006280:	d04b      	beq.n	800631a <_printf_i+0x1ae>
 8006282:	4615      	mov	r5, r2
 8006284:	fbb6 f1f3 	udiv	r1, r6, r3
 8006288:	fb03 6711 	mls	r7, r3, r1, r6
 800628c:	5dc7      	ldrb	r7, [r0, r7]
 800628e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006292:	4637      	mov	r7, r6
 8006294:	42bb      	cmp	r3, r7
 8006296:	460e      	mov	r6, r1
 8006298:	d9f4      	bls.n	8006284 <_printf_i+0x118>
 800629a:	2b08      	cmp	r3, #8
 800629c:	d10b      	bne.n	80062b6 <_printf_i+0x14a>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	07de      	lsls	r6, r3, #31
 80062a2:	d508      	bpl.n	80062b6 <_printf_i+0x14a>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	6861      	ldr	r1, [r4, #4]
 80062a8:	4299      	cmp	r1, r3
 80062aa:	bfde      	ittt	le
 80062ac:	2330      	movle	r3, #48	; 0x30
 80062ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062b6:	1b52      	subs	r2, r2, r5
 80062b8:	6122      	str	r2, [r4, #16]
 80062ba:	464b      	mov	r3, r9
 80062bc:	4621      	mov	r1, r4
 80062be:	4640      	mov	r0, r8
 80062c0:	f8cd a000 	str.w	sl, [sp]
 80062c4:	aa03      	add	r2, sp, #12
 80062c6:	f7ff fedf 	bl	8006088 <_printf_common>
 80062ca:	3001      	adds	r0, #1
 80062cc:	d14a      	bne.n	8006364 <_printf_i+0x1f8>
 80062ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062d2:	b004      	add	sp, #16
 80062d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	f043 0320 	orr.w	r3, r3, #32
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	2778      	movs	r7, #120	; 0x78
 80062e2:	4832      	ldr	r0, [pc, #200]	; (80063ac <_printf_i+0x240>)
 80062e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	6829      	ldr	r1, [r5, #0]
 80062ec:	061f      	lsls	r7, r3, #24
 80062ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80062f2:	d402      	bmi.n	80062fa <_printf_i+0x18e>
 80062f4:	065f      	lsls	r7, r3, #25
 80062f6:	bf48      	it	mi
 80062f8:	b2b6      	uxthmi	r6, r6
 80062fa:	07df      	lsls	r7, r3, #31
 80062fc:	bf48      	it	mi
 80062fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006302:	6029      	str	r1, [r5, #0]
 8006304:	bf48      	it	mi
 8006306:	6023      	strmi	r3, [r4, #0]
 8006308:	b91e      	cbnz	r6, 8006312 <_printf_i+0x1a6>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f023 0320 	bic.w	r3, r3, #32
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	2310      	movs	r3, #16
 8006314:	e7a6      	b.n	8006264 <_printf_i+0xf8>
 8006316:	4824      	ldr	r0, [pc, #144]	; (80063a8 <_printf_i+0x23c>)
 8006318:	e7e4      	b.n	80062e4 <_printf_i+0x178>
 800631a:	4615      	mov	r5, r2
 800631c:	e7bd      	b.n	800629a <_printf_i+0x12e>
 800631e:	682b      	ldr	r3, [r5, #0]
 8006320:	6826      	ldr	r6, [r4, #0]
 8006322:	1d18      	adds	r0, r3, #4
 8006324:	6961      	ldr	r1, [r4, #20]
 8006326:	6028      	str	r0, [r5, #0]
 8006328:	0635      	lsls	r5, r6, #24
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	d501      	bpl.n	8006332 <_printf_i+0x1c6>
 800632e:	6019      	str	r1, [r3, #0]
 8006330:	e002      	b.n	8006338 <_printf_i+0x1cc>
 8006332:	0670      	lsls	r0, r6, #25
 8006334:	d5fb      	bpl.n	800632e <_printf_i+0x1c2>
 8006336:	8019      	strh	r1, [r3, #0]
 8006338:	2300      	movs	r3, #0
 800633a:	4615      	mov	r5, r2
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	e7bc      	b.n	80062ba <_printf_i+0x14e>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	2100      	movs	r1, #0
 8006344:	1d1a      	adds	r2, r3, #4
 8006346:	602a      	str	r2, [r5, #0]
 8006348:	681d      	ldr	r5, [r3, #0]
 800634a:	6862      	ldr	r2, [r4, #4]
 800634c:	4628      	mov	r0, r5
 800634e:	f000 f859 	bl	8006404 <memchr>
 8006352:	b108      	cbz	r0, 8006358 <_printf_i+0x1ec>
 8006354:	1b40      	subs	r0, r0, r5
 8006356:	6060      	str	r0, [r4, #4]
 8006358:	6863      	ldr	r3, [r4, #4]
 800635a:	6123      	str	r3, [r4, #16]
 800635c:	2300      	movs	r3, #0
 800635e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006362:	e7aa      	b.n	80062ba <_printf_i+0x14e>
 8006364:	462a      	mov	r2, r5
 8006366:	4649      	mov	r1, r9
 8006368:	4640      	mov	r0, r8
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	47d0      	blx	sl
 800636e:	3001      	adds	r0, #1
 8006370:	d0ad      	beq.n	80062ce <_printf_i+0x162>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	079b      	lsls	r3, r3, #30
 8006376:	d413      	bmi.n	80063a0 <_printf_i+0x234>
 8006378:	68e0      	ldr	r0, [r4, #12]
 800637a:	9b03      	ldr	r3, [sp, #12]
 800637c:	4298      	cmp	r0, r3
 800637e:	bfb8      	it	lt
 8006380:	4618      	movlt	r0, r3
 8006382:	e7a6      	b.n	80062d2 <_printf_i+0x166>
 8006384:	2301      	movs	r3, #1
 8006386:	4632      	mov	r2, r6
 8006388:	4649      	mov	r1, r9
 800638a:	4640      	mov	r0, r8
 800638c:	47d0      	blx	sl
 800638e:	3001      	adds	r0, #1
 8006390:	d09d      	beq.n	80062ce <_printf_i+0x162>
 8006392:	3501      	adds	r5, #1
 8006394:	68e3      	ldr	r3, [r4, #12]
 8006396:	9903      	ldr	r1, [sp, #12]
 8006398:	1a5b      	subs	r3, r3, r1
 800639a:	42ab      	cmp	r3, r5
 800639c:	dcf2      	bgt.n	8006384 <_printf_i+0x218>
 800639e:	e7eb      	b.n	8006378 <_printf_i+0x20c>
 80063a0:	2500      	movs	r5, #0
 80063a2:	f104 0619 	add.w	r6, r4, #25
 80063a6:	e7f5      	b.n	8006394 <_printf_i+0x228>
 80063a8:	0800656f 	.word	0x0800656f
 80063ac:	08006580 	.word	0x08006580

080063b0 <memmove>:
 80063b0:	4288      	cmp	r0, r1
 80063b2:	b510      	push	{r4, lr}
 80063b4:	eb01 0402 	add.w	r4, r1, r2
 80063b8:	d902      	bls.n	80063c0 <memmove+0x10>
 80063ba:	4284      	cmp	r4, r0
 80063bc:	4623      	mov	r3, r4
 80063be:	d807      	bhi.n	80063d0 <memmove+0x20>
 80063c0:	1e43      	subs	r3, r0, #1
 80063c2:	42a1      	cmp	r1, r4
 80063c4:	d008      	beq.n	80063d8 <memmove+0x28>
 80063c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ce:	e7f8      	b.n	80063c2 <memmove+0x12>
 80063d0:	4601      	mov	r1, r0
 80063d2:	4402      	add	r2, r0
 80063d4:	428a      	cmp	r2, r1
 80063d6:	d100      	bne.n	80063da <memmove+0x2a>
 80063d8:	bd10      	pop	{r4, pc}
 80063da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063e2:	e7f7      	b.n	80063d4 <memmove+0x24>

080063e4 <_sbrk_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	2300      	movs	r3, #0
 80063e8:	4d05      	ldr	r5, [pc, #20]	; (8006400 <_sbrk_r+0x1c>)
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fa fa68 	bl	80008c4 <_sbrk>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_sbrk_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_sbrk_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20001c28 	.word	0x20001c28

08006404 <memchr>:
 8006404:	4603      	mov	r3, r0
 8006406:	b510      	push	{r4, lr}
 8006408:	b2c9      	uxtb	r1, r1
 800640a:	4402      	add	r2, r0
 800640c:	4293      	cmp	r3, r2
 800640e:	4618      	mov	r0, r3
 8006410:	d101      	bne.n	8006416 <memchr+0x12>
 8006412:	2000      	movs	r0, #0
 8006414:	e003      	b.n	800641e <memchr+0x1a>
 8006416:	7804      	ldrb	r4, [r0, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	428c      	cmp	r4, r1
 800641c:	d1f6      	bne.n	800640c <memchr+0x8>
 800641e:	bd10      	pop	{r4, pc}

08006420 <_realloc_r>:
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	4680      	mov	r8, r0
 8006426:	4614      	mov	r4, r2
 8006428:	460e      	mov	r6, r1
 800642a:	b921      	cbnz	r1, 8006436 <_realloc_r+0x16>
 800642c:	4611      	mov	r1, r2
 800642e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006432:	f7ff bc45 	b.w	8005cc0 <_malloc_r>
 8006436:	b92a      	cbnz	r2, 8006444 <_realloc_r+0x24>
 8006438:	f7ff fbda 	bl	8005bf0 <_free_r>
 800643c:	4625      	mov	r5, r4
 800643e:	4628      	mov	r0, r5
 8006440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006444:	f000 f81b 	bl	800647e <_malloc_usable_size_r>
 8006448:	4284      	cmp	r4, r0
 800644a:	4607      	mov	r7, r0
 800644c:	d802      	bhi.n	8006454 <_realloc_r+0x34>
 800644e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006452:	d812      	bhi.n	800647a <_realloc_r+0x5a>
 8006454:	4621      	mov	r1, r4
 8006456:	4640      	mov	r0, r8
 8006458:	f7ff fc32 	bl	8005cc0 <_malloc_r>
 800645c:	4605      	mov	r5, r0
 800645e:	2800      	cmp	r0, #0
 8006460:	d0ed      	beq.n	800643e <_realloc_r+0x1e>
 8006462:	42bc      	cmp	r4, r7
 8006464:	4622      	mov	r2, r4
 8006466:	4631      	mov	r1, r6
 8006468:	bf28      	it	cs
 800646a:	463a      	movcs	r2, r7
 800646c:	f7ff fbb2 	bl	8005bd4 <memcpy>
 8006470:	4631      	mov	r1, r6
 8006472:	4640      	mov	r0, r8
 8006474:	f7ff fbbc 	bl	8005bf0 <_free_r>
 8006478:	e7e1      	b.n	800643e <_realloc_r+0x1e>
 800647a:	4635      	mov	r5, r6
 800647c:	e7df      	b.n	800643e <_realloc_r+0x1e>

0800647e <_malloc_usable_size_r>:
 800647e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006482:	1f18      	subs	r0, r3, #4
 8006484:	2b00      	cmp	r3, #0
 8006486:	bfbc      	itt	lt
 8006488:	580b      	ldrlt	r3, [r1, r0]
 800648a:	18c0      	addlt	r0, r0, r3
 800648c:	4770      	bx	lr
	...

08006490 <_init>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr

0800649c <_fini>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr
