
STMProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c14  08003c14  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c14  08003c14  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c14  08003c14  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000060  08003c78  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08003c78  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c561  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dbe  00000000  00000000  0002c629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  0002e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000998  00000000  00000000  0002f028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b83  00000000  00000000  0002f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d716  00000000  00000000  00047543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a4cc  00000000  00000000  00054c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003838  00000000  00000000  000df128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e2960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b94 	.word	0x08003b94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003b94 	.word	0x08003b94

0800014c <update_encoder>:
 *      Author: Ashli Forbes
 */
#include "encoder_handler.h"

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 800014c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000150:	b085      	sub	sp, #20
 8000152:	af00      	add	r7, sp, #0
 8000154:	6078      	str	r0, [r7, #4]
 8000156:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 8000158:	683b      	ldr	r3, [r7, #0]
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800015e:	60fb      	str	r3, [r7, #12]
	if(!encoder_value->first_time)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	f993 3000 	ldrsb.w	r3, [r3]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d103      	bne.n	8000172 <update_encoder+0x26>
	{
		encoder_value->first_time = 1;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2201      	movs	r2, #1
 800016e:	701a      	strb	r2, [r3, #0]
 8000170:	e052      	b.n	8000218 <update_encoder+0xcc>
	}
	else
	{
	  if(temp_counter == encoder_value->last_counter_value)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	691b      	ldr	r3, [r3, #16]
 8000176:	68fa      	ldr	r2, [r7, #12]
 8000178:	429a      	cmp	r2, r3
 800017a:	d103      	bne.n	8000184 <update_encoder+0x38>
	  {
	    encoder_value->delta_position = 0;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2200      	movs	r2, #0
 8000180:	805a      	strh	r2, [r3, #2]
 8000182:	e049      	b.n	8000218 <update_encoder+0xcc>
	  }
	  else if(temp_counter > encoder_value->last_counter_value)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	691b      	ldr	r3, [r3, #16]
 8000188:	68fa      	ldr	r2, [r7, #12]
 800018a:	429a      	cmp	r2, r3
 800018c:	d922      	bls.n	80001d4 <update_encoder+0x88>
	  {
	    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 800018e:	683b      	ldr	r3, [r7, #0]
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	f003 0310 	and.w	r3, r3, #16
 8000198:	2b10      	cmp	r3, #16
 800019a:	d110      	bne.n	80001be <update_encoder+0x72>
	    {
	      encoder_value->delta_position = -encoder_value->last_counter_value -
		(__HAL_TIM_GET_AUTORELOAD(htim)-temp_counter);
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	b29a      	uxth	r2, r3
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001a6:	b29b      	uxth	r3, r3
 80001a8:	1ad3      	subs	r3, r2, r3
 80001aa:	b29a      	uxth	r2, r3
	      encoder_value->delta_position = -encoder_value->last_counter_value -
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	691b      	ldr	r3, [r3, #16]
 80001b0:	b29b      	uxth	r3, r3
 80001b2:	1ad3      	subs	r3, r2, r3
 80001b4:	b29b      	uxth	r3, r3
 80001b6:	b21a      	sxth	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	805a      	strh	r2, [r3, #2]
 80001bc:	e02c      	b.n	8000218 <update_encoder+0xcc>
	    }
	    else
	    {
	      encoder_value->delta_position = temp_counter -
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	b29a      	uxth	r2, r3
	           encoder_value->last_counter_value;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	691b      	ldr	r3, [r3, #16]
	      encoder_value->delta_position = temp_counter -
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	1ad3      	subs	r3, r2, r3
 80001ca:	b29b      	uxth	r3, r3
 80001cc:	b21a      	sxth	r2, r3
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	805a      	strh	r2, [r3, #2]
 80001d2:	e021      	b.n	8000218 <update_encoder+0xcc>
	    }
	  }
	  else
	  {
	    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f003 0310 	and.w	r3, r3, #16
 80001de:	2b10      	cmp	r3, #16
 80001e0:	d10a      	bne.n	80001f8 <update_encoder+0xac>
	    {
		encoder_value->delta_position = temp_counter -
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	b29a      	uxth	r2, r3
	            encoder_value->last_counter_value;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	691b      	ldr	r3, [r3, #16]
		encoder_value->delta_position = temp_counter -
 80001ea:	b29b      	uxth	r3, r3
 80001ec:	1ad3      	subs	r3, r2, r3
 80001ee:	b29b      	uxth	r3, r3
 80001f0:	b21a      	sxth	r2, r3
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	805a      	strh	r2, [r3, #2]
 80001f6:	e00f      	b.n	8000218 <update_encoder+0xcc>
	    }
	    else
	    {
		encoder_value->delta_position = temp_counter +
		(__HAL_TIM_GET_AUTORELOAD(htim) -
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001fe:	b29a      	uxth	r2, r3
	              encoder_value->last_counter_value);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	691b      	ldr	r3, [r3, #16]
		(__HAL_TIM_GET_AUTORELOAD(htim) -
 8000204:	b29b      	uxth	r3, r3
 8000206:	1ad3      	subs	r3, r2, r3
 8000208:	b29a      	uxth	r2, r3
		encoder_value->delta_position = temp_counter +
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	b29b      	uxth	r3, r3
 800020e:	4413      	add	r3, r2
 8000210:	b29b      	uxth	r3, r3
 8000212:	b21a      	sxth	r2, r3
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	805a      	strh	r2, [r3, #2]
	    }
	   }
	}
	encoder_value->position += encoder_value ->delta_position;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800021e:	6879      	ldr	r1, [r7, #4]
 8000220:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8000224:	b209      	sxth	r1, r1
 8000226:	17c8      	asrs	r0, r1, #31
 8000228:	460c      	mov	r4, r1
 800022a:	4605      	mov	r5, r0
 800022c:	eb12 0804 	adds.w	r8, r2, r4
 8000230:	eb43 0905 	adc.w	r9, r3, r5
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	e9c3 8902 	strd	r8, r9, [r3, #8]
	encoder_value->last_counter_value = temp_counter;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	611a      	str	r2, [r3, #16]
}
 8000240:	bf00      	nop
 8000242:	3714      	adds	r7, #20
 8000244:	46bd      	mov	sp, r7
 8000246:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800024a:	4770      	bx	lr

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b5b0      	push	{r4, r5, r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000252:	f000 fc0f 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000256:	f000 f89b 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025a:	f000 f9dd 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 800025e:	f000 f9bd 	bl	80005dc <MX_DMA_Init>
  MX_TIM3_Init();
 8000262:	f000 f933 	bl	80004cc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000266:	f000 f98f 	bl	8000588 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800026a:	f000 f8d7 	bl	800041c <MX_TIM2_Init>
  /* USER CODE BEGIN 2*/
  uint8_t message[DATA_LENGTH] = {'\0'};
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
 8000272:	f107 0310 	add.w	r3, r7, #16
 8000276:	2100      	movs	r1, #0
 8000278:	460a      	mov	r2, r1
 800027a:	801a      	strh	r2, [r3, #0]
 800027c:	460a      	mov	r2, r1
 800027e:	709a      	strb	r2, [r3, #2]
  uint8_t RxData[DATA_LENGTH];
  int32_t dutyCycle = 0;
 8000280:	2300      	movs	r3, #0
 8000282:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dutyCycle = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
	  // measure velocity, position
	  update_encoder(&enc_instance, &htim2);
 8000288:	4939      	ldr	r1, [pc, #228]	; (8000370 <main+0x124>)
 800028a:	483a      	ldr	r0, [pc, #232]	; (8000374 <main+0x128>)
 800028c:	f7ff ff5e 	bl	800014c <update_encoder>
	  encoder_delta_position = enc_instance.delta_position;
 8000290:	4b38      	ldr	r3, [pc, #224]	; (8000374 <main+0x128>)
 8000292:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000296:	b21b      	sxth	r3, r3
 8000298:	17da      	asrs	r2, r3, #31
 800029a:	461c      	mov	r4, r3
 800029c:	4615      	mov	r5, r2
 800029e:	4b36      	ldr	r3, [pc, #216]	; (8000378 <main+0x12c>)
 80002a0:	e9c3 4500 	strd	r4, r5, [r3]

	  sprintf(message, "%d\r\n", encoder_delta_position); //add detailed message
 80002a4:	4b34      	ldr	r3, [pc, #208]	; (8000378 <main+0x12c>)
 80002a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002aa:	f107 000c 	add.w	r0, r7, #12
 80002ae:	4933      	ldr	r1, [pc, #204]	; (800037c <main+0x130>)
 80002b0:	f002 ffbe 	bl	8003230 <siprintf>
	  HAL_UART_Transmit(&huart2, message, sizeof(message), UART_TIMEOUT);
 80002b4:	f107 010c 	add.w	r1, r7, #12
 80002b8:	2364      	movs	r3, #100	; 0x64
 80002ba:	2207      	movs	r2, #7
 80002bc:	4830      	ldr	r0, [pc, #192]	; (8000380 <main+0x134>)
 80002be:	f002 fbcb 	bl	8002a58 <HAL_UART_Transmit>
	  HAL_UART_Receive_DMA(&huart2, RxData, sizeof(RxData));
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2207      	movs	r2, #7
 80002c6:	4619      	mov	r1, r3
 80002c8:	482d      	ldr	r0, [pc, #180]	; (8000380 <main+0x134>)
 80002ca:	f002 fc48 	bl	8002b5e <HAL_UART_Receive_DMA>

	  //check for negative PWM
 	  if(RxData[0]== '-')
 80002ce:	793b      	ldrb	r3, [r7, #4]
 80002d0:	2b2d      	cmp	r3, #45	; 0x2d
 80002d2:	d105      	bne.n	80002e0 <main+0x94>
 	  {
 		 HAL_GPIO_WritePin(WHEEL_M_DIR_GPIO_Port, WHEEL_M_DIR_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	482a      	ldr	r0, [pc, #168]	; (8000384 <main+0x138>)
 80002da:	f001 f8ad 	bl	8001438 <HAL_GPIO_WritePin>
 80002de:	e004      	b.n	80002ea <main+0x9e>
 	  }
 	  else
 	  {
 		 HAL_GPIO_WritePin(WHEEL_M_DIR_GPIO_Port, WHEEL_M_DIR_Pin, GPIO_PIN_SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2120      	movs	r1, #32
 80002e4:	4827      	ldr	r0, [pc, #156]	; (8000384 <main+0x138>)
 80002e6:	f001 f8a7 	bl	8001438 <HAL_GPIO_WritePin>
 	  }

	  for(uint8_t i = 0; RxData[i] != '\t' && i< sizeof(RxData); i++)
 80002ea:	2300      	movs	r3, #0
 80002ec:	74fb      	strb	r3, [r7, #19]
 80002ee:	e019      	b.n	8000324 <main+0xd8>
	   {
		  if(RxData[i]== '-')
 80002f0:	7cfb      	ldrb	r3, [r7, #19]
 80002f2:	3318      	adds	r3, #24
 80002f4:	443b      	add	r3, r7
 80002f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80002fa:	2b2d      	cmp	r3, #45	; 0x2d
 80002fc:	d00e      	beq.n	800031c <main+0xd0>
			  continue;
		  }
		  else
		  {
			  //change values from string to integer value
			  dutyCycle = dutyCycle*10 + (RxData[i] - '0');
 80002fe:	697a      	ldr	r2, [r7, #20]
 8000300:	4613      	mov	r3, r2
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	4413      	add	r3, r2
 8000306:	005b      	lsls	r3, r3, #1
 8000308:	461a      	mov	r2, r3
 800030a:	7cfb      	ldrb	r3, [r7, #19]
 800030c:	3318      	adds	r3, #24
 800030e:	443b      	add	r3, r7
 8000310:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000314:	3b30      	subs	r3, #48	; 0x30
 8000316:	4413      	add	r3, r2
 8000318:	617b      	str	r3, [r7, #20]
 800031a:	e000      	b.n	800031e <main+0xd2>
			  continue;
 800031c:	bf00      	nop
	  for(uint8_t i = 0; RxData[i] != '\t' && i< sizeof(RxData); i++)
 800031e:	7cfb      	ldrb	r3, [r7, #19]
 8000320:	3301      	adds	r3, #1
 8000322:	74fb      	strb	r3, [r7, #19]
 8000324:	7cfb      	ldrb	r3, [r7, #19]
 8000326:	3318      	adds	r3, #24
 8000328:	443b      	add	r3, r7
 800032a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800032e:	2b09      	cmp	r3, #9
 8000330:	d002      	beq.n	8000338 <main+0xec>
 8000332:	7cfb      	ldrb	r3, [r7, #19]
 8000334:	2b06      	cmp	r3, #6
 8000336:	d9db      	bls.n	80002f0 <main+0xa4>
		  }
	   }

	  dutyCycle = abs(dutyCycle);
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	2b00      	cmp	r3, #0
 800033c:	bfb8      	it	lt
 800033e:	425b      	neglt	r3, r3
 8000340:	617b      	str	r3, [r7, #20]

	  //push PWM value
	  if(dutyCycle < DUTYCYCLE_MAX)
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000348:	da0e      	bge.n	8000368 <main+0x11c>
	  {
		  	  dutyCycle = dutyCycle*DUTYCYCLE_SCALER;
 800034a:	697a      	ldr	r2, [r7, #20]
 800034c:	4613      	mov	r3, r2
 800034e:	041b      	lsls	r3, r3, #16
 8000350:	1a9b      	subs	r3, r3, r2
 8000352:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <main+0x13c>)
 8000354:	fb82 1203 	smull	r1, r2, r2, r3
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	17db      	asrs	r3, r3, #31
 800035c:	1ad3      	subs	r3, r2, r3
 800035e:	617b      	str	r3, [r7, #20]
	       	  TIM3->CCR1 = dutyCycle;
 8000360:	4a0a      	ldr	r2, [pc, #40]	; (800038c <main+0x140>)
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	6353      	str	r3, [r2, #52]	; 0x34
 8000366:	e78d      	b.n	8000284 <main+0x38>
	  }
	  else
	  {
		  TIM3->CCR1 = 0;
 8000368:	4b08      	ldr	r3, [pc, #32]	; (800038c <main+0x140>)
 800036a:	2200      	movs	r2, #0
 800036c:	635a      	str	r2, [r3, #52]	; 0x34
  {
 800036e:	e789      	b.n	8000284 <main+0x38>
 8000370:	2000007c 	.word	0x2000007c
 8000374:	200001a0 	.word	0x200001a0
 8000378:	20000198 	.word	0x20000198
 800037c:	08003bac 	.word	0x08003bac
 8000380:	2000010c 	.word	0x2000010c
 8000384:	40010800 	.word	0x40010800
 8000388:	10624dd3 	.word	0x10624dd3
 800038c:	40000400 	.word	0x40000400

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b090      	sub	sp, #64	; 0x40
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2228      	movs	r2, #40	; 0x28
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 ff66 	bl	8003270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
 80003b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	2301      	movs	r3, #1
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	f107 0318 	add.w	r3, r7, #24
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 f845 	bl	8001468 <HAL_RCC_OscConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003e4:	f000 f978 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	230f      	movs	r3, #15
 80003ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ec:	2302      	movs	r3, #2
 80003ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2102      	movs	r1, #2
 8000402:	4618      	mov	r0, r3
 8000404:	f001 fab2 	bl	800196c <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800040e:	f000 f963 	bl	80006d8 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3740      	adds	r7, #64	; 0x40
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08c      	sub	sp, #48	; 0x30
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	2224      	movs	r2, #36	; 0x24
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f002 ff20 	bl	8003270 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000438:	4b23      	ldr	r3, [pc, #140]	; (80004c8 <MX_TIM2_Init+0xac>)
 800043a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000440:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000442:	2200      	movs	r2, #0
 8000444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000446:	4b20      	ldr	r3, [pc, #128]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000448:	2200      	movs	r2, #0
 800044a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800044c:	4b1e      	ldr	r3, [pc, #120]	; (80004c8 <MX_TIM2_Init+0xac>)
 800044e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000454:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <MX_TIM2_Init+0xac>)
 8000456:	2200      	movs	r2, #0
 8000458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <MX_TIM2_Init+0xac>)
 800045c:	2280      	movs	r2, #128	; 0x80
 800045e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000460:	2303      	movs	r3, #3
 8000462:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000464:	2300      	movs	r3, #0
 8000466:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000468:	2301      	movs	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000470:	230a      	movs	r3, #10
 8000472:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000474:	2300      	movs	r3, #0
 8000476:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000478:	2301      	movs	r3, #1
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000484:	f107 030c 	add.w	r3, r7, #12
 8000488:	4619      	mov	r1, r3
 800048a:	480f      	ldr	r0, [pc, #60]	; (80004c8 <MX_TIM2_Init+0xac>)
 800048c:	f001 fcee 	bl	8001e6c <HAL_TIM_Encoder_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000496:	f000 f91f 	bl	80006d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800049a:	2300      	movs	r3, #0
 800049c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	4808      	ldr	r0, [pc, #32]	; (80004c8 <MX_TIM2_Init+0xac>)
 80004a8:	f002 fa16 	bl	80028d8 <HAL_TIMEx_MasterConfigSynchronization>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80004b2:	f000 f911 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80004b6:	213c      	movs	r1, #60	; 0x3c
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <MX_TIM2_Init+0xac>)
 80004ba:	f001 fd79 	bl	8001fb0 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	3730      	adds	r7, #48	; 0x30
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2000007c 	.word	0x2000007c

080004cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d2:	f107 0320 	add.w	r3, r7, #32
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ee:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_TIM3_Init+0xb4>)
 80004f0:	4a24      	ldr	r2, [pc, #144]	; (8000584 <MX_TIM3_Init+0xb8>)
 80004f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004f4:	4b22      	ldr	r3, [pc, #136]	; (8000580 <MX_TIM3_Init+0xb4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fa:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_TIM3_Init+0xb4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000500:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <MX_TIM3_Init+0xb4>)
 8000502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_TIM3_Init+0xb4>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <MX_TIM3_Init+0xb4>)
 8000510:	2280      	movs	r2, #128	; 0x80
 8000512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000514:	481a      	ldr	r0, [pc, #104]	; (8000580 <MX_TIM3_Init+0xb4>)
 8000516:	f001 fbb7 	bl	8001c88 <HAL_TIM_PWM_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000520:	f000 f8da 	bl	80006d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000528:	2300      	movs	r3, #0
 800052a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800052c:	f107 0320 	add.w	r3, r7, #32
 8000530:	4619      	mov	r1, r3
 8000532:	4813      	ldr	r0, [pc, #76]	; (8000580 <MX_TIM3_Init+0xb4>)
 8000534:	f002 f9d0 	bl	80028d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800053e:	f000 f8cb 	bl	80006d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000542:	2360      	movs	r3, #96	; 0x60
 8000544:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	4619      	mov	r1, r3
 8000558:	4809      	ldr	r0, [pc, #36]	; (8000580 <MX_TIM3_Init+0xb4>)
 800055a:	f001 febf 	bl	80022dc <HAL_TIM_PWM_ConfigChannel>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000564:	f000 f8b8 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000568:	2100      	movs	r1, #0
 800056a:	4805      	ldr	r0, [pc, #20]	; (8000580 <MX_TIM3_Init+0xb4>)
 800056c:	f001 fbdc 	bl	8001d28 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000570:	4803      	ldr	r0, [pc, #12]	; (8000580 <MX_TIM3_Init+0xb4>)
 8000572:	f000 f93b 	bl	80007ec <HAL_TIM_MspPostInit>

}
 8000576:	bf00      	nop
 8000578:	3728      	adds	r7, #40	; 0x28
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000c4 	.word	0x200000c4
 8000584:	40000400 	.word	0x40000400

08000588 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <MX_USART2_UART_Init+0x50>)
 8000590:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 8000594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000598:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005ae:	220c      	movs	r2, #12
 80005b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_USART2_UART_Init+0x4c>)
 80005c0:	f002 f9fa 	bl	80029b8 <HAL_UART_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005ca:	f000 f885 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000010c 	.word	0x2000010c
 80005d8:	40004400 	.word	0x40004400

080005dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_DMA_Init+0x38>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <MX_DMA_Init+0x38>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6153      	str	r3, [r2, #20]
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_DMA_Init+0x38>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2010      	movs	r0, #16
 8000600:	f000 fb71 	bl	8000ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000604:	2010      	movs	r0, #16
 8000606:	f000 fb8a 	bl	8000d1e <HAL_NVIC_EnableIRQ>

}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0310 	add.w	r3, r7, #16
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <MX_GPIO_Init+0xb4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a26      	ldr	r2, [pc, #152]	; (80006cc <MX_GPIO_Init+0xb4>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <MX_GPIO_Init+0xb4>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_GPIO_Init+0xb4>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <MX_GPIO_Init+0xb4>)
 800064a:	f043 0320 	orr.w	r3, r3, #32
 800064e:	6193      	str	r3, [r2, #24]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_GPIO_Init+0xb4>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	f003 0320 	and.w	r3, r3, #32
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_GPIO_Init+0xb4>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a1a      	ldr	r2, [pc, #104]	; (80006cc <MX_GPIO_Init+0xb4>)
 8000662:	f043 0304 	orr.w	r3, r3, #4
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_GPIO_Init+0xb4>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0304 	and.w	r3, r3, #4
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067a:	4815      	ldr	r0, [pc, #84]	; (80006d0 <MX_GPIO_Init+0xb8>)
 800067c:	f000 fedc 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2120      	movs	r1, #32
 8000684:	4813      	ldr	r0, [pc, #76]	; (80006d4 <MX_GPIO_Init+0xbc>)
 8000686:	f000 fed7 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MX_GPIO_Init+0xb8>)
 80006a4:	f000 fd44 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006a8:	2320      	movs	r3, #32
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_GPIO_Init+0xbc>)
 80006c0:	f000 fd36 	bl	8001130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40011000 	.word	0x40011000
 80006d4:	40010800 	.word	0x40010800

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_MspInit+0x40>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <HAL_MspInit+0x40>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <HAL_MspInit+0x40>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <HAL_MspInit+0x40>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a07      	ldr	r2, [pc, #28]	; (8000724 <HAL_MspInit+0x40>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_MspInit+0x40>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000

08000728 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000746:	d12b      	bne.n	80007a0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <HAL_TIM_Encoder_MspInit+0x80>)
 800074a:	69db      	ldr	r3, [r3, #28]
 800074c:	4a16      	ldr	r2, [pc, #88]	; (80007a8 <HAL_TIM_Encoder_MspInit+0x80>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	61d3      	str	r3, [r2, #28]
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <HAL_TIM_Encoder_MspInit+0x80>)
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_TIM_Encoder_MspInit+0x80>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0304 	and.w	r3, r3, #4
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000778:	2303      	movs	r3, #3
 800077a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <HAL_TIM_Encoder_MspInit+0x84>)
 800078c:	f000 fcd0 	bl	8001130 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	201c      	movs	r0, #28
 8000796:	f000 faa6 	bl	8000ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800079a:	201c      	movs	r0, #28
 800079c:	f000 fabf 	bl	8000d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010800 	.word	0x40010800

080007b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <HAL_TIM_PWM_MspInit+0x34>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d10b      	bne.n	80007da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_TIM_PWM_MspInit+0x38>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_TIM_PWM_MspInit+0x38>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_TIM_PWM_MspInit+0x38>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	40000400 	.word	0x40000400
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_TIM_MspPostInit+0x58>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d117      	bne.n	800083c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_TIM_MspPostInit+0x5c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <HAL_TIM_MspPostInit+0x5c>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_TIM_MspPostInit+0x5c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000824:	2340      	movs	r3, #64	; 0x40
 8000826:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2302      	movs	r3, #2
 800082e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_TIM_MspPostInit+0x60>)
 8000838:	f000 fc7a 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40000400 	.word	0x40000400
 8000848:	40021000 	.word	0x40021000
 800084c:	40010800 	.word	0x40010800

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a2e      	ldr	r2, [pc, #184]	; (8000924 <HAL_UART_MspInit+0xd4>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d155      	bne.n	800091c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b2d      	ldr	r3, [pc, #180]	; (8000928 <HAL_UART_MspInit+0xd8>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a2c      	ldr	r2, [pc, #176]	; (8000928 <HAL_UART_MspInit+0xd8>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	4b2a      	ldr	r3, [pc, #168]	; (8000928 <HAL_UART_MspInit+0xd8>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <HAL_UART_MspInit+0xd8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a26      	ldr	r2, [pc, #152]	; (8000928 <HAL_UART_MspInit+0xd8>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <HAL_UART_MspInit+0xd8>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a0:	2304      	movs	r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	481e      	ldr	r0, [pc, #120]	; (800092c <HAL_UART_MspInit+0xdc>)
 80008b4:	f000 fc3c 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b8:	2308      	movs	r3, #8
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4818      	ldr	r0, [pc, #96]	; (800092c <HAL_UART_MspInit+0xdc>)
 80008cc:	f000 fc30 	bl	8001130 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <HAL_UART_MspInit+0xe0>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <HAL_UART_MspInit+0xe4>)
 80008d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_UART_MspInit+0xe0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_UART_MspInit+0xe0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <HAL_UART_MspInit+0xe0>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <HAL_UART_MspInit+0xe0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_UART_MspInit+0xe0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_UART_MspInit+0xe0>)
 80008f6:	2220      	movs	r2, #32
 80008f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_UART_MspInit+0xe0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <HAL_UART_MspInit+0xe0>)
 8000902:	f000 fa27 	bl	8000d54 <HAL_DMA_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800090c:	f7ff fee4 	bl	80006d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_UART_MspInit+0xe0>)
 8000914:	63da      	str	r2, [r3, #60]	; 0x3c
 8000916:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_UART_MspInit+0xe0>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40004400 	.word	0x40004400
 8000928:	40021000 	.word	0x40021000
 800092c:	40010800 	.word	0x40010800
 8000930:	20000154 	.word	0x20000154
 8000934:	4002006c 	.word	0x4002006c

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr

08000962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f8bf 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <DMA1_Channel6_IRQHandler+0x10>)
 800098e:	f000 fa9b 	bl	8000ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000154 	.word	0x20000154

0800099c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <TIM2_IRQHandler+0x10>)
 80009a2:	f001 fb93 	bl	80020cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000007c 	.word	0x2000007c

080009b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b8:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <_sbrk+0x5c>)
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <_sbrk+0x60>)
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c4:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <_sbrk+0x64>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <_sbrk+0x64>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <_sbrk+0x68>)
 80009d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d207      	bcs.n	80009f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009e0:	f002 fc4e 	bl	8003280 <__errno>
 80009e4:	4603      	mov	r3, r0
 80009e6:	220c      	movs	r2, #12
 80009e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ee:	e009      	b.n	8000a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <_sbrk+0x64>)
 8000a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20005000 	.word	0x20005000
 8000a10:	00000400 	.word	0x00000400
 8000a14:	200001b8 	.word	0x200001b8
 8000a18:	20000308 	.word	0x20000308

08000a1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a28:	f7ff fff8 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480b      	ldr	r0, [pc, #44]	; (8000a5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2e:	490c      	ldr	r1, [pc, #48]	; (8000a60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a30:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a44:	4c09      	ldr	r4, [pc, #36]	; (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 fc1b 	bl	800328c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff fbf9 	bl	800024c <main>
  bx lr
 8000a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a64:	08003c1c 	.word	0x08003c1c
  ldr r2, =_sbss
 8000a68:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a6c:	20000308 	.word	0x20000308

08000a70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC1_2_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_Init+0x28>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_Init+0x28>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 f923 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	200f      	movs	r0, #15
 8000a8c:	f000 f808 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fe28 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f93b 	bl	8000d3a <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000adc:	f000 f903 	bl	8000ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x1c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x20>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <HAL_IncTick+0x20>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200001bc 	.word	0x200001bc

08000b24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetTick+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr
 8000b34:	200001bc 	.word	0x200001bc

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4906      	ldr	r1, [pc, #24]	; (8000bd0 <__NVIC_EnableIRQ+0x34>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f7ff ff90 	bl	8000bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff2d 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff42 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff90 	bl	8000c28 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5f 	bl	8000bd4 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff35 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ffa2 	bl	8000c8c <SysTick_Config>
 8000d48:	4603      	mov	r3, r0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e043      	b.n	8000df2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <HAL_DMA_Init+0xa8>)
 8000d72:	4413      	add	r3, r2
 8000d74:	4a22      	ldr	r2, [pc, #136]	; (8000e00 <HAL_DMA_Init+0xac>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	009a      	lsls	r2, r3, #2
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <HAL_DMA_Init+0xb0>)
 8000d86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000da2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	bffdfff8 	.word	0xbffdfff8
 8000e00:	cccccccd 	.word	0xcccccccd
 8000e04:	40020000 	.word	0x40020000

08000e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d101      	bne.n	8000e28 <HAL_DMA_Start_IT+0x20>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e04b      	b.n	8000ec0 <HAL_DMA_Start_IT+0xb8>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d13a      	bne.n	8000eb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2202      	movs	r2, #2
 8000e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2200      	movs	r2, #0
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0201 	bic.w	r2, r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	68b9      	ldr	r1, [r7, #8]
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f000 f937 	bl	80010d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d008      	beq.n	8000e80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 020e 	orr.w	r2, r2, #14
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e00f      	b.n	8000ea0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0204 	bic.w	r2, r2, #4
 8000e8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 020a 	orr.w	r2, r2, #10
 8000e9e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0201 	orr.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	e005      	b.n	8000ebe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d04f      	beq.n	8000f90 <HAL_DMA_IRQHandler+0xc8>
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d04a      	beq.n	8000f90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0320 	and.w	r3, r3, #32
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d107      	bne.n	8000f18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0204 	bic.w	r2, r2, #4
 8000f16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a66      	ldr	r2, [pc, #408]	; (80010b8 <HAL_DMA_IRQHandler+0x1f0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d029      	beq.n	8000f76 <HAL_DMA_IRQHandler+0xae>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a65      	ldr	r2, [pc, #404]	; (80010bc <HAL_DMA_IRQHandler+0x1f4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d022      	beq.n	8000f72 <HAL_DMA_IRQHandler+0xaa>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a63      	ldr	r2, [pc, #396]	; (80010c0 <HAL_DMA_IRQHandler+0x1f8>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d01a      	beq.n	8000f6c <HAL_DMA_IRQHandler+0xa4>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a62      	ldr	r2, [pc, #392]	; (80010c4 <HAL_DMA_IRQHandler+0x1fc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d012      	beq.n	8000f66 <HAL_DMA_IRQHandler+0x9e>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a60      	ldr	r2, [pc, #384]	; (80010c8 <HAL_DMA_IRQHandler+0x200>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00a      	beq.n	8000f60 <HAL_DMA_IRQHandler+0x98>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a5f      	ldr	r2, [pc, #380]	; (80010cc <HAL_DMA_IRQHandler+0x204>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d102      	bne.n	8000f5a <HAL_DMA_IRQHandler+0x92>
 8000f54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f58:	e00e      	b.n	8000f78 <HAL_DMA_IRQHandler+0xb0>
 8000f5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f5e:	e00b      	b.n	8000f78 <HAL_DMA_IRQHandler+0xb0>
 8000f60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f64:	e008      	b.n	8000f78 <HAL_DMA_IRQHandler+0xb0>
 8000f66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f6a:	e005      	b.n	8000f78 <HAL_DMA_IRQHandler+0xb0>
 8000f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f70:	e002      	b.n	8000f78 <HAL_DMA_IRQHandler+0xb0>
 8000f72:	2340      	movs	r3, #64	; 0x40
 8000f74:	e000      	b.n	8000f78 <HAL_DMA_IRQHandler+0xb0>
 8000f76:	2304      	movs	r3, #4
 8000f78:	4a55      	ldr	r2, [pc, #340]	; (80010d0 <HAL_DMA_IRQHandler+0x208>)
 8000f7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 8094 	beq.w	80010ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f8e:	e08e      	b.n	80010ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	2202      	movs	r2, #2
 8000f96:	409a      	lsls	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d056      	beq.n	800104e <HAL_DMA_IRQHandler+0x186>
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d051      	beq.n	800104e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0320 	and.w	r3, r3, #32
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10b      	bne.n	8000fd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 020a 	bic.w	r2, r2, #10
 8000fc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <HAL_DMA_IRQHandler+0x1f0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d029      	beq.n	800102e <HAL_DMA_IRQHandler+0x166>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a37      	ldr	r2, [pc, #220]	; (80010bc <HAL_DMA_IRQHandler+0x1f4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d022      	beq.n	800102a <HAL_DMA_IRQHandler+0x162>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a35      	ldr	r2, [pc, #212]	; (80010c0 <HAL_DMA_IRQHandler+0x1f8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01a      	beq.n	8001024 <HAL_DMA_IRQHandler+0x15c>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <HAL_DMA_IRQHandler+0x1fc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d012      	beq.n	800101e <HAL_DMA_IRQHandler+0x156>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a32      	ldr	r2, [pc, #200]	; (80010c8 <HAL_DMA_IRQHandler+0x200>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d00a      	beq.n	8001018 <HAL_DMA_IRQHandler+0x150>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a31      	ldr	r2, [pc, #196]	; (80010cc <HAL_DMA_IRQHandler+0x204>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d102      	bne.n	8001012 <HAL_DMA_IRQHandler+0x14a>
 800100c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001010:	e00e      	b.n	8001030 <HAL_DMA_IRQHandler+0x168>
 8001012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001016:	e00b      	b.n	8001030 <HAL_DMA_IRQHandler+0x168>
 8001018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101c:	e008      	b.n	8001030 <HAL_DMA_IRQHandler+0x168>
 800101e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001022:	e005      	b.n	8001030 <HAL_DMA_IRQHandler+0x168>
 8001024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001028:	e002      	b.n	8001030 <HAL_DMA_IRQHandler+0x168>
 800102a:	2320      	movs	r3, #32
 800102c:	e000      	b.n	8001030 <HAL_DMA_IRQHandler+0x168>
 800102e:	2302      	movs	r3, #2
 8001030:	4a27      	ldr	r2, [pc, #156]	; (80010d0 <HAL_DMA_IRQHandler+0x208>)
 8001032:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001040:	2b00      	cmp	r3, #0
 8001042:	d034      	beq.n	80010ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800104c:	e02f      	b.n	80010ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	2208      	movs	r2, #8
 8001054:	409a      	lsls	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d028      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x1e8>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f003 0308 	and.w	r3, r3, #8
 8001064:	2b00      	cmp	r3, #0
 8001066:	d023      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 020e 	bic.w	r2, r2, #14
 8001076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	4798      	blx	r3
    }
  }
  return;
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
}
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020008 	.word	0x40020008
 80010bc:	4002001c 	.word	0x4002001c
 80010c0:	40020030 	.word	0x40020030
 80010c4:	40020044 	.word	0x40020044
 80010c8:	40020058 	.word	0x40020058
 80010cc:	4002006c 	.word	0x4002006c
 80010d0:	40020000 	.word	0x40020000

080010d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f202 	lsl.w	r2, r1, r2
 80010f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b10      	cmp	r3, #16
 8001100:	d108      	bne.n	8001114 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001112:	e007      	b.n	8001124 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	60da      	str	r2, [r3, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b08b      	sub	sp, #44	; 0x2c
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001142:	e169      	b.n	8001418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001144:	2201      	movs	r2, #1
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	429a      	cmp	r2, r3
 800115e:	f040 8158 	bne.w	8001412 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a9a      	ldr	r2, [pc, #616]	; (80013d0 <HAL_GPIO_Init+0x2a0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d05e      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 800116c:	4a98      	ldr	r2, [pc, #608]	; (80013d0 <HAL_GPIO_Init+0x2a0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d875      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 8001172:	4a98      	ldr	r2, [pc, #608]	; (80013d4 <HAL_GPIO_Init+0x2a4>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d058      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 8001178:	4a96      	ldr	r2, [pc, #600]	; (80013d4 <HAL_GPIO_Init+0x2a4>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d86f      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 800117e:	4a96      	ldr	r2, [pc, #600]	; (80013d8 <HAL_GPIO_Init+0x2a8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d052      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 8001184:	4a94      	ldr	r2, [pc, #592]	; (80013d8 <HAL_GPIO_Init+0x2a8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d869      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 800118a:	4a94      	ldr	r2, [pc, #592]	; (80013dc <HAL_GPIO_Init+0x2ac>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d04c      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 8001190:	4a92      	ldr	r2, [pc, #584]	; (80013dc <HAL_GPIO_Init+0x2ac>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d863      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 8001196:	4a92      	ldr	r2, [pc, #584]	; (80013e0 <HAL_GPIO_Init+0x2b0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d046      	beq.n	800122a <HAL_GPIO_Init+0xfa>
 800119c:	4a90      	ldr	r2, [pc, #576]	; (80013e0 <HAL_GPIO_Init+0x2b0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d85d      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d82a      	bhi.n	80011fc <HAL_GPIO_Init+0xcc>
 80011a6:	2b12      	cmp	r3, #18
 80011a8:	d859      	bhi.n	800125e <HAL_GPIO_Init+0x12e>
 80011aa:	a201      	add	r2, pc, #4	; (adr r2, 80011b0 <HAL_GPIO_Init+0x80>)
 80011ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b0:	0800122b 	.word	0x0800122b
 80011b4:	08001205 	.word	0x08001205
 80011b8:	08001217 	.word	0x08001217
 80011bc:	08001259 	.word	0x08001259
 80011c0:	0800125f 	.word	0x0800125f
 80011c4:	0800125f 	.word	0x0800125f
 80011c8:	0800125f 	.word	0x0800125f
 80011cc:	0800125f 	.word	0x0800125f
 80011d0:	0800125f 	.word	0x0800125f
 80011d4:	0800125f 	.word	0x0800125f
 80011d8:	0800125f 	.word	0x0800125f
 80011dc:	0800125f 	.word	0x0800125f
 80011e0:	0800125f 	.word	0x0800125f
 80011e4:	0800125f 	.word	0x0800125f
 80011e8:	0800125f 	.word	0x0800125f
 80011ec:	0800125f 	.word	0x0800125f
 80011f0:	0800125f 	.word	0x0800125f
 80011f4:	0800120d 	.word	0x0800120d
 80011f8:	08001221 	.word	0x08001221
 80011fc:	4a79      	ldr	r2, [pc, #484]	; (80013e4 <HAL_GPIO_Init+0x2b4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001202:	e02c      	b.n	800125e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	623b      	str	r3, [r7, #32]
          break;
 800120a:	e029      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	3304      	adds	r3, #4
 8001212:	623b      	str	r3, [r7, #32]
          break;
 8001214:	e024      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	3308      	adds	r3, #8
 800121c:	623b      	str	r3, [r7, #32]
          break;
 800121e:	e01f      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	330c      	adds	r3, #12
 8001226:	623b      	str	r3, [r7, #32]
          break;
 8001228:	e01a      	b.n	8001260 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001232:	2304      	movs	r3, #4
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e013      	b.n	8001260 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d105      	bne.n	800124c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001240:	2308      	movs	r3, #8
 8001242:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	611a      	str	r2, [r3, #16]
          break;
 800124a:	e009      	b.n	8001260 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800124c:	2308      	movs	r3, #8
 800124e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	615a      	str	r2, [r3, #20]
          break;
 8001256:	e003      	b.n	8001260 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
          break;
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x130>
          break;
 800125e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2bff      	cmp	r3, #255	; 0xff
 8001264:	d801      	bhi.n	800126a <HAL_GPIO_Init+0x13a>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	e001      	b.n	800126e <HAL_GPIO_Init+0x13e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3304      	adds	r3, #4
 800126e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2bff      	cmp	r3, #255	; 0xff
 8001274:	d802      	bhi.n	800127c <HAL_GPIO_Init+0x14c>
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x152>
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	3b08      	subs	r3, #8
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	210f      	movs	r1, #15
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	401a      	ands	r2, r3
 8001294:	6a39      	ldr	r1, [r7, #32]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	431a      	orrs	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80b1 	beq.w	8001412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b0:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <HAL_GPIO_Init+0x2b8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c8:	4a48      	ldr	r2, [pc, #288]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <HAL_GPIO_Init+0x2c0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d013      	beq.n	800131c <HAL_GPIO_Init+0x1ec>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <HAL_GPIO_Init+0x2c4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d00d      	beq.n	8001318 <HAL_GPIO_Init+0x1e8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a3e      	ldr	r2, [pc, #248]	; (80013f8 <HAL_GPIO_Init+0x2c8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d007      	beq.n	8001314 <HAL_GPIO_Init+0x1e4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3d      	ldr	r2, [pc, #244]	; (80013fc <HAL_GPIO_Init+0x2cc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d101      	bne.n	8001310 <HAL_GPIO_Init+0x1e0>
 800130c:	2303      	movs	r3, #3
 800130e:	e006      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001310:	2304      	movs	r3, #4
 8001312:	e004      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001314:	2302      	movs	r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_GPIO_Init+0x1ee>
 800131c:	2300      	movs	r3, #0
 800131e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800132e:	492f      	ldr	r1, [pc, #188]	; (80013ec <HAL_GPIO_Init+0x2bc>)
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001348:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	492c      	ldr	r1, [pc, #176]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
 8001354:	e006      	b.n	8001364 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	43db      	mvns	r3, r3
 800135e:	4928      	ldr	r1, [pc, #160]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001360:	4013      	ands	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	4922      	ldr	r1, [pc, #136]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	60cb      	str	r3, [r1, #12]
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	43db      	mvns	r3, r3
 8001386:	491e      	ldr	r1, [pc, #120]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 8001388:	4013      	ands	r3, r2
 800138a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4918      	ldr	r1, [pc, #96]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4914      	ldr	r1, [pc, #80]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d021      	beq.n	8001404 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	490e      	ldr	r1, [pc, #56]	; (8001400 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e021      	b.n	8001412 <HAL_GPIO_Init+0x2e2>
 80013ce:	bf00      	nop
 80013d0:	10320000 	.word	0x10320000
 80013d4:	10310000 	.word	0x10310000
 80013d8:	10220000 	.word	0x10220000
 80013dc:	10210000 	.word	0x10210000
 80013e0:	10120000 	.word	0x10120000
 80013e4:	10110000 	.word	0x10110000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	40011000 	.word	0x40011000
 80013fc:	40011400 	.word	0x40011400
 8001400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_GPIO_Init+0x304>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	43db      	mvns	r3, r3
 800140c:	4909      	ldr	r1, [pc, #36]	; (8001434 <HAL_GPIO_Init+0x304>)
 800140e:	4013      	ands	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	3301      	adds	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	f47f ae8e 	bne.w	8001144 <HAL_GPIO_Init+0x14>
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	372c      	adds	r7, #44	; 0x2c
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40010400 	.word	0x40010400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	611a      	str	r2, [r3, #16]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e272      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8087 	beq.w	8001596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001488:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	d00c      	beq.n	80014ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001494:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d112      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
 80014a0:	4b8c      	ldr	r3, [pc, #560]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ac:	d10b      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ae:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d06c      	beq.n	8001594 <HAL_RCC_OscConfig+0x12c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d168      	bne.n	8001594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e24c      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x76>
 80014d0:	4b80      	ldr	r3, [pc, #512]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a7f      	ldr	r2, [pc, #508]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e02e      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x98>
 80014e6:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7a      	ldr	r2, [pc, #488]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b78      	ldr	r3, [pc, #480]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a77      	ldr	r2, [pc, #476]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0xbc>
 800150a:	4b72      	ldr	r3, [pc, #456]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a71      	ldr	r2, [pc, #452]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6e      	ldr	r2, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001524:	4b6b      	ldr	r3, [pc, #428]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6a      	ldr	r2, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a67      	ldr	r2, [pc, #412]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff faee 	bl	8000b24 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff faea 	bl	8000b24 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e200      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0xe4>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fada 	bl	8000b24 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fad6 	bl	8000b24 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e1ec      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x10c>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d063      	beq.n	800166a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a2:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d11c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
 80015ba:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e1c0      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4939      	ldr	r1, [pc, #228]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	e03a      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x270>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fa8f 	bl	8000b24 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fa8b 	bl	8000b24 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e1a1      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4927      	ldr	r1, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fa6e 	bl	8000b24 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fa6a 	bl	8000b24 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e180      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d03a      	beq.n	80016ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d019      	beq.n	80016b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_RCC_OscConfig+0x274>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff fa4e 	bl	8000b24 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fa4a 	bl	8000b24 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e160      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 face 	bl	8001c4c <RCC_Delay>
 80016b0:	e01c      	b.n	80016ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_RCC_OscConfig+0x274>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fa34 	bl	8000b24 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	e00f      	b.n	80016e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fa30 	bl	8000b24 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d908      	bls.n	80016e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e146      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	42420000 	.word	0x42420000
 80016dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b92      	ldr	r3, [pc, #584]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1e9      	bne.n	80016c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a6 	beq.w	8001846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b8b      	ldr	r3, [pc, #556]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10d      	bne.n	8001726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b88      	ldr	r3, [pc, #544]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a87      	ldr	r2, [pc, #540]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b85      	ldr	r3, [pc, #532]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b82      	ldr	r3, [pc, #520]	; (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b7f      	ldr	r3, [pc, #508]	; (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7e      	ldr	r2, [pc, #504]	; (8001930 <HAL_RCC_OscConfig+0x4c8>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7ff f9f1 	bl	8000b24 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7ff f9ed 	bl	8000b24 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e103      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b75      	ldr	r3, [pc, #468]	; (8001930 <HAL_RCC_OscConfig+0x4c8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x312>
 800176c:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	e02d      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x334>
 8001782:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a69      	ldr	r2, [pc, #420]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4b67      	ldr	r3, [pc, #412]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a66      	ldr	r2, [pc, #408]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	e01c      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0x356>
 80017a4:	4b61      	ldr	r3, [pc, #388]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a60      	ldr	r2, [pc, #384]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	4b5e      	ldr	r3, [pc, #376]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a5d      	ldr	r2, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 80017be:	4b5b      	ldr	r3, [pc, #364]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a5a      	ldr	r2, [pc, #360]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b58      	ldr	r3, [pc, #352]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a57      	ldr	r2, [pc, #348]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d015      	beq.n	800180a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff f9a1 	bl	8000b24 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff f99d 	bl	8000b24 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0b1      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ee      	beq.n	80017e6 <HAL_RCC_OscConfig+0x37e>
 8001808:	e014      	b.n	8001834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff f98b 	bl	8000b24 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff f987 	bl	8000b24 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e09b      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	4b40      	ldr	r3, [pc, #256]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ee      	bne.n	8001812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183a:	4b3c      	ldr	r3, [pc, #240]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a3b      	ldr	r2, [pc, #236]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8087 	beq.w	800195e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001850:	4b36      	ldr	r3, [pc, #216]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d061      	beq.n	8001920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d146      	bne.n	80018f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_RCC_OscConfig+0x4cc>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f95b 	bl	8000b24 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f957 	bl	8000b24 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e06d      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	4b29      	ldr	r3, [pc, #164]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d108      	bne.n	80018ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	4921      	ldr	r1, [pc, #132]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a19      	ldr	r1, [r3, #32]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	430b      	orrs	r3, r1
 80018be:	491b      	ldr	r1, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff f92b 	bl	8000b24 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f927 	bl	8000b24 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e03d      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46a>
 80018f0:	e035      	b.n	800195e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_RCC_OscConfig+0x4cc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f914 	bl	8000b24 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff f910 	bl	8000b24 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e026      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_RCC_OscConfig+0x4c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x498>
 800191e:	e01e      	b.n	800195e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e019      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
 800192c:	40021000 	.word	0x40021000
 8001930:	40007000 	.word	0x40007000
 8001934:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_OscConfig+0x500>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	429a      	cmp	r2, r3
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0d0      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001980:	4b6a      	ldr	r3, [pc, #424]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d910      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198e:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0207 	bic.w	r2, r3, #7
 8001996:	4965      	ldr	r1, [pc, #404]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b8      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c8:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	494d      	ldr	r1, [pc, #308]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d040      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e073      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e06b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f023 0203 	bic.w	r2, r3, #3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4936      	ldr	r1, [pc, #216]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a5c:	f7ff f862 	bl	8000b24 <HAL_GetTick>
 8001a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a64:	f7ff f85e 	bl	8000b24 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e053      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 020c 	and.w	r2, r3, #12
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1eb      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d210      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 0207 	bic.w	r2, r3, #7
 8001aa2:	4922      	ldr	r1, [pc, #136]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e032      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	490e      	ldr	r1, [pc, #56]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afa:	f000 f821 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001afe:	4602      	mov	r2, r0
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	490a      	ldr	r1, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x1c8>)
 8001b0c:	5ccb      	ldrb	r3, [r1, r3]
 8001b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1cc>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1d0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe ffc0 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40022000 	.word	0x40022000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08003bb4 	.word	0x08003bb4
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d002      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x30>
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d003      	beq.n	8001b76 <HAL_RCC_GetSysClockFreq+0x36>
 8001b6e:	e027      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b72:	613b      	str	r3, [r7, #16]
      break;
 8001b74:	e027      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0c9b      	lsrs	r3, r3, #18
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0c5b      	lsrs	r3, r3, #17
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ba2:	fb03 f202 	mul.w	r2, r3, r2
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e004      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	613b      	str	r3, [r7, #16]
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bc2:	613b      	str	r3, [r7, #16]
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	693b      	ldr	r3, [r7, #16]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	007a1200 	.word	0x007a1200
 8001bdc:	08003bcc 	.word	0x08003bcc
 8001be0:	08003bdc 	.word	0x08003bdc
 8001be4:	003d0900 	.word	0x003d0900

08001be8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bec:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c00:	f7ff fff2 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08003bc4 	.word	0x08003bc4

08001c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0adb      	lsrs	r3, r3, #11
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	; (8001c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08003bc4 	.word	0x08003bc4

08001c4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <RCC_Delay+0x34>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <RCC_Delay+0x38>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0a5b      	lsrs	r3, r3, #9
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c68:	bf00      	nop
  }
  while (Delay --);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1e5a      	subs	r2, r3, #1
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f9      	bne.n	8001c68 <RCC_Delay+0x1c>
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	20000000 	.word	0x20000000
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e041      	b.n	8001d1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fd7e 	bl	80007b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f000 fbf8 	bl	80024bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_TIM_PWM_Start+0x24>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	bf14      	ite	ne
 8001d44:	2301      	movne	r3, #1
 8001d46:	2300      	moveq	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	e022      	b.n	8001d92 <HAL_TIM_PWM_Start+0x6a>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d109      	bne.n	8001d66 <HAL_TIM_PWM_Start+0x3e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	e015      	b.n	8001d92 <HAL_TIM_PWM_Start+0x6a>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d109      	bne.n	8001d80 <HAL_TIM_PWM_Start+0x58>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e008      	b.n	8001d92 <HAL_TIM_PWM_Start+0x6a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	bf14      	ite	ne
 8001d8c:	2301      	movne	r3, #1
 8001d8e:	2300      	moveq	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e05e      	b.n	8001e58 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d104      	bne.n	8001daa <HAL_TIM_PWM_Start+0x82>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da8:	e013      	b.n	8001dd2 <HAL_TIM_PWM_Start+0xaa>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d104      	bne.n	8001dba <HAL_TIM_PWM_Start+0x92>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001db8:	e00b      	b.n	8001dd2 <HAL_TIM_PWM_Start+0xaa>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d104      	bne.n	8001dca <HAL_TIM_PWM_Start+0xa2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc8:	e003      	b.n	8001dd2 <HAL_TIM_PWM_Start+0xaa>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fd58 	bl	8002890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_TIM_PWM_Start+0x138>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d107      	bne.n	8001dfa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_TIM_PWM_Start+0x138>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00e      	beq.n	8001e22 <HAL_TIM_PWM_Start+0xfa>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0c:	d009      	beq.n	8001e22 <HAL_TIM_PWM_Start+0xfa>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <HAL_TIM_PWM_Start+0x13c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_TIM_PWM_Start+0xfa>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_TIM_PWM_Start+0x140>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d111      	bne.n	8001e46 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2b06      	cmp	r3, #6
 8001e32:	d010      	beq.n	8001e56 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e44:	e007      	b.n	8001e56 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800

08001e6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e093      	b.n	8001fa8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7fe fc47 	bl	8000728 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb0:	f023 0307 	bic.w	r3, r3, #7
 8001eb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f000 fafb 	bl	80024bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	021b      	lsls	r3, r3, #8
 8001efe:	4313      	orrs	r3, r2
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f0c:	f023 030c 	bic.w	r3, r3, #12
 8001f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001f18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	011a      	lsls	r2, r3, #4
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	031b      	lsls	r3, r3, #12
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001f4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4313      	orrs	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001fd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001fd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d110      	bne.n	8002002 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d102      	bne.n	8001fec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fe6:	7b7b      	ldrb	r3, [r7, #13]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d001      	beq.n	8001ff0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e069      	b.n	80020c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002000:	e031      	b.n	8002066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b04      	cmp	r3, #4
 8002006:	d110      	bne.n	800202a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d102      	bne.n	8002014 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800200e:	7b3b      	ldrb	r3, [r7, #12]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d001      	beq.n	8002018 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e055      	b.n	80020c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002028:	e01d      	b.n	8002066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d108      	bne.n	8002042 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d105      	bne.n	8002042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002036:	7b7b      	ldrb	r3, [r7, #13]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d102      	bne.n	8002042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800203c:	7b3b      	ldrb	r3, [r7, #12]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d001      	beq.n	8002046 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e03e      	b.n	80020c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2202      	movs	r2, #2
 8002062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_TIM_Encoder_Start+0xc4>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b04      	cmp	r3, #4
 8002070:	d008      	beq.n	8002084 <HAL_TIM_Encoder_Start+0xd4>
 8002072:	e00f      	b.n	8002094 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2201      	movs	r2, #1
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fc07 	bl	8002890 <TIM_CCxChannelCmd>
      break;
 8002082:	e016      	b.n	80020b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	2104      	movs	r1, #4
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fbff 	bl	8002890 <TIM_CCxChannelCmd>
      break;
 8002092:	e00e      	b.n	80020b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2201      	movs	r2, #1
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f000 fbf7 	bl	8002890 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	2104      	movs	r1, #4
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fbf0 	bl	8002890 <TIM_CCxChannelCmd>
      break;
 80020b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d122      	bne.n	8002128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d11b      	bne.n	8002128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0202 	mvn.w	r2, #2
 80020f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f9b8 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f9ab 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f9ba 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b04      	cmp	r3, #4
 8002134:	d122      	bne.n	800217c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b04      	cmp	r3, #4
 8002142:	d11b      	bne.n	800217c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0204 	mvn.w	r2, #4
 800214c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f98e 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002168:	e005      	b.n	8002176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f981 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f990 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	2b08      	cmp	r3, #8
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b08      	cmp	r3, #8
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0208 	mvn.w	r2, #8
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2204      	movs	r2, #4
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f964 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f957 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f966 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b10      	cmp	r3, #16
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0210 	mvn.w	r2, #16
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2208      	movs	r2, #8
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f93a 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f92d 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f93c 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0201 	mvn.w	r2, #1
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f908 	bl	8002460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225a:	2b80      	cmp	r3, #128	; 0x80
 800225c:	d10e      	bne.n	800227c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d107      	bne.n	800227c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fb95 	bl	80029a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d10e      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d107      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f900 	bl	80024a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	d10e      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d107      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0220 	mvn.w	r2, #32
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fb60 	bl	8002994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e0ae      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	f200 809f 	bhi.w	8002448 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002345 	.word	0x08002345
 8002314:	08002449 	.word	0x08002449
 8002318:	08002449 	.word	0x08002449
 800231c:	08002449 	.word	0x08002449
 8002320:	08002385 	.word	0x08002385
 8002324:	08002449 	.word	0x08002449
 8002328:	08002449 	.word	0x08002449
 800232c:	08002449 	.word	0x08002449
 8002330:	080023c7 	.word	0x080023c7
 8002334:	08002449 	.word	0x08002449
 8002338:	08002449 	.word	0x08002449
 800233c:	08002449 	.word	0x08002449
 8002340:	08002407 	.word	0x08002407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f918 	bl	8002580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0208 	orr.w	r2, r2, #8
 800235e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0204 	bic.w	r2, r2, #4
 800236e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6999      	ldr	r1, [r3, #24]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	619a      	str	r2, [r3, #24]
      break;
 8002382:	e064      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f95e 	bl	800264c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6999      	ldr	r1, [r3, #24]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	021a      	lsls	r2, r3, #8
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	619a      	str	r2, [r3, #24]
      break;
 80023c4:	e043      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f9a7 	bl	8002720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0208 	orr.w	r2, r2, #8
 80023e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0204 	bic.w	r2, r2, #4
 80023f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69d9      	ldr	r1, [r3, #28]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	61da      	str	r2, [r3, #28]
      break;
 8002404:	e023      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f9f1 	bl	80027f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69d9      	ldr	r1, [r3, #28]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	021a      	lsls	r2, r3, #8
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	61da      	str	r2, [r3, #28]
      break;
 8002446:	e002      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
      break;
 800244c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002456:	7dfb      	ldrb	r3, [r7, #23]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
	...

080024bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a29      	ldr	r2, [pc, #164]	; (8002574 <TIM_Base_SetConfig+0xb8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00b      	beq.n	80024ec <TIM_Base_SetConfig+0x30>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024da:	d007      	beq.n	80024ec <TIM_Base_SetConfig+0x30>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a26      	ldr	r2, [pc, #152]	; (8002578 <TIM_Base_SetConfig+0xbc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <TIM_Base_SetConfig+0x30>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a25      	ldr	r2, [pc, #148]	; (800257c <TIM_Base_SetConfig+0xc0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d108      	bne.n	80024fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1c      	ldr	r2, [pc, #112]	; (8002574 <TIM_Base_SetConfig+0xb8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00b      	beq.n	800251e <TIM_Base_SetConfig+0x62>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0x62>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <TIM_Base_SetConfig+0xbc>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0x62>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a18      	ldr	r2, [pc, #96]	; (800257c <TIM_Base_SetConfig+0xc0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d108      	bne.n	8002530 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <TIM_Base_SetConfig+0xb8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d103      	bne.n	8002564 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	615a      	str	r2, [r3, #20]
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40000400 	.word	0x40000400
 800257c:	40000800 	.word	0x40000800

08002580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f023 0201 	bic.w	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0303 	bic.w	r3, r3, #3
 80025b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 0302 	bic.w	r3, r3, #2
 80025c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a1c      	ldr	r2, [pc, #112]	; (8002648 <TIM_OC1_SetConfig+0xc8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d10c      	bne.n	80025f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f023 0308 	bic.w	r3, r3, #8
 80025e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <TIM_OC1_SetConfig+0xc8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d111      	bne.n	8002622 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800260c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	621a      	str	r2, [r3, #32]
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40012c00 	.word	0x40012c00

0800264c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f023 0210 	bic.w	r2, r3, #16
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800267a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f023 0320 	bic.w	r3, r3, #32
 8002696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <TIM_OC2_SetConfig+0xd0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d10d      	bne.n	80026c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a14      	ldr	r2, [pc, #80]	; (800271c <TIM_OC2_SetConfig+0xd0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d113      	bne.n	80026f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	621a      	str	r2, [r3, #32]
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	40012c00 	.word	0x40012c00

08002720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0303 	bic.w	r3, r3, #3
 8002756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <TIM_OC3_SetConfig+0xd0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10d      	bne.n	800279a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <TIM_OC3_SetConfig+0xd0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d113      	bne.n	80027ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	621a      	str	r2, [r3, #32]
}
 80027e4:	bf00      	nop
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40012c00 	.word	0x40012c00

080027f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800282a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800283e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	031b      	lsls	r3, r3, #12
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a0f      	ldr	r2, [pc, #60]	; (800288c <TIM_OC4_SetConfig+0x98>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d109      	bne.n	8002868 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800285a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	621a      	str	r2, [r3, #32]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40012c00 	.word	0x40012c00

08002890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2201      	movs	r2, #1
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1a      	ldr	r2, [r3, #32]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e046      	b.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a16      	ldr	r2, [pc, #88]	; (8002988 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00e      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d009      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10c      	bne.n	800296c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	40012c00 	.word	0x40012c00
 800298c:	40000400 	.word	0x40000400
 8002990:	40000800 	.word	0x40000800

08002994 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e042      	b.n	8002a50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fd ff36 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2224      	movs	r2, #36	; 0x24
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fb89 	bl	8003114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	4613      	mov	r3, r2
 8002a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d16d      	bne.n	8002b54 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_UART_Transmit+0x2c>
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e066      	b.n	8002b56 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2221      	movs	r2, #33	; 0x21
 8002a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a96:	f7fe f845 	bl	8000b24 <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	88fa      	ldrh	r2, [r7, #6]
 8002aa0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab0:	d108      	bne.n	8002ac4 <HAL_UART_Transmit+0x6c>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d104      	bne.n	8002ac4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	e003      	b.n	8002acc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002acc:	e02a      	b.n	8002b24 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f989 	bl	8002df0 <UART_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e036      	b.n	8002b56 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3302      	adds	r3, #2
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	e007      	b.n	8002b16 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	781a      	ldrb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	3301      	adds	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1cf      	bne.n	8002ace <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2140      	movs	r1, #64	; 0x40
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f959 	bl	8002df0 <UART_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e006      	b.n	8002b56 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	e000      	b.n	8002b56 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b54:	2302      	movs	r3, #2
  }
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	d112      	bne.n	8002b9e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_UART_Receive_DMA+0x26>
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e00b      	b.n	8002ba0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	461a      	mov	r2, r3
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f999 	bl	8002ecc <UART_Start_Receive_DMA>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	e000      	b.n	8002ba0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
  }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b09c      	sub	sp, #112	; 0x70
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d172      	bne.n	8002cf6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c12:	2200      	movs	r2, #0
 8002c14:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c20:	e853 3f00 	ldrex	r3, [r3]
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c36:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c38:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e5      	bne.n	8002c16 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	f023 0301 	bic.w	r3, r3, #1
 8002c60:	667b      	str	r3, [r7, #100]	; 0x64
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3314      	adds	r3, #20
 8002c68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c6a:	647a      	str	r2, [r7, #68]	; 0x44
 8002c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e5      	bne.n	8002c4a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c94:	663b      	str	r3, [r7, #96]	; 0x60
 8002c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3314      	adds	r3, #20
 8002c9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c9e:	633a      	str	r2, [r7, #48]	; 0x30
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1e5      	bne.n	8002c7e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d119      	bne.n	8002cf6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f023 0310 	bic.w	r3, r3, #16
 8002cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	330c      	adds	r3, #12
 8002ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ce2:	61fa      	str	r2, [r7, #28]
 8002ce4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce6:	69b9      	ldr	r1, [r7, #24]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	e841 2300 	strex	r3, r2, [r1]
 8002cee:	617b      	str	r3, [r7, #20]
   return(result);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1e5      	bne.n	8002cc2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d106      	bne.n	8002d12 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d0c:	f7ff ff67 	bl	8002bde <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d10:	e002      	b.n	8002d18 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002d12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d14:	f7ff ff48 	bl	8002ba8 <HAL_UART_RxCpltCallback>
}
 8002d18:	bf00      	nop
 8002d1a:	3770      	adds	r7, #112	; 0x70
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d108      	bne.n	8002d4e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f7ff ff49 	bl	8002bde <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d4c:	e002      	b.n	8002d54 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff ff33 	bl	8002bba <HAL_UART_RxHalfCpltCallback>
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf14      	ite	ne
 8002d7c:	2301      	movne	r3, #1
 8002d7e:	2300      	moveq	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b21      	cmp	r3, #33	; 0x21
 8002d8e:	d108      	bne.n	8002da2 <UART_DMAError+0x46>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d9c:	68b8      	ldr	r0, [r7, #8]
 8002d9e:	f000 f92f 	bl	8003000 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b22      	cmp	r3, #34	; 0x22
 8002dc2:	d108      	bne.n	8002dd6 <UART_DMAError+0x7a>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002dd0:	68b8      	ldr	r0, [r7, #8]
 8002dd2:	f000 f93c 	bl	800304e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f043 0210 	orr.w	r2, r3, #16
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002de2:	68b8      	ldr	r0, [r7, #8]
 8002de4:	f7ff fef2 	bl	8002bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b090      	sub	sp, #64	; 0x40
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e00:	e050      	b.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e08:	d04c      	beq.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e10:	f7fd fe88 	bl	8000b24 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d241      	bcs.n	8002ea4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	330c      	adds	r3, #12
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	e853 3f00 	ldrex	r3, [r3]
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e40:	637a      	str	r2, [r7, #52]	; 0x34
 8002e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e48:	e841 2300 	strex	r3, r2, [r1]
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e5      	bne.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3314      	adds	r3, #20
 8002e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	613b      	str	r3, [r7, #16]
   return(result);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e74:	623a      	str	r2, [r7, #32]
 8002e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	69f9      	ldr	r1, [r7, #28]
 8002e7a:	6a3a      	ldr	r2, [r7, #32]
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e5      	bne.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e00f      	b.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d09f      	beq.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3740      	adds	r7, #64	; 0x40
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b098      	sub	sp, #96	; 0x60
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2222      	movs	r2, #34	; 0x22
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef8:	4a3e      	ldr	r2, [pc, #248]	; (8002ff4 <UART_Start_Receive_DMA+0x128>)
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	4a3d      	ldr	r2, [pc, #244]	; (8002ff8 <UART_Start_Receive_DMA+0x12c>)
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <UART_Start_Receive_DMA+0x130>)
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	2200      	movs	r2, #0
 8002f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3304      	adds	r3, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	f7fd ff6c 	bl	8000e08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d019      	beq.n	8002f82 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f64:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002f74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e5      	bne.n	8002f4e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3314      	adds	r3, #20
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	e853 3f00 	ldrex	r3, [r3]
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fa2:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002fa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002faa:	e841 2300 	strex	r3, r2, [r1]
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e5      	bne.n	8002f82 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3314      	adds	r3, #20
 8002fbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	e853 3f00 	ldrex	r3, [r3]
 8002fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fcc:	653b      	str	r3, [r7, #80]	; 0x50
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3314      	adds	r3, #20
 8002fd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8002fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	6a39      	ldr	r1, [r7, #32]
 8002fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fde:	e841 2300 	strex	r3, r2, [r1]
 8002fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e5      	bne.n	8002fb6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3760      	adds	r7, #96	; 0x60
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	08002bf5 	.word	0x08002bf5
 8002ff8:	08002d21 	.word	0x08002d21
 8002ffc:	08002d5d 	.word	0x08002d5d

08003000 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	60bb      	str	r3, [r7, #8]
   return(result);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	61ba      	str	r2, [r7, #24]
 800302a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6979      	ldr	r1, [r7, #20]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	613b      	str	r3, [r7, #16]
   return(result);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e5      	bne.n	8003008 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003044:	bf00      	nop
 8003046:	3724      	adds	r7, #36	; 0x24
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800304e:	b480      	push	{r7}
 8003050:	b095      	sub	sp, #84	; 0x54
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800306c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003076:	643a      	str	r2, [r7, #64]	; 0x40
 8003078:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800307c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e5      	bne.n	8003056 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	61fb      	str	r3, [r7, #28]
   return(result);
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3314      	adds	r3, #20
 80030a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e5      	bne.n	800308a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d119      	bne.n	80030fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f023 0310 	bic.w	r3, r3, #16
 80030dc:	647b      	str	r3, [r7, #68]	; 0x44
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030e6:	61ba      	str	r2, [r7, #24]
 80030e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6979      	ldr	r1, [r7, #20]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	613b      	str	r3, [r7, #16]
   return(result);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e5      	bne.n	80030c6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003108:	bf00      	nop
 800310a:	3754      	adds	r7, #84	; 0x54
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
	...

08003114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800314e:	f023 030c 	bic.w	r3, r3, #12
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	430b      	orrs	r3, r1
 800315a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a2c      	ldr	r2, [pc, #176]	; (8003228 <UART_SetConfig+0x114>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d103      	bne.n	8003184 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800317c:	f7fe fd52 	bl	8001c24 <HAL_RCC_GetPCLK2Freq>
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	e002      	b.n	800318a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003184:	f7fe fd3a 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8003188:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a0:	4a22      	ldr	r2, [pc, #136]	; (800322c <UART_SetConfig+0x118>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	0119      	lsls	r1, r3, #4
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009a      	lsls	r2, r3, #2
 80031b4:	441a      	add	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <UART_SetConfig+0x118>)
 80031c2:	fba3 0302 	umull	r0, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2064      	movs	r0, #100	; 0x64
 80031ca:	fb00 f303 	mul.w	r3, r0, r3
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	3332      	adds	r3, #50	; 0x32
 80031d4:	4a15      	ldr	r2, [pc, #84]	; (800322c <UART_SetConfig+0x118>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	4419      	add	r1, r3
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009a      	lsls	r2, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <UART_SetConfig+0x118>)
 80031fa:	fba3 0302 	umull	r0, r3, r3, r2
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	2064      	movs	r0, #100	; 0x64
 8003202:	fb00 f303 	mul.w	r3, r0, r3
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	3332      	adds	r3, #50	; 0x32
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <UART_SetConfig+0x118>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	f003 020f 	and.w	r2, r3, #15
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	440a      	add	r2, r1
 800321e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40013800 	.word	0x40013800
 800322c:	51eb851f 	.word	0x51eb851f

08003230 <siprintf>:
 8003230:	b40e      	push	{r1, r2, r3}
 8003232:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003236:	b500      	push	{lr}
 8003238:	b09c      	sub	sp, #112	; 0x70
 800323a:	ab1d      	add	r3, sp, #116	; 0x74
 800323c:	9002      	str	r0, [sp, #8]
 800323e:	9006      	str	r0, [sp, #24]
 8003240:	9107      	str	r1, [sp, #28]
 8003242:	9104      	str	r1, [sp, #16]
 8003244:	4808      	ldr	r0, [pc, #32]	; (8003268 <siprintf+0x38>)
 8003246:	4909      	ldr	r1, [pc, #36]	; (800326c <siprintf+0x3c>)
 8003248:	f853 2b04 	ldr.w	r2, [r3], #4
 800324c:	9105      	str	r1, [sp, #20]
 800324e:	6800      	ldr	r0, [r0, #0]
 8003250:	a902      	add	r1, sp, #8
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	f000 f98e 	bl	8003574 <_svfiprintf_r>
 8003258:	2200      	movs	r2, #0
 800325a:	9b02      	ldr	r3, [sp, #8]
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	b01c      	add	sp, #112	; 0x70
 8003260:	f85d eb04 	ldr.w	lr, [sp], #4
 8003264:	b003      	add	sp, #12
 8003266:	4770      	bx	lr
 8003268:	20000058 	.word	0x20000058
 800326c:	ffff0208 	.word	0xffff0208

08003270 <memset>:
 8003270:	4603      	mov	r3, r0
 8003272:	4402      	add	r2, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	f803 1b01 	strb.w	r1, [r3], #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <__errno>:
 8003280:	4b01      	ldr	r3, [pc, #4]	; (8003288 <__errno+0x8>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000058 	.word	0x20000058

0800328c <__libc_init_array>:
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	2600      	movs	r6, #0
 8003290:	4d0c      	ldr	r5, [pc, #48]	; (80032c4 <__libc_init_array+0x38>)
 8003292:	4c0d      	ldr	r4, [pc, #52]	; (80032c8 <__libc_init_array+0x3c>)
 8003294:	1b64      	subs	r4, r4, r5
 8003296:	10a4      	asrs	r4, r4, #2
 8003298:	42a6      	cmp	r6, r4
 800329a:	d109      	bne.n	80032b0 <__libc_init_array+0x24>
 800329c:	f000 fc7a 	bl	8003b94 <_init>
 80032a0:	2600      	movs	r6, #0
 80032a2:	4d0a      	ldr	r5, [pc, #40]	; (80032cc <__libc_init_array+0x40>)
 80032a4:	4c0a      	ldr	r4, [pc, #40]	; (80032d0 <__libc_init_array+0x44>)
 80032a6:	1b64      	subs	r4, r4, r5
 80032a8:	10a4      	asrs	r4, r4, #2
 80032aa:	42a6      	cmp	r6, r4
 80032ac:	d105      	bne.n	80032ba <__libc_init_array+0x2e>
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
 80032b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b4:	4798      	blx	r3
 80032b6:	3601      	adds	r6, #1
 80032b8:	e7ee      	b.n	8003298 <__libc_init_array+0xc>
 80032ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80032be:	4798      	blx	r3
 80032c0:	3601      	adds	r6, #1
 80032c2:	e7f2      	b.n	80032aa <__libc_init_array+0x1e>
 80032c4:	08003c14 	.word	0x08003c14
 80032c8:	08003c14 	.word	0x08003c14
 80032cc:	08003c14 	.word	0x08003c14
 80032d0:	08003c18 	.word	0x08003c18

080032d4 <__retarget_lock_acquire_recursive>:
 80032d4:	4770      	bx	lr

080032d6 <__retarget_lock_release_recursive>:
 80032d6:	4770      	bx	lr

080032d8 <_free_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4605      	mov	r5, r0
 80032dc:	2900      	cmp	r1, #0
 80032de:	d040      	beq.n	8003362 <_free_r+0x8a>
 80032e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032e4:	1f0c      	subs	r4, r1, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bfb8      	it	lt
 80032ea:	18e4      	addlt	r4, r4, r3
 80032ec:	f000 f8dc 	bl	80034a8 <__malloc_lock>
 80032f0:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <_free_r+0x8c>)
 80032f2:	6813      	ldr	r3, [r2, #0]
 80032f4:	b933      	cbnz	r3, 8003304 <_free_r+0x2c>
 80032f6:	6063      	str	r3, [r4, #4]
 80032f8:	6014      	str	r4, [r2, #0]
 80032fa:	4628      	mov	r0, r5
 80032fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003300:	f000 b8d8 	b.w	80034b4 <__malloc_unlock>
 8003304:	42a3      	cmp	r3, r4
 8003306:	d908      	bls.n	800331a <_free_r+0x42>
 8003308:	6820      	ldr	r0, [r4, #0]
 800330a:	1821      	adds	r1, r4, r0
 800330c:	428b      	cmp	r3, r1
 800330e:	bf01      	itttt	eq
 8003310:	6819      	ldreq	r1, [r3, #0]
 8003312:	685b      	ldreq	r3, [r3, #4]
 8003314:	1809      	addeq	r1, r1, r0
 8003316:	6021      	streq	r1, [r4, #0]
 8003318:	e7ed      	b.n	80032f6 <_free_r+0x1e>
 800331a:	461a      	mov	r2, r3
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	b10b      	cbz	r3, 8003324 <_free_r+0x4c>
 8003320:	42a3      	cmp	r3, r4
 8003322:	d9fa      	bls.n	800331a <_free_r+0x42>
 8003324:	6811      	ldr	r1, [r2, #0]
 8003326:	1850      	adds	r0, r2, r1
 8003328:	42a0      	cmp	r0, r4
 800332a:	d10b      	bne.n	8003344 <_free_r+0x6c>
 800332c:	6820      	ldr	r0, [r4, #0]
 800332e:	4401      	add	r1, r0
 8003330:	1850      	adds	r0, r2, r1
 8003332:	4283      	cmp	r3, r0
 8003334:	6011      	str	r1, [r2, #0]
 8003336:	d1e0      	bne.n	80032fa <_free_r+0x22>
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4408      	add	r0, r1
 800333e:	6010      	str	r0, [r2, #0]
 8003340:	6053      	str	r3, [r2, #4]
 8003342:	e7da      	b.n	80032fa <_free_r+0x22>
 8003344:	d902      	bls.n	800334c <_free_r+0x74>
 8003346:	230c      	movs	r3, #12
 8003348:	602b      	str	r3, [r5, #0]
 800334a:	e7d6      	b.n	80032fa <_free_r+0x22>
 800334c:	6820      	ldr	r0, [r4, #0]
 800334e:	1821      	adds	r1, r4, r0
 8003350:	428b      	cmp	r3, r1
 8003352:	bf01      	itttt	eq
 8003354:	6819      	ldreq	r1, [r3, #0]
 8003356:	685b      	ldreq	r3, [r3, #4]
 8003358:	1809      	addeq	r1, r1, r0
 800335a:	6021      	streq	r1, [r4, #0]
 800335c:	6063      	str	r3, [r4, #4]
 800335e:	6054      	str	r4, [r2, #4]
 8003360:	e7cb      	b.n	80032fa <_free_r+0x22>
 8003362:	bd38      	pop	{r3, r4, r5, pc}
 8003364:	20000300 	.word	0x20000300

08003368 <sbrk_aligned>:
 8003368:	b570      	push	{r4, r5, r6, lr}
 800336a:	4e0e      	ldr	r6, [pc, #56]	; (80033a4 <sbrk_aligned+0x3c>)
 800336c:	460c      	mov	r4, r1
 800336e:	6831      	ldr	r1, [r6, #0]
 8003370:	4605      	mov	r5, r0
 8003372:	b911      	cbnz	r1, 800337a <sbrk_aligned+0x12>
 8003374:	f000 fbaa 	bl	8003acc <_sbrk_r>
 8003378:	6030      	str	r0, [r6, #0]
 800337a:	4621      	mov	r1, r4
 800337c:	4628      	mov	r0, r5
 800337e:	f000 fba5 	bl	8003acc <_sbrk_r>
 8003382:	1c43      	adds	r3, r0, #1
 8003384:	d00a      	beq.n	800339c <sbrk_aligned+0x34>
 8003386:	1cc4      	adds	r4, r0, #3
 8003388:	f024 0403 	bic.w	r4, r4, #3
 800338c:	42a0      	cmp	r0, r4
 800338e:	d007      	beq.n	80033a0 <sbrk_aligned+0x38>
 8003390:	1a21      	subs	r1, r4, r0
 8003392:	4628      	mov	r0, r5
 8003394:	f000 fb9a 	bl	8003acc <_sbrk_r>
 8003398:	3001      	adds	r0, #1
 800339a:	d101      	bne.n	80033a0 <sbrk_aligned+0x38>
 800339c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80033a0:	4620      	mov	r0, r4
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
 80033a4:	20000304 	.word	0x20000304

080033a8 <_malloc_r>:
 80033a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033ac:	1ccd      	adds	r5, r1, #3
 80033ae:	f025 0503 	bic.w	r5, r5, #3
 80033b2:	3508      	adds	r5, #8
 80033b4:	2d0c      	cmp	r5, #12
 80033b6:	bf38      	it	cc
 80033b8:	250c      	movcc	r5, #12
 80033ba:	2d00      	cmp	r5, #0
 80033bc:	4607      	mov	r7, r0
 80033be:	db01      	blt.n	80033c4 <_malloc_r+0x1c>
 80033c0:	42a9      	cmp	r1, r5
 80033c2:	d905      	bls.n	80033d0 <_malloc_r+0x28>
 80033c4:	230c      	movs	r3, #12
 80033c6:	2600      	movs	r6, #0
 80033c8:	603b      	str	r3, [r7, #0]
 80033ca:	4630      	mov	r0, r6
 80033cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80034a4 <_malloc_r+0xfc>
 80033d4:	f000 f868 	bl	80034a8 <__malloc_lock>
 80033d8:	f8d8 3000 	ldr.w	r3, [r8]
 80033dc:	461c      	mov	r4, r3
 80033de:	bb5c      	cbnz	r4, 8003438 <_malloc_r+0x90>
 80033e0:	4629      	mov	r1, r5
 80033e2:	4638      	mov	r0, r7
 80033e4:	f7ff ffc0 	bl	8003368 <sbrk_aligned>
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	4604      	mov	r4, r0
 80033ec:	d155      	bne.n	800349a <_malloc_r+0xf2>
 80033ee:	f8d8 4000 	ldr.w	r4, [r8]
 80033f2:	4626      	mov	r6, r4
 80033f4:	2e00      	cmp	r6, #0
 80033f6:	d145      	bne.n	8003484 <_malloc_r+0xdc>
 80033f8:	2c00      	cmp	r4, #0
 80033fa:	d048      	beq.n	800348e <_malloc_r+0xe6>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	4631      	mov	r1, r6
 8003400:	4638      	mov	r0, r7
 8003402:	eb04 0903 	add.w	r9, r4, r3
 8003406:	f000 fb61 	bl	8003acc <_sbrk_r>
 800340a:	4581      	cmp	r9, r0
 800340c:	d13f      	bne.n	800348e <_malloc_r+0xe6>
 800340e:	6821      	ldr	r1, [r4, #0]
 8003410:	4638      	mov	r0, r7
 8003412:	1a6d      	subs	r5, r5, r1
 8003414:	4629      	mov	r1, r5
 8003416:	f7ff ffa7 	bl	8003368 <sbrk_aligned>
 800341a:	3001      	adds	r0, #1
 800341c:	d037      	beq.n	800348e <_malloc_r+0xe6>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	442b      	add	r3, r5
 8003422:	6023      	str	r3, [r4, #0]
 8003424:	f8d8 3000 	ldr.w	r3, [r8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d038      	beq.n	800349e <_malloc_r+0xf6>
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	42a2      	cmp	r2, r4
 8003430:	d12b      	bne.n	800348a <_malloc_r+0xe2>
 8003432:	2200      	movs	r2, #0
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	e00f      	b.n	8003458 <_malloc_r+0xb0>
 8003438:	6822      	ldr	r2, [r4, #0]
 800343a:	1b52      	subs	r2, r2, r5
 800343c:	d41f      	bmi.n	800347e <_malloc_r+0xd6>
 800343e:	2a0b      	cmp	r2, #11
 8003440:	d917      	bls.n	8003472 <_malloc_r+0xca>
 8003442:	1961      	adds	r1, r4, r5
 8003444:	42a3      	cmp	r3, r4
 8003446:	6025      	str	r5, [r4, #0]
 8003448:	bf18      	it	ne
 800344a:	6059      	strne	r1, [r3, #4]
 800344c:	6863      	ldr	r3, [r4, #4]
 800344e:	bf08      	it	eq
 8003450:	f8c8 1000 	streq.w	r1, [r8]
 8003454:	5162      	str	r2, [r4, r5]
 8003456:	604b      	str	r3, [r1, #4]
 8003458:	4638      	mov	r0, r7
 800345a:	f104 060b 	add.w	r6, r4, #11
 800345e:	f000 f829 	bl	80034b4 <__malloc_unlock>
 8003462:	f026 0607 	bic.w	r6, r6, #7
 8003466:	1d23      	adds	r3, r4, #4
 8003468:	1af2      	subs	r2, r6, r3
 800346a:	d0ae      	beq.n	80033ca <_malloc_r+0x22>
 800346c:	1b9b      	subs	r3, r3, r6
 800346e:	50a3      	str	r3, [r4, r2]
 8003470:	e7ab      	b.n	80033ca <_malloc_r+0x22>
 8003472:	42a3      	cmp	r3, r4
 8003474:	6862      	ldr	r2, [r4, #4]
 8003476:	d1dd      	bne.n	8003434 <_malloc_r+0x8c>
 8003478:	f8c8 2000 	str.w	r2, [r8]
 800347c:	e7ec      	b.n	8003458 <_malloc_r+0xb0>
 800347e:	4623      	mov	r3, r4
 8003480:	6864      	ldr	r4, [r4, #4]
 8003482:	e7ac      	b.n	80033de <_malloc_r+0x36>
 8003484:	4634      	mov	r4, r6
 8003486:	6876      	ldr	r6, [r6, #4]
 8003488:	e7b4      	b.n	80033f4 <_malloc_r+0x4c>
 800348a:	4613      	mov	r3, r2
 800348c:	e7cc      	b.n	8003428 <_malloc_r+0x80>
 800348e:	230c      	movs	r3, #12
 8003490:	4638      	mov	r0, r7
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	f000 f80e 	bl	80034b4 <__malloc_unlock>
 8003498:	e797      	b.n	80033ca <_malloc_r+0x22>
 800349a:	6025      	str	r5, [r4, #0]
 800349c:	e7dc      	b.n	8003458 <_malloc_r+0xb0>
 800349e:	605b      	str	r3, [r3, #4]
 80034a0:	deff      	udf	#255	; 0xff
 80034a2:	bf00      	nop
 80034a4:	20000300 	.word	0x20000300

080034a8 <__malloc_lock>:
 80034a8:	4801      	ldr	r0, [pc, #4]	; (80034b0 <__malloc_lock+0x8>)
 80034aa:	f7ff bf13 	b.w	80032d4 <__retarget_lock_acquire_recursive>
 80034ae:	bf00      	nop
 80034b0:	200002fc 	.word	0x200002fc

080034b4 <__malloc_unlock>:
 80034b4:	4801      	ldr	r0, [pc, #4]	; (80034bc <__malloc_unlock+0x8>)
 80034b6:	f7ff bf0e 	b.w	80032d6 <__retarget_lock_release_recursive>
 80034ba:	bf00      	nop
 80034bc:	200002fc 	.word	0x200002fc

080034c0 <__ssputs_r>:
 80034c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c4:	461f      	mov	r7, r3
 80034c6:	688e      	ldr	r6, [r1, #8]
 80034c8:	4682      	mov	sl, r0
 80034ca:	42be      	cmp	r6, r7
 80034cc:	460c      	mov	r4, r1
 80034ce:	4690      	mov	r8, r2
 80034d0:	680b      	ldr	r3, [r1, #0]
 80034d2:	d82c      	bhi.n	800352e <__ssputs_r+0x6e>
 80034d4:	898a      	ldrh	r2, [r1, #12]
 80034d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034da:	d026      	beq.n	800352a <__ssputs_r+0x6a>
 80034dc:	6965      	ldr	r5, [r4, #20]
 80034de:	6909      	ldr	r1, [r1, #16]
 80034e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034e4:	eba3 0901 	sub.w	r9, r3, r1
 80034e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034ec:	1c7b      	adds	r3, r7, #1
 80034ee:	444b      	add	r3, r9
 80034f0:	106d      	asrs	r5, r5, #1
 80034f2:	429d      	cmp	r5, r3
 80034f4:	bf38      	it	cc
 80034f6:	461d      	movcc	r5, r3
 80034f8:	0553      	lsls	r3, r2, #21
 80034fa:	d527      	bpl.n	800354c <__ssputs_r+0x8c>
 80034fc:	4629      	mov	r1, r5
 80034fe:	f7ff ff53 	bl	80033a8 <_malloc_r>
 8003502:	4606      	mov	r6, r0
 8003504:	b360      	cbz	r0, 8003560 <__ssputs_r+0xa0>
 8003506:	464a      	mov	r2, r9
 8003508:	6921      	ldr	r1, [r4, #16]
 800350a:	f000 fafd 	bl	8003b08 <memcpy>
 800350e:	89a3      	ldrh	r3, [r4, #12]
 8003510:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003518:	81a3      	strh	r3, [r4, #12]
 800351a:	6126      	str	r6, [r4, #16]
 800351c:	444e      	add	r6, r9
 800351e:	6026      	str	r6, [r4, #0]
 8003520:	463e      	mov	r6, r7
 8003522:	6165      	str	r5, [r4, #20]
 8003524:	eba5 0509 	sub.w	r5, r5, r9
 8003528:	60a5      	str	r5, [r4, #8]
 800352a:	42be      	cmp	r6, r7
 800352c:	d900      	bls.n	8003530 <__ssputs_r+0x70>
 800352e:	463e      	mov	r6, r7
 8003530:	4632      	mov	r2, r6
 8003532:	4641      	mov	r1, r8
 8003534:	6820      	ldr	r0, [r4, #0]
 8003536:	f000 faaf 	bl	8003a98 <memmove>
 800353a:	2000      	movs	r0, #0
 800353c:	68a3      	ldr	r3, [r4, #8]
 800353e:	1b9b      	subs	r3, r3, r6
 8003540:	60a3      	str	r3, [r4, #8]
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	4433      	add	r3, r6
 8003546:	6023      	str	r3, [r4, #0]
 8003548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354c:	462a      	mov	r2, r5
 800354e:	f000 fae9 	bl	8003b24 <_realloc_r>
 8003552:	4606      	mov	r6, r0
 8003554:	2800      	cmp	r0, #0
 8003556:	d1e0      	bne.n	800351a <__ssputs_r+0x5a>
 8003558:	4650      	mov	r0, sl
 800355a:	6921      	ldr	r1, [r4, #16]
 800355c:	f7ff febc 	bl	80032d8 <_free_r>
 8003560:	230c      	movs	r3, #12
 8003562:	f8ca 3000 	str.w	r3, [sl]
 8003566:	89a3      	ldrh	r3, [r4, #12]
 8003568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800356c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003570:	81a3      	strh	r3, [r4, #12]
 8003572:	e7e9      	b.n	8003548 <__ssputs_r+0x88>

08003574 <_svfiprintf_r>:
 8003574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003578:	4698      	mov	r8, r3
 800357a:	898b      	ldrh	r3, [r1, #12]
 800357c:	4607      	mov	r7, r0
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	460d      	mov	r5, r1
 8003582:	4614      	mov	r4, r2
 8003584:	b09d      	sub	sp, #116	; 0x74
 8003586:	d50e      	bpl.n	80035a6 <_svfiprintf_r+0x32>
 8003588:	690b      	ldr	r3, [r1, #16]
 800358a:	b963      	cbnz	r3, 80035a6 <_svfiprintf_r+0x32>
 800358c:	2140      	movs	r1, #64	; 0x40
 800358e:	f7ff ff0b 	bl	80033a8 <_malloc_r>
 8003592:	6028      	str	r0, [r5, #0]
 8003594:	6128      	str	r0, [r5, #16]
 8003596:	b920      	cbnz	r0, 80035a2 <_svfiprintf_r+0x2e>
 8003598:	230c      	movs	r3, #12
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035a0:	e0d0      	b.n	8003744 <_svfiprintf_r+0x1d0>
 80035a2:	2340      	movs	r3, #64	; 0x40
 80035a4:	616b      	str	r3, [r5, #20]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9309      	str	r3, [sp, #36]	; 0x24
 80035aa:	2320      	movs	r3, #32
 80035ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035b0:	2330      	movs	r3, #48	; 0x30
 80035b2:	f04f 0901 	mov.w	r9, #1
 80035b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80035ba:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800375c <_svfiprintf_r+0x1e8>
 80035be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035c2:	4623      	mov	r3, r4
 80035c4:	469a      	mov	sl, r3
 80035c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035ca:	b10a      	cbz	r2, 80035d0 <_svfiprintf_r+0x5c>
 80035cc:	2a25      	cmp	r2, #37	; 0x25
 80035ce:	d1f9      	bne.n	80035c4 <_svfiprintf_r+0x50>
 80035d0:	ebba 0b04 	subs.w	fp, sl, r4
 80035d4:	d00b      	beq.n	80035ee <_svfiprintf_r+0x7a>
 80035d6:	465b      	mov	r3, fp
 80035d8:	4622      	mov	r2, r4
 80035da:	4629      	mov	r1, r5
 80035dc:	4638      	mov	r0, r7
 80035de:	f7ff ff6f 	bl	80034c0 <__ssputs_r>
 80035e2:	3001      	adds	r0, #1
 80035e4:	f000 80a9 	beq.w	800373a <_svfiprintf_r+0x1c6>
 80035e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035ea:	445a      	add	r2, fp
 80035ec:	9209      	str	r2, [sp, #36]	; 0x24
 80035ee:	f89a 3000 	ldrb.w	r3, [sl]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80a1 	beq.w	800373a <_svfiprintf_r+0x1c6>
 80035f8:	2300      	movs	r3, #0
 80035fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003602:	f10a 0a01 	add.w	sl, sl, #1
 8003606:	9304      	str	r3, [sp, #16]
 8003608:	9307      	str	r3, [sp, #28]
 800360a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800360e:	931a      	str	r3, [sp, #104]	; 0x68
 8003610:	4654      	mov	r4, sl
 8003612:	2205      	movs	r2, #5
 8003614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003618:	4850      	ldr	r0, [pc, #320]	; (800375c <_svfiprintf_r+0x1e8>)
 800361a:	f000 fa67 	bl	8003aec <memchr>
 800361e:	9a04      	ldr	r2, [sp, #16]
 8003620:	b9d8      	cbnz	r0, 800365a <_svfiprintf_r+0xe6>
 8003622:	06d0      	lsls	r0, r2, #27
 8003624:	bf44      	itt	mi
 8003626:	2320      	movmi	r3, #32
 8003628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800362c:	0711      	lsls	r1, r2, #28
 800362e:	bf44      	itt	mi
 8003630:	232b      	movmi	r3, #43	; 0x2b
 8003632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003636:	f89a 3000 	ldrb.w	r3, [sl]
 800363a:	2b2a      	cmp	r3, #42	; 0x2a
 800363c:	d015      	beq.n	800366a <_svfiprintf_r+0xf6>
 800363e:	4654      	mov	r4, sl
 8003640:	2000      	movs	r0, #0
 8003642:	f04f 0c0a 	mov.w	ip, #10
 8003646:	9a07      	ldr	r2, [sp, #28]
 8003648:	4621      	mov	r1, r4
 800364a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800364e:	3b30      	subs	r3, #48	; 0x30
 8003650:	2b09      	cmp	r3, #9
 8003652:	d94d      	bls.n	80036f0 <_svfiprintf_r+0x17c>
 8003654:	b1b0      	cbz	r0, 8003684 <_svfiprintf_r+0x110>
 8003656:	9207      	str	r2, [sp, #28]
 8003658:	e014      	b.n	8003684 <_svfiprintf_r+0x110>
 800365a:	eba0 0308 	sub.w	r3, r0, r8
 800365e:	fa09 f303 	lsl.w	r3, r9, r3
 8003662:	4313      	orrs	r3, r2
 8003664:	46a2      	mov	sl, r4
 8003666:	9304      	str	r3, [sp, #16]
 8003668:	e7d2      	b.n	8003610 <_svfiprintf_r+0x9c>
 800366a:	9b03      	ldr	r3, [sp, #12]
 800366c:	1d19      	adds	r1, r3, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	9103      	str	r1, [sp, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	bfbb      	ittet	lt
 8003676:	425b      	neglt	r3, r3
 8003678:	f042 0202 	orrlt.w	r2, r2, #2
 800367c:	9307      	strge	r3, [sp, #28]
 800367e:	9307      	strlt	r3, [sp, #28]
 8003680:	bfb8      	it	lt
 8003682:	9204      	strlt	r2, [sp, #16]
 8003684:	7823      	ldrb	r3, [r4, #0]
 8003686:	2b2e      	cmp	r3, #46	; 0x2e
 8003688:	d10c      	bne.n	80036a4 <_svfiprintf_r+0x130>
 800368a:	7863      	ldrb	r3, [r4, #1]
 800368c:	2b2a      	cmp	r3, #42	; 0x2a
 800368e:	d134      	bne.n	80036fa <_svfiprintf_r+0x186>
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	3402      	adds	r4, #2
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	9203      	str	r2, [sp, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	bfb8      	it	lt
 800369e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80036a2:	9305      	str	r3, [sp, #20]
 80036a4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003760 <_svfiprintf_r+0x1ec>
 80036a8:	2203      	movs	r2, #3
 80036aa:	4650      	mov	r0, sl
 80036ac:	7821      	ldrb	r1, [r4, #0]
 80036ae:	f000 fa1d 	bl	8003aec <memchr>
 80036b2:	b138      	cbz	r0, 80036c4 <_svfiprintf_r+0x150>
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	9b04      	ldr	r3, [sp, #16]
 80036b8:	eba0 000a 	sub.w	r0, r0, sl
 80036bc:	4082      	lsls	r2, r0
 80036be:	4313      	orrs	r3, r2
 80036c0:	3401      	adds	r4, #1
 80036c2:	9304      	str	r3, [sp, #16]
 80036c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c8:	2206      	movs	r2, #6
 80036ca:	4826      	ldr	r0, [pc, #152]	; (8003764 <_svfiprintf_r+0x1f0>)
 80036cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036d0:	f000 fa0c 	bl	8003aec <memchr>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d038      	beq.n	800374a <_svfiprintf_r+0x1d6>
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <_svfiprintf_r+0x1f4>)
 80036da:	bb1b      	cbnz	r3, 8003724 <_svfiprintf_r+0x1b0>
 80036dc:	9b03      	ldr	r3, [sp, #12]
 80036de:	3307      	adds	r3, #7
 80036e0:	f023 0307 	bic.w	r3, r3, #7
 80036e4:	3308      	adds	r3, #8
 80036e6:	9303      	str	r3, [sp, #12]
 80036e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ea:	4433      	add	r3, r6
 80036ec:	9309      	str	r3, [sp, #36]	; 0x24
 80036ee:	e768      	b.n	80035c2 <_svfiprintf_r+0x4e>
 80036f0:	460c      	mov	r4, r1
 80036f2:	2001      	movs	r0, #1
 80036f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80036f8:	e7a6      	b.n	8003648 <_svfiprintf_r+0xd4>
 80036fa:	2300      	movs	r3, #0
 80036fc:	f04f 0c0a 	mov.w	ip, #10
 8003700:	4619      	mov	r1, r3
 8003702:	3401      	adds	r4, #1
 8003704:	9305      	str	r3, [sp, #20]
 8003706:	4620      	mov	r0, r4
 8003708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800370c:	3a30      	subs	r2, #48	; 0x30
 800370e:	2a09      	cmp	r2, #9
 8003710:	d903      	bls.n	800371a <_svfiprintf_r+0x1a6>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0c6      	beq.n	80036a4 <_svfiprintf_r+0x130>
 8003716:	9105      	str	r1, [sp, #20]
 8003718:	e7c4      	b.n	80036a4 <_svfiprintf_r+0x130>
 800371a:	4604      	mov	r4, r0
 800371c:	2301      	movs	r3, #1
 800371e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003722:	e7f0      	b.n	8003706 <_svfiprintf_r+0x192>
 8003724:	ab03      	add	r3, sp, #12
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	462a      	mov	r2, r5
 800372a:	4638      	mov	r0, r7
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <_svfiprintf_r+0x1f8>)
 800372e:	a904      	add	r1, sp, #16
 8003730:	f3af 8000 	nop.w
 8003734:	1c42      	adds	r2, r0, #1
 8003736:	4606      	mov	r6, r0
 8003738:	d1d6      	bne.n	80036e8 <_svfiprintf_r+0x174>
 800373a:	89ab      	ldrh	r3, [r5, #12]
 800373c:	065b      	lsls	r3, r3, #25
 800373e:	f53f af2d 	bmi.w	800359c <_svfiprintf_r+0x28>
 8003742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003744:	b01d      	add	sp, #116	; 0x74
 8003746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800374a:	ab03      	add	r3, sp, #12
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	462a      	mov	r2, r5
 8003750:	4638      	mov	r0, r7
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <_svfiprintf_r+0x1f8>)
 8003754:	a904      	add	r1, sp, #16
 8003756:	f000 f87d 	bl	8003854 <_printf_i>
 800375a:	e7eb      	b.n	8003734 <_svfiprintf_r+0x1c0>
 800375c:	08003bde 	.word	0x08003bde
 8003760:	08003be4 	.word	0x08003be4
 8003764:	08003be8 	.word	0x08003be8
 8003768:	00000000 	.word	0x00000000
 800376c:	080034c1 	.word	0x080034c1

08003770 <_printf_common>:
 8003770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003774:	4616      	mov	r6, r2
 8003776:	4699      	mov	r9, r3
 8003778:	688a      	ldr	r2, [r1, #8]
 800377a:	690b      	ldr	r3, [r1, #16]
 800377c:	4607      	mov	r7, r0
 800377e:	4293      	cmp	r3, r2
 8003780:	bfb8      	it	lt
 8003782:	4613      	movlt	r3, r2
 8003784:	6033      	str	r3, [r6, #0]
 8003786:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800378a:	460c      	mov	r4, r1
 800378c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003790:	b10a      	cbz	r2, 8003796 <_printf_common+0x26>
 8003792:	3301      	adds	r3, #1
 8003794:	6033      	str	r3, [r6, #0]
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	0699      	lsls	r1, r3, #26
 800379a:	bf42      	ittt	mi
 800379c:	6833      	ldrmi	r3, [r6, #0]
 800379e:	3302      	addmi	r3, #2
 80037a0:	6033      	strmi	r3, [r6, #0]
 80037a2:	6825      	ldr	r5, [r4, #0]
 80037a4:	f015 0506 	ands.w	r5, r5, #6
 80037a8:	d106      	bne.n	80037b8 <_printf_common+0x48>
 80037aa:	f104 0a19 	add.w	sl, r4, #25
 80037ae:	68e3      	ldr	r3, [r4, #12]
 80037b0:	6832      	ldr	r2, [r6, #0]
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	42ab      	cmp	r3, r5
 80037b6:	dc2b      	bgt.n	8003810 <_printf_common+0xa0>
 80037b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037bc:	1e13      	subs	r3, r2, #0
 80037be:	6822      	ldr	r2, [r4, #0]
 80037c0:	bf18      	it	ne
 80037c2:	2301      	movne	r3, #1
 80037c4:	0692      	lsls	r2, r2, #26
 80037c6:	d430      	bmi.n	800382a <_printf_common+0xba>
 80037c8:	4649      	mov	r1, r9
 80037ca:	4638      	mov	r0, r7
 80037cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037d0:	47c0      	blx	r8
 80037d2:	3001      	adds	r0, #1
 80037d4:	d023      	beq.n	800381e <_printf_common+0xae>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	6922      	ldr	r2, [r4, #16]
 80037da:	f003 0306 	and.w	r3, r3, #6
 80037de:	2b04      	cmp	r3, #4
 80037e0:	bf14      	ite	ne
 80037e2:	2500      	movne	r5, #0
 80037e4:	6833      	ldreq	r3, [r6, #0]
 80037e6:	f04f 0600 	mov.w	r6, #0
 80037ea:	bf08      	it	eq
 80037ec:	68e5      	ldreq	r5, [r4, #12]
 80037ee:	f104 041a 	add.w	r4, r4, #26
 80037f2:	bf08      	it	eq
 80037f4:	1aed      	subeq	r5, r5, r3
 80037f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037fa:	bf08      	it	eq
 80037fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003800:	4293      	cmp	r3, r2
 8003802:	bfc4      	itt	gt
 8003804:	1a9b      	subgt	r3, r3, r2
 8003806:	18ed      	addgt	r5, r5, r3
 8003808:	42b5      	cmp	r5, r6
 800380a:	d11a      	bne.n	8003842 <_printf_common+0xd2>
 800380c:	2000      	movs	r0, #0
 800380e:	e008      	b.n	8003822 <_printf_common+0xb2>
 8003810:	2301      	movs	r3, #1
 8003812:	4652      	mov	r2, sl
 8003814:	4649      	mov	r1, r9
 8003816:	4638      	mov	r0, r7
 8003818:	47c0      	blx	r8
 800381a:	3001      	adds	r0, #1
 800381c:	d103      	bne.n	8003826 <_printf_common+0xb6>
 800381e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003826:	3501      	adds	r5, #1
 8003828:	e7c1      	b.n	80037ae <_printf_common+0x3e>
 800382a:	2030      	movs	r0, #48	; 0x30
 800382c:	18e1      	adds	r1, r4, r3
 800382e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003838:	4422      	add	r2, r4
 800383a:	3302      	adds	r3, #2
 800383c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003840:	e7c2      	b.n	80037c8 <_printf_common+0x58>
 8003842:	2301      	movs	r3, #1
 8003844:	4622      	mov	r2, r4
 8003846:	4649      	mov	r1, r9
 8003848:	4638      	mov	r0, r7
 800384a:	47c0      	blx	r8
 800384c:	3001      	adds	r0, #1
 800384e:	d0e6      	beq.n	800381e <_printf_common+0xae>
 8003850:	3601      	adds	r6, #1
 8003852:	e7d9      	b.n	8003808 <_printf_common+0x98>

08003854 <_printf_i>:
 8003854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	7e0f      	ldrb	r7, [r1, #24]
 800385a:	4691      	mov	r9, r2
 800385c:	2f78      	cmp	r7, #120	; 0x78
 800385e:	4680      	mov	r8, r0
 8003860:	460c      	mov	r4, r1
 8003862:	469a      	mov	sl, r3
 8003864:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800386a:	d807      	bhi.n	800387c <_printf_i+0x28>
 800386c:	2f62      	cmp	r7, #98	; 0x62
 800386e:	d80a      	bhi.n	8003886 <_printf_i+0x32>
 8003870:	2f00      	cmp	r7, #0
 8003872:	f000 80d5 	beq.w	8003a20 <_printf_i+0x1cc>
 8003876:	2f58      	cmp	r7, #88	; 0x58
 8003878:	f000 80c1 	beq.w	80039fe <_printf_i+0x1aa>
 800387c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003884:	e03a      	b.n	80038fc <_printf_i+0xa8>
 8003886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800388a:	2b15      	cmp	r3, #21
 800388c:	d8f6      	bhi.n	800387c <_printf_i+0x28>
 800388e:	a101      	add	r1, pc, #4	; (adr r1, 8003894 <_printf_i+0x40>)
 8003890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003894:	080038ed 	.word	0x080038ed
 8003898:	08003901 	.word	0x08003901
 800389c:	0800387d 	.word	0x0800387d
 80038a0:	0800387d 	.word	0x0800387d
 80038a4:	0800387d 	.word	0x0800387d
 80038a8:	0800387d 	.word	0x0800387d
 80038ac:	08003901 	.word	0x08003901
 80038b0:	0800387d 	.word	0x0800387d
 80038b4:	0800387d 	.word	0x0800387d
 80038b8:	0800387d 	.word	0x0800387d
 80038bc:	0800387d 	.word	0x0800387d
 80038c0:	08003a07 	.word	0x08003a07
 80038c4:	0800392d 	.word	0x0800392d
 80038c8:	080039c1 	.word	0x080039c1
 80038cc:	0800387d 	.word	0x0800387d
 80038d0:	0800387d 	.word	0x0800387d
 80038d4:	08003a29 	.word	0x08003a29
 80038d8:	0800387d 	.word	0x0800387d
 80038dc:	0800392d 	.word	0x0800392d
 80038e0:	0800387d 	.word	0x0800387d
 80038e4:	0800387d 	.word	0x0800387d
 80038e8:	080039c9 	.word	0x080039c9
 80038ec:	682b      	ldr	r3, [r5, #0]
 80038ee:	1d1a      	adds	r2, r3, #4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	602a      	str	r2, [r5, #0]
 80038f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0a0      	b.n	8003a42 <_printf_i+0x1ee>
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	682b      	ldr	r3, [r5, #0]
 8003904:	0607      	lsls	r7, r0, #24
 8003906:	f103 0104 	add.w	r1, r3, #4
 800390a:	6029      	str	r1, [r5, #0]
 800390c:	d501      	bpl.n	8003912 <_printf_i+0xbe>
 800390e:	681e      	ldr	r6, [r3, #0]
 8003910:	e003      	b.n	800391a <_printf_i+0xc6>
 8003912:	0646      	lsls	r6, r0, #25
 8003914:	d5fb      	bpl.n	800390e <_printf_i+0xba>
 8003916:	f9b3 6000 	ldrsh.w	r6, [r3]
 800391a:	2e00      	cmp	r6, #0
 800391c:	da03      	bge.n	8003926 <_printf_i+0xd2>
 800391e:	232d      	movs	r3, #45	; 0x2d
 8003920:	4276      	negs	r6, r6
 8003922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003926:	230a      	movs	r3, #10
 8003928:	4859      	ldr	r0, [pc, #356]	; (8003a90 <_printf_i+0x23c>)
 800392a:	e012      	b.n	8003952 <_printf_i+0xfe>
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	6820      	ldr	r0, [r4, #0]
 8003930:	1d19      	adds	r1, r3, #4
 8003932:	6029      	str	r1, [r5, #0]
 8003934:	0605      	lsls	r5, r0, #24
 8003936:	d501      	bpl.n	800393c <_printf_i+0xe8>
 8003938:	681e      	ldr	r6, [r3, #0]
 800393a:	e002      	b.n	8003942 <_printf_i+0xee>
 800393c:	0641      	lsls	r1, r0, #25
 800393e:	d5fb      	bpl.n	8003938 <_printf_i+0xe4>
 8003940:	881e      	ldrh	r6, [r3, #0]
 8003942:	2f6f      	cmp	r7, #111	; 0x6f
 8003944:	bf0c      	ite	eq
 8003946:	2308      	moveq	r3, #8
 8003948:	230a      	movne	r3, #10
 800394a:	4851      	ldr	r0, [pc, #324]	; (8003a90 <_printf_i+0x23c>)
 800394c:	2100      	movs	r1, #0
 800394e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003952:	6865      	ldr	r5, [r4, #4]
 8003954:	2d00      	cmp	r5, #0
 8003956:	bfa8      	it	ge
 8003958:	6821      	ldrge	r1, [r4, #0]
 800395a:	60a5      	str	r5, [r4, #8]
 800395c:	bfa4      	itt	ge
 800395e:	f021 0104 	bicge.w	r1, r1, #4
 8003962:	6021      	strge	r1, [r4, #0]
 8003964:	b90e      	cbnz	r6, 800396a <_printf_i+0x116>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d04b      	beq.n	8003a02 <_printf_i+0x1ae>
 800396a:	4615      	mov	r5, r2
 800396c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003970:	fb03 6711 	mls	r7, r3, r1, r6
 8003974:	5dc7      	ldrb	r7, [r0, r7]
 8003976:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800397a:	4637      	mov	r7, r6
 800397c:	42bb      	cmp	r3, r7
 800397e:	460e      	mov	r6, r1
 8003980:	d9f4      	bls.n	800396c <_printf_i+0x118>
 8003982:	2b08      	cmp	r3, #8
 8003984:	d10b      	bne.n	800399e <_printf_i+0x14a>
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	07de      	lsls	r6, r3, #31
 800398a:	d508      	bpl.n	800399e <_printf_i+0x14a>
 800398c:	6923      	ldr	r3, [r4, #16]
 800398e:	6861      	ldr	r1, [r4, #4]
 8003990:	4299      	cmp	r1, r3
 8003992:	bfde      	ittt	le
 8003994:	2330      	movle	r3, #48	; 0x30
 8003996:	f805 3c01 	strble.w	r3, [r5, #-1]
 800399a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800399e:	1b52      	subs	r2, r2, r5
 80039a0:	6122      	str	r2, [r4, #16]
 80039a2:	464b      	mov	r3, r9
 80039a4:	4621      	mov	r1, r4
 80039a6:	4640      	mov	r0, r8
 80039a8:	f8cd a000 	str.w	sl, [sp]
 80039ac:	aa03      	add	r2, sp, #12
 80039ae:	f7ff fedf 	bl	8003770 <_printf_common>
 80039b2:	3001      	adds	r0, #1
 80039b4:	d14a      	bne.n	8003a4c <_printf_i+0x1f8>
 80039b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039ba:	b004      	add	sp, #16
 80039bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	f043 0320 	orr.w	r3, r3, #32
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	2778      	movs	r7, #120	; 0x78
 80039ca:	4832      	ldr	r0, [pc, #200]	; (8003a94 <_printf_i+0x240>)
 80039cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	6829      	ldr	r1, [r5, #0]
 80039d4:	061f      	lsls	r7, r3, #24
 80039d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80039da:	d402      	bmi.n	80039e2 <_printf_i+0x18e>
 80039dc:	065f      	lsls	r7, r3, #25
 80039de:	bf48      	it	mi
 80039e0:	b2b6      	uxthmi	r6, r6
 80039e2:	07df      	lsls	r7, r3, #31
 80039e4:	bf48      	it	mi
 80039e6:	f043 0320 	orrmi.w	r3, r3, #32
 80039ea:	6029      	str	r1, [r5, #0]
 80039ec:	bf48      	it	mi
 80039ee:	6023      	strmi	r3, [r4, #0]
 80039f0:	b91e      	cbnz	r6, 80039fa <_printf_i+0x1a6>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	f023 0320 	bic.w	r3, r3, #32
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	2310      	movs	r3, #16
 80039fc:	e7a6      	b.n	800394c <_printf_i+0xf8>
 80039fe:	4824      	ldr	r0, [pc, #144]	; (8003a90 <_printf_i+0x23c>)
 8003a00:	e7e4      	b.n	80039cc <_printf_i+0x178>
 8003a02:	4615      	mov	r5, r2
 8003a04:	e7bd      	b.n	8003982 <_printf_i+0x12e>
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	6826      	ldr	r6, [r4, #0]
 8003a0a:	1d18      	adds	r0, r3, #4
 8003a0c:	6961      	ldr	r1, [r4, #20]
 8003a0e:	6028      	str	r0, [r5, #0]
 8003a10:	0635      	lsls	r5, r6, #24
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	d501      	bpl.n	8003a1a <_printf_i+0x1c6>
 8003a16:	6019      	str	r1, [r3, #0]
 8003a18:	e002      	b.n	8003a20 <_printf_i+0x1cc>
 8003a1a:	0670      	lsls	r0, r6, #25
 8003a1c:	d5fb      	bpl.n	8003a16 <_printf_i+0x1c2>
 8003a1e:	8019      	strh	r1, [r3, #0]
 8003a20:	2300      	movs	r3, #0
 8003a22:	4615      	mov	r5, r2
 8003a24:	6123      	str	r3, [r4, #16]
 8003a26:	e7bc      	b.n	80039a2 <_printf_i+0x14e>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	1d1a      	adds	r2, r3, #4
 8003a2e:	602a      	str	r2, [r5, #0]
 8003a30:	681d      	ldr	r5, [r3, #0]
 8003a32:	6862      	ldr	r2, [r4, #4]
 8003a34:	4628      	mov	r0, r5
 8003a36:	f000 f859 	bl	8003aec <memchr>
 8003a3a:	b108      	cbz	r0, 8003a40 <_printf_i+0x1ec>
 8003a3c:	1b40      	subs	r0, r0, r5
 8003a3e:	6060      	str	r0, [r4, #4]
 8003a40:	6863      	ldr	r3, [r4, #4]
 8003a42:	6123      	str	r3, [r4, #16]
 8003a44:	2300      	movs	r3, #0
 8003a46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a4a:	e7aa      	b.n	80039a2 <_printf_i+0x14e>
 8003a4c:	462a      	mov	r2, r5
 8003a4e:	4649      	mov	r1, r9
 8003a50:	4640      	mov	r0, r8
 8003a52:	6923      	ldr	r3, [r4, #16]
 8003a54:	47d0      	blx	sl
 8003a56:	3001      	adds	r0, #1
 8003a58:	d0ad      	beq.n	80039b6 <_printf_i+0x162>
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	079b      	lsls	r3, r3, #30
 8003a5e:	d413      	bmi.n	8003a88 <_printf_i+0x234>
 8003a60:	68e0      	ldr	r0, [r4, #12]
 8003a62:	9b03      	ldr	r3, [sp, #12]
 8003a64:	4298      	cmp	r0, r3
 8003a66:	bfb8      	it	lt
 8003a68:	4618      	movlt	r0, r3
 8003a6a:	e7a6      	b.n	80039ba <_printf_i+0x166>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4632      	mov	r2, r6
 8003a70:	4649      	mov	r1, r9
 8003a72:	4640      	mov	r0, r8
 8003a74:	47d0      	blx	sl
 8003a76:	3001      	adds	r0, #1
 8003a78:	d09d      	beq.n	80039b6 <_printf_i+0x162>
 8003a7a:	3501      	adds	r5, #1
 8003a7c:	68e3      	ldr	r3, [r4, #12]
 8003a7e:	9903      	ldr	r1, [sp, #12]
 8003a80:	1a5b      	subs	r3, r3, r1
 8003a82:	42ab      	cmp	r3, r5
 8003a84:	dcf2      	bgt.n	8003a6c <_printf_i+0x218>
 8003a86:	e7eb      	b.n	8003a60 <_printf_i+0x20c>
 8003a88:	2500      	movs	r5, #0
 8003a8a:	f104 0619 	add.w	r6, r4, #25
 8003a8e:	e7f5      	b.n	8003a7c <_printf_i+0x228>
 8003a90:	08003bef 	.word	0x08003bef
 8003a94:	08003c00 	.word	0x08003c00

08003a98 <memmove>:
 8003a98:	4288      	cmp	r0, r1
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	eb01 0402 	add.w	r4, r1, r2
 8003aa0:	d902      	bls.n	8003aa8 <memmove+0x10>
 8003aa2:	4284      	cmp	r4, r0
 8003aa4:	4623      	mov	r3, r4
 8003aa6:	d807      	bhi.n	8003ab8 <memmove+0x20>
 8003aa8:	1e43      	subs	r3, r0, #1
 8003aaa:	42a1      	cmp	r1, r4
 8003aac:	d008      	beq.n	8003ac0 <memmove+0x28>
 8003aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ab6:	e7f8      	b.n	8003aaa <memmove+0x12>
 8003ab8:	4601      	mov	r1, r0
 8003aba:	4402      	add	r2, r0
 8003abc:	428a      	cmp	r2, r1
 8003abe:	d100      	bne.n	8003ac2 <memmove+0x2a>
 8003ac0:	bd10      	pop	{r4, pc}
 8003ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003aca:	e7f7      	b.n	8003abc <memmove+0x24>

08003acc <_sbrk_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4d05      	ldr	r5, [pc, #20]	; (8003ae8 <_sbrk_r+0x1c>)
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	f7fc ff6a 	bl	80009b0 <_sbrk>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_sbrk_r+0x1a>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_sbrk_r+0x1a>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	200002f8 	.word	0x200002f8

08003aec <memchr>:
 8003aec:	4603      	mov	r3, r0
 8003aee:	b510      	push	{r4, lr}
 8003af0:	b2c9      	uxtb	r1, r1
 8003af2:	4402      	add	r2, r0
 8003af4:	4293      	cmp	r3, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	d101      	bne.n	8003afe <memchr+0x12>
 8003afa:	2000      	movs	r0, #0
 8003afc:	e003      	b.n	8003b06 <memchr+0x1a>
 8003afe:	7804      	ldrb	r4, [r0, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	428c      	cmp	r4, r1
 8003b04:	d1f6      	bne.n	8003af4 <memchr+0x8>
 8003b06:	bd10      	pop	{r4, pc}

08003b08 <memcpy>:
 8003b08:	440a      	add	r2, r1
 8003b0a:	4291      	cmp	r1, r2
 8003b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b10:	d100      	bne.n	8003b14 <memcpy+0xc>
 8003b12:	4770      	bx	lr
 8003b14:	b510      	push	{r4, lr}
 8003b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b1a:	4291      	cmp	r1, r2
 8003b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b20:	d1f9      	bne.n	8003b16 <memcpy+0xe>
 8003b22:	bd10      	pop	{r4, pc}

08003b24 <_realloc_r>:
 8003b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b28:	4680      	mov	r8, r0
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	460e      	mov	r6, r1
 8003b2e:	b921      	cbnz	r1, 8003b3a <_realloc_r+0x16>
 8003b30:	4611      	mov	r1, r2
 8003b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b36:	f7ff bc37 	b.w	80033a8 <_malloc_r>
 8003b3a:	b92a      	cbnz	r2, 8003b48 <_realloc_r+0x24>
 8003b3c:	f7ff fbcc 	bl	80032d8 <_free_r>
 8003b40:	4625      	mov	r5, r4
 8003b42:	4628      	mov	r0, r5
 8003b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b48:	f000 f81b 	bl	8003b82 <_malloc_usable_size_r>
 8003b4c:	4284      	cmp	r4, r0
 8003b4e:	4607      	mov	r7, r0
 8003b50:	d802      	bhi.n	8003b58 <_realloc_r+0x34>
 8003b52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b56:	d812      	bhi.n	8003b7e <_realloc_r+0x5a>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4640      	mov	r0, r8
 8003b5c:	f7ff fc24 	bl	80033a8 <_malloc_r>
 8003b60:	4605      	mov	r5, r0
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d0ed      	beq.n	8003b42 <_realloc_r+0x1e>
 8003b66:	42bc      	cmp	r4, r7
 8003b68:	4622      	mov	r2, r4
 8003b6a:	4631      	mov	r1, r6
 8003b6c:	bf28      	it	cs
 8003b6e:	463a      	movcs	r2, r7
 8003b70:	f7ff ffca 	bl	8003b08 <memcpy>
 8003b74:	4631      	mov	r1, r6
 8003b76:	4640      	mov	r0, r8
 8003b78:	f7ff fbae 	bl	80032d8 <_free_r>
 8003b7c:	e7e1      	b.n	8003b42 <_realloc_r+0x1e>
 8003b7e:	4635      	mov	r5, r6
 8003b80:	e7df      	b.n	8003b42 <_realloc_r+0x1e>

08003b82 <_malloc_usable_size_r>:
 8003b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b86:	1f18      	subs	r0, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bfbc      	itt	lt
 8003b8c:	580b      	ldrlt	r3, [r1, r0]
 8003b8e:	18c0      	addlt	r0, r0, r3
 8003b90:	4770      	bx	lr
	...

08003b94 <_init>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_fini>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr
