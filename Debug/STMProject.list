
STMProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006508  08006508  00016508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f4  080065f4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080065f4  080065f4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065f4  080065f4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f4  080065f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080065fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd8  20000060  0800665c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c38  0800665c  00021c38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001555b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030e7  00000000  00000000  00035627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00038710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f36  00000000  00000000  00039a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b73  00000000  00000000  0003a9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b5c  00000000  00000000  0003d531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093a91  00000000  00000000  0005208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005708  00000000  00000000  000e5b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000eb228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080064f0 	.word	0x080064f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080064f0 	.word	0x080064f0

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc48 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f82c 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f966 	bl	800042c <MX_GPIO_Init>
  MX_DMA_Init();
 8000160:	f000 f946 	bl	80003f0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000164:	f000 f8c0 	bl	80002e8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000168:	f000 f918 	bl	800039c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800016c:	f000 f868 	bl	8000240 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f003 f832 	bl	80031d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <main+0x4c>)
 8000176:	2100      	movs	r1, #0
 8000178:	4809      	ldr	r0, [pc, #36]	; (80001a0 <main+0x50>)
 800017a:	f003 f893 	bl	80032a4 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a08      	ldr	r2, [pc, #32]	; (80001a4 <main+0x54>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8000184:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <main+0x58>)
 8000186:	2100      	movs	r1, #0
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <main+0x5c>)
 800018a:	f003 f88b 	bl	80032a4 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <main+0x60>)
 8000192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000194:	f003 f852 	bl	800323c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000198:	e7fe      	b.n	8000198 <main+0x48>
 800019a:	bf00      	nop
 800019c:	0800654c 	.word	0x0800654c
 80001a0:	080004ed 	.word	0x080004ed
 80001a4:	20000198 	.word	0x20000198
 80001a8:	08006570 	.word	0x08006570
 80001ac:	08000555 	.word	0x08000555
 80001b0:	2000019c 	.word	0x2000019c

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	; 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f005 fd02 	bl	8005bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d6:	2301      	movs	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e8:	2302      	movs	r3, #2
 80001ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 f907 	bl	8001410 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000208:	f000 fa20 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f001 fb74 	bl	8001914 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000232:	f000 fa0b 	bl	800064c <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	; 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08c      	sub	sp, #48	; 0x30
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000246:	f107 030c 	add.w	r3, r7, #12
 800024a:	2224      	movs	r2, #36	; 0x24
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f005 fcbc 	bl	8005bcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800025c:	4b21      	ldr	r3, [pc, #132]	; (80002e4 <MX_TIM2_Init+0xa4>)
 800025e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000264:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <MX_TIM2_Init+0xa4>)
 8000266:	2200      	movs	r2, #0
 8000268:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800026a:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <MX_TIM2_Init+0xa4>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <MX_TIM2_Init+0xa4>)
 8000272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000276:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <MX_TIM2_Init+0xa4>)
 800027a:	2200      	movs	r2, #0
 800027c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <MX_TIM2_Init+0xa4>)
 8000280:	2280      	movs	r2, #128	; 0x80
 8000282:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000284:	2303      	movs	r3, #3
 8000286:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800028c:	2301      	movs	r3, #1
 800028e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000294:	230a      	movs	r3, #10
 8000296:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000298:	2300      	movs	r3, #0
 800029a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800029c:	2301      	movs	r3, #1
 800029e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80002a8:	f107 030c 	add.w	r3, r7, #12
 80002ac:	4619      	mov	r1, r3
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <MX_TIM2_Init+0xa4>)
 80002b0:	f001 fdb0 	bl	8001e14 <HAL_TIM_Encoder_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80002ba:	f000 f9c7 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	4806      	ldr	r0, [pc, #24]	; (80002e4 <MX_TIM2_Init+0xa4>)
 80002cc:	f002 fad8 	bl	8002880 <HAL_TIMEx_MasterConfigSynchronization>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80002d6:	f000 f9b9 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	3730      	adds	r7, #48	; 0x30
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000007c 	.word	0x2000007c

080002e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ee:	f107 0320 	add.w	r3, r7, #32
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]
 8000306:	615a      	str	r2, [r3, #20]
 8000308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_TIM3_Init+0xac>)
 800030c:	4a22      	ldr	r2, [pc, #136]	; (8000398 <MX_TIM3_Init+0xb0>)
 800030e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000310:	4b20      	ldr	r3, [pc, #128]	; (8000394 <MX_TIM3_Init+0xac>)
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_TIM3_Init+0xac>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_TIM3_Init+0xac>)
 800031e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_TIM3_Init+0xac>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_TIM3_Init+0xac>)
 800032c:	2280      	movs	r2, #128	; 0x80
 800032e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000330:	4818      	ldr	r0, [pc, #96]	; (8000394 <MX_TIM3_Init+0xac>)
 8000332:	f001 fc7d 	bl	8001c30 <HAL_TIM_PWM_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800033c:	f000 f986 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000348:	f107 0320 	add.w	r3, r7, #32
 800034c:	4619      	mov	r1, r3
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <MX_TIM3_Init+0xac>)
 8000350:	f002 fa96 	bl	8002880 <HAL_TIMEx_MasterConfigSynchronization>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800035a:	f000 f977 	bl	800064c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800035e:	2360      	movs	r3, #96	; 0x60
 8000360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800036a:	2300      	movs	r3, #0
 800036c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2200      	movs	r2, #0
 8000372:	4619      	mov	r1, r3
 8000374:	4807      	ldr	r0, [pc, #28]	; (8000394 <MX_TIM3_Init+0xac>)
 8000376:	f001 ff85 	bl	8002284 <HAL_TIM_PWM_ConfigChannel>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000380:	f000 f964 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <MX_TIM3_Init+0xac>)
 8000386:	f000 f9f1 	bl	800076c <HAL_TIM_MspPostInit>

}
 800038a:	bf00      	nop
 800038c:	3728      	adds	r7, #40	; 0x28
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200000c4 	.word	0x200000c4
 8000398:	40000400 	.word	0x40000400

0800039c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <MX_USART2_UART_Init+0x50>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003d4:	f002 fac4 	bl	8002960 <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003de:	f000 f935 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2000010c 	.word	0x2000010c
 80003ec:	40004400 	.word	0x40004400

080003f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <MX_DMA_Init+0x38>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <MX_DMA_Init+0x38>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b09      	ldr	r3, [pc, #36]	; (8000428 <MX_DMA_Init+0x38>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	2105      	movs	r1, #5
 8000412:	2010      	movs	r0, #16
 8000414:	f000 fc21 	bl	8000c5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000418:	2010      	movs	r0, #16
 800041a:	f000 fc3a 	bl	8000c92 <HAL_NVIC_EnableIRQ>

}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a26      	ldr	r2, [pc, #152]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000446:	f043 0310 	orr.w	r3, r3, #16
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <MX_GPIO_Init+0xb4>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0310 	and.w	r3, r3, #16
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000458:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <MX_GPIO_Init+0xb4>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a20      	ldr	r2, [pc, #128]	; (80004e0 <MX_GPIO_Init+0xb4>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0320 	and.w	r3, r3, #32
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b1b      	ldr	r3, [pc, #108]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a1a      	ldr	r2, [pc, #104]	; (80004e0 <MX_GPIO_Init+0xb4>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <MX_GPIO_Init+0xb4>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048e:	4815      	ldr	r0, [pc, #84]	; (80004e4 <MX_GPIO_Init+0xb8>)
 8000490:	f000 ff8c 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	2120      	movs	r1, #32
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <MX_GPIO_Init+0xbc>)
 800049a:	f000 ff87 	bl	80013ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800049e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480b      	ldr	r0, [pc, #44]	; (80004e4 <MX_GPIO_Init+0xb8>)
 80004b8:	f000 fdf4 	bl	80010a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004bc:	2320      	movs	r3, #32
 80004be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	4619      	mov	r1, r3
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_GPIO_Init+0xbc>)
 80004d4:	f000 fde6 	bl	80010a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40011000 	.word	0x40011000
 80004e8:	40010800 	.word	0x40010800

080004ec <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b090      	sub	sp, #64	; 0x40
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80004f4:	213c      	movs	r1, #60	; 0x3c
 80004f6:	4813      	ldr	r0, [pc, #76]	; (8000544 <StartBlink01+0x58>)
 80004f8:	f001 fd2e 	bl	8001f58 <HAL_TIM_Encoder_Start>
	uint8_t message[50] = {'\0'};
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	222e      	movs	r2, #46	; 0x2e
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f005 fb5f 	bl	8005bcc <memset>
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800050e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000512:	480d      	ldr	r0, [pc, #52]	; (8000548 <StartBlink01+0x5c>)
 8000514:	f000 ff62 	bl	80013dc <HAL_GPIO_TogglePin>
    sprintf(message, "Encoder Ticks = %d\n\r", ((TIM2->CNT)>>2));
 8000518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	089a      	lsrs	r2, r3, #2
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	4909      	ldr	r1, [pc, #36]	; (800054c <StartBlink01+0x60>)
 8000526:	4618      	mov	r0, r3
 8000528:	f005 fb30 	bl	8005b8c <siprintf>
	HAL_UART_Transmit(&huart2, message, sizeof(message), 100);
 800052c:	f107 010c 	add.w	r1, r7, #12
 8000530:	2364      	movs	r3, #100	; 0x64
 8000532:	2232      	movs	r2, #50	; 0x32
 8000534:	4806      	ldr	r0, [pc, #24]	; (8000550 <StartBlink01+0x64>)
 8000536:	f002 fa63 	bl	8002a00 <HAL_UART_Transmit>
    osDelay(10);
 800053a:	200a      	movs	r0, #10
 800053c:	f002 ff5c 	bl	80033f8 <osDelay>
  {
 8000540:	e7e5      	b.n	800050e <StartBlink01+0x22>
 8000542:	bf00      	nop
 8000544:	2000007c 	.word	0x2000007c
 8000548:	40011000 	.word	0x40011000
 800054c:	0800651c 	.word	0x0800651c
 8000550:	2000010c 	.word	0x2000010c

08000554 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8000554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000558:	b087      	sub	sp, #28
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800055e:	2100      	movs	r1, #0
 8000560:	4836      	ldr	r0, [pc, #216]	; (800063c <StartMotorTask+0xe8>)
 8000562:	f001 fbb5 	bl	8001cd0 <HAL_TIM_PWM_Start>
  int32_t dutyCycle = 100;
 8000566:	2364      	movs	r3, #100	; 0x64
 8000568:	617b      	str	r3, [r7, #20]
  uint8_t RxSize = 7;
 800056a:	2307      	movs	r3, #7
 800056c:	74bb      	strb	r3, [r7, #18]
  uint8_t i = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	74fb      	strb	r3, [r7, #19]
  uint8_t RxData[RxSize];
 8000572:	7cbe      	ldrb	r6, [r7, #18]
 8000574:	4633      	mov	r3, r6
 8000576:	3b01      	subs	r3, #1
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	b2f3      	uxtb	r3, r6
 800057c:	2200      	movs	r2, #0
 800057e:	4698      	mov	r8, r3
 8000580:	4691      	mov	r9, r2
 8000582:	f04f 0200 	mov.w	r2, #0
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800058e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000596:	b2f3      	uxtb	r3, r6
 8000598:	2200      	movs	r2, #0
 800059a:	461c      	mov	r4, r3
 800059c:	4615      	mov	r5, r2
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	f04f 0300 	mov.w	r3, #0
 80005a6:	00eb      	lsls	r3, r5, #3
 80005a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80005ac:	00e2      	lsls	r2, r4, #3
 80005ae:	4633      	mov	r3, r6
 80005b0:	3307      	adds	r3, #7
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	ebad 0d03 	sub.w	sp, sp, r3
 80005ba:	466b      	mov	r3, sp
 80005bc:	3300      	adds	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  i = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	74fb      	strb	r3, [r7, #19]
	  dutyCycle = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
	  HAL_UART_Receive_DMA(&huart2, RxData, sizeof(RxData));
 80005c8:	b2b3      	uxth	r3, r6
 80005ca:	461a      	mov	r2, r3
 80005cc:	68b9      	ldr	r1, [r7, #8]
 80005ce:	481c      	ldr	r0, [pc, #112]	; (8000640 <StartMotorTask+0xec>)
 80005d0:	f002 fa99 	bl	8002b06 <HAL_UART_Receive_DMA>
	  if(RxData[i]== '-')
 80005d4:	7cfb      	ldrb	r3, [r7, #19]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	5cd3      	ldrb	r3, [r2, r3]
 80005da:	2b2d      	cmp	r3, #45	; 0x2d
 80005dc:	d116      	bne.n	800060c <StartMotorTask+0xb8>
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005de:	2120      	movs	r1, #32
 80005e0:	4818      	ldr	r0, [pc, #96]	; (8000644 <StartMotorTask+0xf0>)
 80005e2:	f000 fefb 	bl	80013dc <HAL_GPIO_TogglePin>
	  	  i++;
 80005e6:	7cfb      	ldrb	r3, [r7, #19]
 80005e8:	3301      	adds	r3, #1
 80005ea:	74fb      	strb	r3, [r7, #19]
	  }

      while(RxData[i] != '\n' && i< sizeof(RxData))
 80005ec:	e00e      	b.n	800060c <StartMotorTask+0xb8>
      {
    	  dutyCycle = dutyCycle*10 + (RxData[i] - '0');
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	4613      	mov	r3, r2
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4619      	mov	r1, r3
 80005fa:	7cfb      	ldrb	r3, [r7, #19]
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	3b30      	subs	r3, #48	; 0x30
 8000602:	440b      	add	r3, r1
 8000604:	617b      	str	r3, [r7, #20]
      	  i++;
 8000606:	7cfb      	ldrb	r3, [r7, #19]
 8000608:	3301      	adds	r3, #1
 800060a:	74fb      	strb	r3, [r7, #19]
      while(RxData[i] != '\n' && i< sizeof(RxData))
 800060c:	7cfb      	ldrb	r3, [r7, #19]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	5cd3      	ldrb	r3, [r2, r3]
 8000612:	2b0a      	cmp	r3, #10
 8000614:	d002      	beq.n	800061c <StartMotorTask+0xc8>
 8000616:	7cfb      	ldrb	r3, [r7, #19]
 8000618:	42b3      	cmp	r3, r6
 800061a:	d3e8      	bcc.n	80005ee <StartMotorTask+0x9a>
      }

      if(dutyCycle < 45535)
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	f24b 12de 	movw	r2, #45534	; 0xb1de
 8000622:	4293      	cmp	r3, r2
 8000624:	dc03      	bgt.n	800062e <StartMotorTask+0xda>
      	  TIM3->CCR1 = dutyCycle;
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <StartMotorTask+0xf4>)
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	6353      	str	r3, [r2, #52]	; 0x34
 800062c:	e002      	b.n	8000634 <StartMotorTask+0xe0>
      else
    	  TIM3->CCR1 = 0;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <StartMotorTask+0xf4>)
 8000630:	2200      	movs	r2, #0
 8000632:	635a      	str	r2, [r3, #52]	; 0x34

      osDelay(250);
 8000634:	20fa      	movs	r0, #250	; 0xfa
 8000636:	f002 fedf 	bl	80033f8 <osDelay>
	  i = 0;
 800063a:	e7c1      	b.n	80005c0 <StartMotorTask+0x6c>
 800063c:	200000c4 	.word	0x200000c4
 8000640:	2000010c 	.word	0x2000010c
 8000644:	40010800 	.word	0x40010800
 8000648:	40000400 	.word	0x40000400

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	e7fe      	b.n	8000654 <Error_Handler+0x8>
	...

08000658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <HAL_MspInit+0x4c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a10      	ldr	r2, [pc, #64]	; (80006a4 <HAL_MspInit+0x4c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <HAL_MspInit+0x4c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <HAL_MspInit+0x4c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a0a      	ldr	r2, [pc, #40]	; (80006a4 <HAL_MspInit+0x4c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <HAL_MspInit+0x4c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	210f      	movs	r1, #15
 8000692:	f06f 0001 	mvn.w	r0, #1
 8000696:	f000 fae0 	bl	8000c5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006c6:	d12b      	bne.n	8000720 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <HAL_TIM_Encoder_MspInit+0x80>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	4a16      	ldr	r2, [pc, #88]	; (8000728 <HAL_TIM_Encoder_MspInit+0x80>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	61d3      	str	r3, [r2, #28]
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <HAL_TIM_Encoder_MspInit+0x80>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_TIM_Encoder_MspInit+0x80>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <HAL_TIM_Encoder_MspInit+0x80>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <HAL_TIM_Encoder_MspInit+0x80>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006f8:	2303      	movs	r3, #3
 80006fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <HAL_TIM_Encoder_MspInit+0x84>)
 800070c:	f000 fcca 	bl	80010a4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2105      	movs	r1, #5
 8000714:	201c      	movs	r0, #28
 8000716:	f000 faa0 	bl	8000c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800071a:	201c      	movs	r0, #28
 800071c:	f000 fab9 	bl	8000c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800

08000730 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <HAL_TIM_PWM_MspInit+0x34>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d10b      	bne.n	800075a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_TIM_PWM_MspInit+0x38>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_TIM_PWM_MspInit+0x38>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_TIM_PWM_MspInit+0x38>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40000400 	.word	0x40000400
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <HAL_TIM_MspPostInit+0x58>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d117      	bne.n	80007bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <HAL_TIM_MspPostInit+0x5c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <HAL_TIM_MspPostInit+0x5c>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <HAL_TIM_MspPostInit+0x5c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <HAL_TIM_MspPostInit+0x60>)
 80007b8:	f000 fc74 	bl	80010a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40000400 	.word	0x40000400
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010800 	.word	0x40010800

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a2e      	ldr	r2, [pc, #184]	; (80008a4 <HAL_UART_MspInit+0xd4>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d155      	bne.n	800089c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <HAL_UART_MspInit+0xd8>)
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	4a2c      	ldr	r2, [pc, #176]	; (80008a8 <HAL_UART_MspInit+0xd8>)
 80007f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fa:	61d3      	str	r3, [r2, #28]
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <HAL_UART_MspInit+0xd8>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <HAL_UART_MspInit+0xd8>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a26      	ldr	r2, [pc, #152]	; (80008a8 <HAL_UART_MspInit+0xd8>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <HAL_UART_MspInit+0xd8>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000820:	2304      	movs	r3, #4
 8000822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	481e      	ldr	r0, [pc, #120]	; (80008ac <HAL_UART_MspInit+0xdc>)
 8000834:	f000 fc36 	bl	80010a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000838:	2308      	movs	r3, #8
 800083a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	4818      	ldr	r0, [pc, #96]	; (80008ac <HAL_UART_MspInit+0xdc>)
 800084c:	f000 fc2a 	bl	80010a4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_UART_MspInit+0xe4>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 8000876:	2220      	movs	r2, #32
 8000878:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 8000882:	f000 fa21 	bl	8000cc8 <HAL_DMA_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800088c:	f7ff fede 	bl	800064c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 8000894:	63da      	str	r2, [r3, #60]	; 0x3c
 8000896:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_UART_MspInit+0xe0>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800
 80008b0:	20000154 	.word	0x20000154
 80008b4:	4002006c 	.word	0x4002006c

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e6:	f000 f8c5 	bl	8000a74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008ea:	f004 f991 	bl	8004c10 <xTaskGetSchedulerState>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d001      	beq.n	80008f8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008f4:	f004 fef0 	bl	80056d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <DMA1_Channel6_IRQHandler+0x10>)
 8000902:	f000 fa9b 	bl	8000e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000154 	.word	0x20000154

08000910 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <TIM2_IRQHandler+0x10>)
 8000916:	f001 fbad 	bl	8002074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000007c 	.word	0x2000007c

08000924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800092c:	4a14      	ldr	r2, [pc, #80]	; (8000980 <_sbrk+0x5c>)
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <_sbrk+0x60>)
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <_sbrk+0x64>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <_sbrk+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	d207      	bcs.n	8000964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000954:	f005 f942 	bl	8005bdc <__errno>
 8000958:	4603      	mov	r3, r0
 800095a:	220c      	movs	r2, #12
 800095c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000962:	e009      	b.n	8000978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <_sbrk+0x64>)
 8000974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20005000 	.word	0x20005000
 8000984:	00000400 	.word	0x00000400
 8000988:	200001a0 	.word	0x200001a0
 800098c:	20001c38 	.word	0x20001c38

08000990 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800099c:	f7ff fff8 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480b      	ldr	r0, [pc, #44]	; (80009d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009a2:	490c      	ldr	r1, [pc, #48]	; (80009d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009a4:	4a0c      	ldr	r2, [pc, #48]	; (80009d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a09      	ldr	r2, [pc, #36]	; (80009dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009b8:	4c09      	ldr	r4, [pc, #36]	; (80009e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f005 f90f 	bl	8005be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fbc1 	bl	8000150 <main>
  bx lr
 80009ce:	4770      	bx	lr
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009d8:	080065fc 	.word	0x080065fc
  ldr r2, =_sbss
 80009dc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009e0:	20001c38 	.word	0x20001c38

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x28>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x28>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f923 	bl	8000c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fe28 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f93b 	bl	8000cae <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a50:	f000 f903 	bl	8000c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <HAL_IncTick+0x20>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	20000008 	.word	0x20000008
 8000a94:	200001a4 	.word	0x200001a4

08000a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	200001a4 	.word	0x200001a4

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4906      	ldr	r1, [pc, #24]	; (8000b44 <__NVIC_EnableIRQ+0x34>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c10:	d301      	bcc.n	8000c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00f      	b.n	8000c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <SysTick_Config+0x40>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1e:	210f      	movs	r1, #15
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c24:	f7ff ff90 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <SysTick_Config+0x40>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SysTick_Config+0x40>)
 8000c30:	2207      	movs	r2, #7
 8000c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	e000e010 	.word	0xe000e010

08000c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ff2d 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	4603      	mov	r3, r0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c6c:	f7ff ff42 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68b9      	ldr	r1, [r7, #8]
 8000c76:	6978      	ldr	r0, [r7, #20]
 8000c78:	f7ff ff90 	bl	8000b9c <NVIC_EncodePriority>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff5f 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff35 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffa2 	bl	8000c00 <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e043      	b.n	8000d66 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <HAL_DMA_Init+0xa8>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a22      	ldr	r2, [pc, #136]	; (8000d74 <HAL_DMA_Init+0xac>)
 8000cea:	fba2 2303 	umull	r2, r3, r2, r3
 8000cee:	091b      	lsrs	r3, r3, #4
 8000cf0:	009a      	lsls	r2, r3, #2
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <HAL_DMA_Init+0xb0>)
 8000cfa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2202      	movs	r2, #2
 8000d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000d12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	bffdfff8 	.word	0xbffdfff8
 8000d74:	cccccccd 	.word	0xcccccccd
 8000d78:	40020000 	.word	0x40020000

08000d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d101      	bne.n	8000d9c <HAL_DMA_Start_IT+0x20>
 8000d98:	2302      	movs	r3, #2
 8000d9a:	e04b      	b.n	8000e34 <HAL_DMA_Start_IT+0xb8>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d13a      	bne.n	8000e26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2202      	movs	r2, #2
 8000db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 0201 	bic.w	r2, r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f000 f937 	bl	8001048 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d008      	beq.n	8000df4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 020e 	orr.w	r2, r2, #14
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e00f      	b.n	8000e14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0204 	bic.w	r2, r2, #4
 8000e02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 020a 	orr.w	r2, r2, #10
 8000e12:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0201 	orr.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	e005      	b.n	8000e32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	2204      	movs	r2, #4
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d04f      	beq.n	8000f04 <HAL_DMA_IRQHandler+0xc8>
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d04a      	beq.n	8000f04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0320 	and.w	r3, r3, #32
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d107      	bne.n	8000e8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a66      	ldr	r2, [pc, #408]	; (800102c <HAL_DMA_IRQHandler+0x1f0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d029      	beq.n	8000eea <HAL_DMA_IRQHandler+0xae>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a65      	ldr	r2, [pc, #404]	; (8001030 <HAL_DMA_IRQHandler+0x1f4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d022      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0xaa>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a63      	ldr	r2, [pc, #396]	; (8001034 <HAL_DMA_IRQHandler+0x1f8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d01a      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0xa4>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a62      	ldr	r2, [pc, #392]	; (8001038 <HAL_DMA_IRQHandler+0x1fc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d012      	beq.n	8000eda <HAL_DMA_IRQHandler+0x9e>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a60      	ldr	r2, [pc, #384]	; (800103c <HAL_DMA_IRQHandler+0x200>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00a      	beq.n	8000ed4 <HAL_DMA_IRQHandler+0x98>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a5f      	ldr	r2, [pc, #380]	; (8001040 <HAL_DMA_IRQHandler+0x204>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d102      	bne.n	8000ece <HAL_DMA_IRQHandler+0x92>
 8000ec8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ecc:	e00e      	b.n	8000eec <HAL_DMA_IRQHandler+0xb0>
 8000ece:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000ed2:	e00b      	b.n	8000eec <HAL_DMA_IRQHandler+0xb0>
 8000ed4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ed8:	e008      	b.n	8000eec <HAL_DMA_IRQHandler+0xb0>
 8000eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ede:	e005      	b.n	8000eec <HAL_DMA_IRQHandler+0xb0>
 8000ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee4:	e002      	b.n	8000eec <HAL_DMA_IRQHandler+0xb0>
 8000ee6:	2340      	movs	r3, #64	; 0x40
 8000ee8:	e000      	b.n	8000eec <HAL_DMA_IRQHandler+0xb0>
 8000eea:	2304      	movs	r3, #4
 8000eec:	4a55      	ldr	r2, [pc, #340]	; (8001044 <HAL_DMA_IRQHandler+0x208>)
 8000eee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 8094 	beq.w	8001022 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f02:	e08e      	b.n	8001022 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	2202      	movs	r2, #2
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d056      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x186>
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d051      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0320 	and.w	r3, r3, #32
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10b      	bne.n	8000f44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 020a 	bic.w	r2, r2, #10
 8000f3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a38      	ldr	r2, [pc, #224]	; (800102c <HAL_DMA_IRQHandler+0x1f0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d029      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x166>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a37      	ldr	r2, [pc, #220]	; (8001030 <HAL_DMA_IRQHandler+0x1f4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d022      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x162>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a35      	ldr	r2, [pc, #212]	; (8001034 <HAL_DMA_IRQHandler+0x1f8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01a      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x15c>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a34      	ldr	r2, [pc, #208]	; (8001038 <HAL_DMA_IRQHandler+0x1fc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d012      	beq.n	8000f92 <HAL_DMA_IRQHandler+0x156>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a32      	ldr	r2, [pc, #200]	; (800103c <HAL_DMA_IRQHandler+0x200>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00a      	beq.n	8000f8c <HAL_DMA_IRQHandler+0x150>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a31      	ldr	r2, [pc, #196]	; (8001040 <HAL_DMA_IRQHandler+0x204>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d102      	bne.n	8000f86 <HAL_DMA_IRQHandler+0x14a>
 8000f80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f84:	e00e      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x168>
 8000f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f8a:	e00b      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x168>
 8000f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f90:	e008      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x168>
 8000f92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f96:	e005      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x168>
 8000f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f9c:	e002      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x168>
 8000f9e:	2320      	movs	r3, #32
 8000fa0:	e000      	b.n	8000fa4 <HAL_DMA_IRQHandler+0x168>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	4a27      	ldr	r2, [pc, #156]	; (8001044 <HAL_DMA_IRQHandler+0x208>)
 8000fa6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d034      	beq.n	8001022 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000fc0:	e02f      	b.n	8001022 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d028      	beq.n	8001024 <HAL_DMA_IRQHandler+0x1e8>
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d023      	beq.n	8001024 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 020e 	bic.w	r2, r2, #14
 8000fea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	2b00      	cmp	r3, #0
 8001018:	d004      	beq.n	8001024 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	4798      	blx	r3
    }
  }
  return;
 8001022:	bf00      	nop
 8001024:	bf00      	nop
}
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40020008 	.word	0x40020008
 8001030:	4002001c 	.word	0x4002001c
 8001034:	40020030 	.word	0x40020030
 8001038:	40020044 	.word	0x40020044
 800103c:	40020058 	.word	0x40020058
 8001040:	4002006c 	.word	0x4002006c
 8001044:	40020000 	.word	0x40020000

08001048 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800105e:	2101      	movs	r1, #1
 8001060:	fa01 f202 	lsl.w	r2, r1, r2
 8001064:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b10      	cmp	r3, #16
 8001074:	d108      	bne.n	8001088 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001086:	e007      	b.n	8001098 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	60da      	str	r2, [r3, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b08b      	sub	sp, #44	; 0x2c
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	e169      	b.n	800138c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b8:	2201      	movs	r2, #1
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f040 8158 	bne.w	8001386 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	4a9a      	ldr	r2, [pc, #616]	; (8001344 <HAL_GPIO_Init+0x2a0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d05e      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 80010e0:	4a98      	ldr	r2, [pc, #608]	; (8001344 <HAL_GPIO_Init+0x2a0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d875      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 80010e6:	4a98      	ldr	r2, [pc, #608]	; (8001348 <HAL_GPIO_Init+0x2a4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d058      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 80010ec:	4a96      	ldr	r2, [pc, #600]	; (8001348 <HAL_GPIO_Init+0x2a4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d86f      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 80010f2:	4a96      	ldr	r2, [pc, #600]	; (800134c <HAL_GPIO_Init+0x2a8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d052      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 80010f8:	4a94      	ldr	r2, [pc, #592]	; (800134c <HAL_GPIO_Init+0x2a8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d869      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 80010fe:	4a94      	ldr	r2, [pc, #592]	; (8001350 <HAL_GPIO_Init+0x2ac>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d04c      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 8001104:	4a92      	ldr	r2, [pc, #584]	; (8001350 <HAL_GPIO_Init+0x2ac>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d863      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 800110a:	4a92      	ldr	r2, [pc, #584]	; (8001354 <HAL_GPIO_Init+0x2b0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d046      	beq.n	800119e <HAL_GPIO_Init+0xfa>
 8001110:	4a90      	ldr	r2, [pc, #576]	; (8001354 <HAL_GPIO_Init+0x2b0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d85d      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 8001116:	2b12      	cmp	r3, #18
 8001118:	d82a      	bhi.n	8001170 <HAL_GPIO_Init+0xcc>
 800111a:	2b12      	cmp	r3, #18
 800111c:	d859      	bhi.n	80011d2 <HAL_GPIO_Init+0x12e>
 800111e:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <HAL_GPIO_Init+0x80>)
 8001120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001124:	0800119f 	.word	0x0800119f
 8001128:	08001179 	.word	0x08001179
 800112c:	0800118b 	.word	0x0800118b
 8001130:	080011cd 	.word	0x080011cd
 8001134:	080011d3 	.word	0x080011d3
 8001138:	080011d3 	.word	0x080011d3
 800113c:	080011d3 	.word	0x080011d3
 8001140:	080011d3 	.word	0x080011d3
 8001144:	080011d3 	.word	0x080011d3
 8001148:	080011d3 	.word	0x080011d3
 800114c:	080011d3 	.word	0x080011d3
 8001150:	080011d3 	.word	0x080011d3
 8001154:	080011d3 	.word	0x080011d3
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011d3 	.word	0x080011d3
 8001160:	080011d3 	.word	0x080011d3
 8001164:	080011d3 	.word	0x080011d3
 8001168:	08001181 	.word	0x08001181
 800116c:	08001195 	.word	0x08001195
 8001170:	4a79      	ldr	r2, [pc, #484]	; (8001358 <HAL_GPIO_Init+0x2b4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001176:	e02c      	b.n	80011d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	623b      	str	r3, [r7, #32]
          break;
 800117e:	e029      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	3304      	adds	r3, #4
 8001186:	623b      	str	r3, [r7, #32]
          break;
 8001188:	e024      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	3308      	adds	r3, #8
 8001190:	623b      	str	r3, [r7, #32]
          break;
 8001192:	e01f      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	330c      	adds	r3, #12
 800119a:	623b      	str	r3, [r7, #32]
          break;
 800119c:	e01a      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011a6:	2304      	movs	r3, #4
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e013      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d105      	bne.n	80011c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b4:	2308      	movs	r3, #8
 80011b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	611a      	str	r2, [r3, #16]
          break;
 80011be:	e009      	b.n	80011d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011c0:	2308      	movs	r3, #8
 80011c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	615a      	str	r2, [r3, #20]
          break;
 80011ca:	e003      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x130>
          break;
 80011d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2bff      	cmp	r3, #255	; 0xff
 80011d8:	d801      	bhi.n	80011de <HAL_GPIO_Init+0x13a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	e001      	b.n	80011e2 <HAL_GPIO_Init+0x13e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3304      	adds	r3, #4
 80011e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2bff      	cmp	r3, #255	; 0xff
 80011e8:	d802      	bhi.n	80011f0 <HAL_GPIO_Init+0x14c>
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x152>
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	3b08      	subs	r3, #8
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	210f      	movs	r1, #15
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	401a      	ands	r2, r3
 8001208:	6a39      	ldr	r1, [r7, #32]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	431a      	orrs	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 80b1 	beq.w	8001386 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <HAL_GPIO_Init+0x2b8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a4c      	ldr	r2, [pc, #304]	; (800135c <HAL_GPIO_Init+0x2b8>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b4a      	ldr	r3, [pc, #296]	; (800135c <HAL_GPIO_Init+0x2b8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800123c:	4a48      	ldr	r2, [pc, #288]	; (8001360 <HAL_GPIO_Init+0x2bc>)
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001248:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a40      	ldr	r2, [pc, #256]	; (8001364 <HAL_GPIO_Init+0x2c0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d013      	beq.n	8001290 <HAL_GPIO_Init+0x1ec>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3f      	ldr	r2, [pc, #252]	; (8001368 <HAL_GPIO_Init+0x2c4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d00d      	beq.n	800128c <HAL_GPIO_Init+0x1e8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a3e      	ldr	r2, [pc, #248]	; (800136c <HAL_GPIO_Init+0x2c8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d007      	beq.n	8001288 <HAL_GPIO_Init+0x1e4>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a3d      	ldr	r2, [pc, #244]	; (8001370 <HAL_GPIO_Init+0x2cc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d101      	bne.n	8001284 <HAL_GPIO_Init+0x1e0>
 8001280:	2303      	movs	r3, #3
 8001282:	e006      	b.n	8001292 <HAL_GPIO_Init+0x1ee>
 8001284:	2304      	movs	r3, #4
 8001286:	e004      	b.n	8001292 <HAL_GPIO_Init+0x1ee>
 8001288:	2302      	movs	r3, #2
 800128a:	e002      	b.n	8001292 <HAL_GPIO_Init+0x1ee>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_GPIO_Init+0x1ee>
 8001290:	2300      	movs	r3, #0
 8001292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001294:	f002 0203 	and.w	r2, r2, #3
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	4093      	lsls	r3, r2
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012a2:	492f      	ldr	r1, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x2bc>)
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d006      	beq.n	80012ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	492c      	ldr	r1, [pc, #176]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	608b      	str	r3, [r1, #8]
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	4928      	ldr	r1, [pc, #160]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012e4:	4b23      	ldr	r3, [pc, #140]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	4922      	ldr	r1, [pc, #136]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60cb      	str	r3, [r1, #12]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	491e      	ldr	r1, [pc, #120]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4918      	ldr	r1, [pc, #96]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	43db      	mvns	r3, r3
 8001322:	4914      	ldr	r1, [pc, #80]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001324:	4013      	ands	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d021      	beq.n	8001378 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <HAL_GPIO_Init+0x2d0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
 8001340:	e021      	b.n	8001386 <HAL_GPIO_Init+0x2e2>
 8001342:	bf00      	nop
 8001344:	10320000 	.word	0x10320000
 8001348:	10310000 	.word	0x10310000
 800134c:	10220000 	.word	0x10220000
 8001350:	10210000 	.word	0x10210000
 8001354:	10120000 	.word	0x10120000
 8001358:	10110000 	.word	0x10110000
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000
 8001364:	40010800 	.word	0x40010800
 8001368:	40010c00 	.word	0x40010c00
 800136c:	40011000 	.word	0x40011000
 8001370:	40011400 	.word	0x40011400
 8001374:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_GPIO_Init+0x304>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	43db      	mvns	r3, r3
 8001380:	4909      	ldr	r1, [pc, #36]	; (80013a8 <HAL_GPIO_Init+0x304>)
 8001382:	4013      	ands	r3, r2
 8001384:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	3301      	adds	r3, #1
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	fa22 f303 	lsr.w	r3, r2, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	f47f ae8e 	bne.w	80010b8 <HAL_GPIO_Init+0x14>
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	372c      	adds	r7, #44	; 0x2c
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	40010400 	.word	0x40010400

080013ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
 80013b8:	4613      	mov	r3, r2
 80013ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013bc:	787b      	ldrb	r3, [r7, #1]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013c8:	e003      	b.n	80013d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	041a      	lsls	r2, r3, #16
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4013      	ands	r3, r2
 80013f4:	041a      	lsls	r2, r3, #16
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43d9      	mvns	r1, r3
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	400b      	ands	r3, r1
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	611a      	str	r2, [r3, #16]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
	...

08001410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e272      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8087 	beq.w	800153e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001430:	4b92      	ldr	r3, [pc, #584]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b04      	cmp	r3, #4
 800143a:	d00c      	beq.n	8001456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800143c:	4b8f      	ldr	r3, [pc, #572]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d112      	bne.n	800146e <HAL_RCC_OscConfig+0x5e>
 8001448:	4b8c      	ldr	r3, [pc, #560]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001454:	d10b      	bne.n	800146e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001456:	4b89      	ldr	r3, [pc, #548]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d06c      	beq.n	800153c <HAL_RCC_OscConfig+0x12c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d168      	bne.n	800153c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e24c      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x76>
 8001478:	4b80      	ldr	r3, [pc, #512]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a7f      	ldr	r2, [pc, #508]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e02e      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x98>
 800148e:	4b7b      	ldr	r3, [pc, #492]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a7a      	ldr	r2, [pc, #488]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b78      	ldr	r3, [pc, #480]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a77      	ldr	r2, [pc, #476]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0xbc>
 80014b2:	4b72      	ldr	r3, [pc, #456]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a71      	ldr	r2, [pc, #452]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6f      	ldr	r3, [pc, #444]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6e      	ldr	r2, [pc, #440]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 80014cc:	4b6b      	ldr	r3, [pc, #428]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a6a      	ldr	r2, [pc, #424]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b68      	ldr	r3, [pc, #416]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a67      	ldr	r2, [pc, #412]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fad4 	bl	8000a98 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fad0 	bl	8000a98 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e200      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5d      	ldr	r3, [pc, #372]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe4>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fac0 	bl	8000a98 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fabc 	bl	8000a98 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1ec      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x10c>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800154a:	4b4c      	ldr	r3, [pc, #304]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001556:	4b49      	ldr	r3, [pc, #292]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x18c>
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x176>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1c0      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4939      	ldr	r1, [pc, #228]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa75 	bl	8000a98 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fa71 	bl	8000a98 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1a1      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4927      	ldr	r1, [pc, #156]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_RCC_OscConfig+0x270>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fa54 	bl	8000a98 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fa50 	bl	8000a98 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e180      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d03a      	beq.n	8001694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d019      	beq.n	800165a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_RCC_OscConfig+0x274>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff fa34 	bl	8000a98 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fa30 	bl	8000a98 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e160      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_RCC_OscConfig+0x26c>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f000 face 	bl	8001bf4 <RCC_Delay>
 8001658:	e01c      	b.n	8001694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_RCC_OscConfig+0x274>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fa1a 	bl	8000a98 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001666:	e00f      	b.n	8001688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fa16 	bl	8000a98 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d908      	bls.n	8001688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e146      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	42420000 	.word	0x42420000
 8001684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	4b92      	ldr	r3, [pc, #584]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e9      	bne.n	8001668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a6 	beq.w	80017ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a6:	4b8b      	ldr	r3, [pc, #556]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10d      	bne.n	80016ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a87      	ldr	r2, [pc, #540]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b85      	ldr	r3, [pc, #532]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4b82      	ldr	r3, [pc, #520]	; (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d118      	bne.n	800170c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016da:	4b7f      	ldr	r3, [pc, #508]	; (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7e      	ldr	r2, [pc, #504]	; (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7ff f9d7 	bl	8000a98 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ee:	f7ff f9d3 	bl	8000a98 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	; 0x64
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e103      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	4b75      	ldr	r3, [pc, #468]	; (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x312>
 8001714:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a6e      	ldr	r2, [pc, #440]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	e02d      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x334>
 800172a:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a69      	ldr	r2, [pc, #420]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a66      	ldr	r2, [pc, #408]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	e01c      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d10c      	bne.n	8001766 <HAL_RCC_OscConfig+0x356>
 800174c:	4b61      	ldr	r3, [pc, #388]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4a60      	ldr	r2, [pc, #384]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6213      	str	r3, [r2, #32]
 8001758:	4b5e      	ldr	r3, [pc, #376]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a5d      	ldr	r2, [pc, #372]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	e00b      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001766:	4b5b      	ldr	r3, [pc, #364]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d015      	beq.n	80017b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff f987 	bl	8000a98 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff f983 	bl	8000a98 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0b1      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	4b4b      	ldr	r3, [pc, #300]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0ee      	beq.n	800178e <HAL_RCC_OscConfig+0x37e>
 80017b0:	e014      	b.n	80017dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff f971 	bl	8000a98 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff f96d 	bl	8000a98 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e09b      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ee      	bne.n	80017ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d105      	bne.n	80017ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e2:	4b3c      	ldr	r3, [pc, #240]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a3b      	ldr	r2, [pc, #236]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8087 	beq.w	8001906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d061      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d146      	bne.n	800189a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_RCC_OscConfig+0x4cc>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff f941 	bl	8000a98 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff f93d 	bl	8000a98 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e06d      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d108      	bne.n	8001854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	4921      	ldr	r1, [pc, #132]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a19      	ldr	r1, [r3, #32]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	430b      	orrs	r3, r1
 8001866:	491b      	ldr	r1, [pc, #108]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_RCC_OscConfig+0x4cc>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff f911 	bl	8000a98 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff f90d 	bl	8000a98 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e03d      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x46a>
 8001898:	e035      	b.n	8001906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_RCC_OscConfig+0x4cc>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff f8fa 	bl	8000a98 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f8f6 	bl	8000a98 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e026      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x498>
 80018c6:	e01e      	b.n	8001906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e019      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40007000 	.word	0x40007000
 80018dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_OscConfig+0x500>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0d0      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d910      	bls.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b67      	ldr	r3, [pc, #412]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	4965      	ldr	r1, [pc, #404]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0b8      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001970:	4b59      	ldr	r3, [pc, #356]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800197a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b50      	ldr	r3, [pc, #320]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	494d      	ldr	r1, [pc, #308]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d040      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b47      	ldr	r3, [pc, #284]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d115      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e07f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e073      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06b      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4936      	ldr	r1, [pc, #216]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff f848 	bl	8000a98 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff f844 	bl	8000a98 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e053      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d210      	bcs.n	8001a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 0207 	bic.w	r2, r3, #7
 8001a4a:	4922      	ldr	r1, [pc, #136]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e032      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4916      	ldr	r1, [pc, #88]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa2:	f000 f821 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	490a      	ldr	r1, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	5ccb      	ldrb	r3, [r1, r3]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe ffa6 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08006594 	.word	0x08006594
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x30>
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x36>
 8001b16:	e027      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b1a:	613b      	str	r3, [r7, #16]
      break;
 8001b1c:	e027      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d010      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	0c5b      	lsrs	r3, r3, #17
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	4a11      	ldr	r2, [pc, #68]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4a:	fb03 f202 	mul.w	r2, r3, r2
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e004      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	613b      	str	r3, [r7, #16]
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6a:	613b      	str	r3, [r7, #16]
      break;
 8001b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6e:	693b      	ldr	r3, [r7, #16]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	007a1200 	.word	0x007a1200
 8001b84:	080065ac 	.word	0x080065ac
 8001b88:	080065bc 	.word	0x080065bc
 8001b8c:	003d0900 	.word	0x003d0900

08001b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba8:	f7ff fff2 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	080065a4 	.word	0x080065a4

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bd0:	f7ff ffde 	bl	8001b90 <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	0adb      	lsrs	r3, r3, #11
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4903      	ldr	r1, [pc, #12]	; (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	080065a4 	.word	0x080065a4

08001bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <RCC_Delay+0x34>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <RCC_Delay+0x38>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c10:	bf00      	nop
  }
  while (Delay --);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	60fa      	str	r2, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <RCC_Delay+0x1c>
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e041      	b.n	8001cc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe fd6a 	bl	8000730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f000 fbf8 	bl	8002464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_TIM_PWM_Start+0x24>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	e022      	b.n	8001d3a <HAL_TIM_PWM_Start+0x6a>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d109      	bne.n	8001d0e <HAL_TIM_PWM_Start+0x3e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	e015      	b.n	8001d3a <HAL_TIM_PWM_Start+0x6a>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d109      	bne.n	8001d28 <HAL_TIM_PWM_Start+0x58>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e008      	b.n	8001d3a <HAL_TIM_PWM_Start+0x6a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e05e      	b.n	8001e00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d104      	bne.n	8001d52 <HAL_TIM_PWM_Start+0x82>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d50:	e013      	b.n	8001d7a <HAL_TIM_PWM_Start+0xaa>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_PWM_Start+0x92>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d60:	e00b      	b.n	8001d7a <HAL_TIM_PWM_Start+0xaa>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_PWM_Start+0xa2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d70:	e003      	b.n	8001d7a <HAL_TIM_PWM_Start+0xaa>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fd58 	bl	8002838 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <HAL_TIM_PWM_Start+0x138>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d107      	bne.n	8001da2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <HAL_TIM_PWM_Start+0x138>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00e      	beq.n	8001dca <HAL_TIM_PWM_Start+0xfa>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d009      	beq.n	8001dca <HAL_TIM_PWM_Start+0xfa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <HAL_TIM_PWM_Start+0x13c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d004      	beq.n	8001dca <HAL_TIM_PWM_Start+0xfa>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_TIM_PWM_Start+0x140>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d111      	bne.n	8001dee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d010      	beq.n	8001dfe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	e007      	b.n	8001dfe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40012c00 	.word	0x40012c00
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	40000800 	.word	0x40000800

08001e14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e093      	b.n	8001f50 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7fe fc33 	bl	80006a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2202      	movs	r2, #2
 8001e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e58:	f023 0307 	bic.w	r3, r3, #7
 8001e5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3304      	adds	r3, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f000 fafb 	bl	8002464 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e96:	f023 0303 	bic.w	r3, r3, #3
 8001e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001eb4:	f023 030c 	bic.w	r3, r3, #12
 8001eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	011a      	lsls	r2, r3, #4
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	031b      	lsls	r3, r3, #12
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ef2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	4313      	orrs	r3, r2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001f70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001f80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d110      	bne.n	8001faa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d102      	bne.n	8001f94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f8e:	7b7b      	ldrb	r3, [r7, #13]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d001      	beq.n	8001f98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e069      	b.n	800206c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa8:	e031      	b.n	800200e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d110      	bne.n	8001fd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fb0:	7bbb      	ldrb	r3, [r7, #14]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d102      	bne.n	8001fbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fb6:	7b3b      	ldrb	r3, [r7, #12]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d001      	beq.n	8001fc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e055      	b.n	800206c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fd0:	e01d      	b.n	800200e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d108      	bne.n	8001fea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d105      	bne.n	8001fea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001fde:	7b7b      	ldrb	r3, [r7, #13]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d102      	bne.n	8001fea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001fe4:	7b3b      	ldrb	r3, [r7, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e03e      	b.n	800206c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_TIM_Encoder_Start+0xc4>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b04      	cmp	r3, #4
 8002018:	d008      	beq.n	800202c <HAL_TIM_Encoder_Start+0xd4>
 800201a:	e00f      	b.n	800203c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fc07 	bl	8002838 <TIM_CCxChannelCmd>
      break;
 800202a:	e016      	b.n	800205a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	2104      	movs	r1, #4
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fbff 	bl	8002838 <TIM_CCxChannelCmd>
      break;
 800203a:	e00e      	b.n	800205a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f000 fbf7 	bl	8002838 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2201      	movs	r2, #1
 8002050:	2104      	movs	r1, #4
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fbf0 	bl	8002838 <TIM_CCxChannelCmd>
      break;
 8002058:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b02      	cmp	r3, #2
 8002088:	d122      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b02      	cmp	r3, #2
 8002096:	d11b      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0202 	mvn.w	r2, #2
 80020a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f9b8 	bl	800242c <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f9ab 	bl	800241a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f9ba 	bl	800243e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d122      	bne.n	8002124 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d11b      	bne.n	8002124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0204 	mvn.w	r2, #4
 80020f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f98e 	bl	800242c <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f981 	bl	800241a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f990 	bl	800243e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b08      	cmp	r3, #8
 8002130:	d122      	bne.n	8002178 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b08      	cmp	r3, #8
 800213e:	d11b      	bne.n	8002178 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0208 	mvn.w	r2, #8
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2204      	movs	r2, #4
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f964 	bl	800242c <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f957 	bl	800241a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f966 	bl	800243e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0310 	and.w	r3, r3, #16
 8002182:	2b10      	cmp	r3, #16
 8002184:	d122      	bne.n	80021cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	2b10      	cmp	r3, #16
 8002192:	d11b      	bne.n	80021cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0210 	mvn.w	r2, #16
 800219c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2208      	movs	r2, #8
 80021a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f93a 	bl	800242c <HAL_TIM_IC_CaptureCallback>
 80021b8:	e005      	b.n	80021c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f92d 	bl	800241a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f93c 	bl	800243e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10e      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d107      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0201 	mvn.w	r2, #1
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f908 	bl	8002408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002202:	2b80      	cmp	r3, #128	; 0x80
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800221c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fb95 	bl	800294e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222e:	2b40      	cmp	r3, #64	; 0x40
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d107      	bne.n	8002250 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f900 	bl	8002450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0320 	and.w	r3, r3, #32
 800225a:	2b20      	cmp	r3, #32
 800225c:	d10e      	bne.n	800227c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b20      	cmp	r3, #32
 800226a:	d107      	bne.n	800227c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0220 	mvn.w	r2, #32
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fb60 	bl	800293c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800229e:	2302      	movs	r3, #2
 80022a0:	e0ae      	b.n	8002400 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	f200 809f 	bhi.w	80023f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022b2:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	080022ed 	.word	0x080022ed
 80022bc:	080023f1 	.word	0x080023f1
 80022c0:	080023f1 	.word	0x080023f1
 80022c4:	080023f1 	.word	0x080023f1
 80022c8:	0800232d 	.word	0x0800232d
 80022cc:	080023f1 	.word	0x080023f1
 80022d0:	080023f1 	.word	0x080023f1
 80022d4:	080023f1 	.word	0x080023f1
 80022d8:	0800236f 	.word	0x0800236f
 80022dc:	080023f1 	.word	0x080023f1
 80022e0:	080023f1 	.word	0x080023f1
 80022e4:	080023f1 	.word	0x080023f1
 80022e8:	080023af 	.word	0x080023af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f918 	bl	8002528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0208 	orr.w	r2, r2, #8
 8002306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0204 	bic.w	r2, r2, #4
 8002316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6999      	ldr	r1, [r3, #24]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	619a      	str	r2, [r3, #24]
      break;
 800232a:	e064      	b.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f95e 	bl	80025f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6999      	ldr	r1, [r3, #24]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	021a      	lsls	r2, r3, #8
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	619a      	str	r2, [r3, #24]
      break;
 800236c:	e043      	b.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f9a7 	bl	80026c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0208 	orr.w	r2, r2, #8
 8002388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0204 	bic.w	r2, r2, #4
 8002398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69d9      	ldr	r1, [r3, #28]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	61da      	str	r2, [r3, #28]
      break;
 80023ac:	e023      	b.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f9f1 	bl	800279c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69d9      	ldr	r1, [r3, #28]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	021a      	lsls	r2, r3, #8
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	61da      	str	r2, [r3, #28]
      break;
 80023ee:	e002      	b.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	75fb      	strb	r3, [r7, #23]
      break;
 80023f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
	...

08002464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a29      	ldr	r2, [pc, #164]	; (800251c <TIM_Base_SetConfig+0xb8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00b      	beq.n	8002494 <TIM_Base_SetConfig+0x30>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002482:	d007      	beq.n	8002494 <TIM_Base_SetConfig+0x30>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a26      	ldr	r2, [pc, #152]	; (8002520 <TIM_Base_SetConfig+0xbc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d003      	beq.n	8002494 <TIM_Base_SetConfig+0x30>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a25      	ldr	r2, [pc, #148]	; (8002524 <TIM_Base_SetConfig+0xc0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d108      	bne.n	80024a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a1c      	ldr	r2, [pc, #112]	; (800251c <TIM_Base_SetConfig+0xb8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00b      	beq.n	80024c6 <TIM_Base_SetConfig+0x62>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b4:	d007      	beq.n	80024c6 <TIM_Base_SetConfig+0x62>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <TIM_Base_SetConfig+0xbc>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d003      	beq.n	80024c6 <TIM_Base_SetConfig+0x62>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <TIM_Base_SetConfig+0xc0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d108      	bne.n	80024d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <TIM_Base_SetConfig+0xb8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d103      	bne.n	800250c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	615a      	str	r2, [r3, #20]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40000400 	.word	0x40000400
 8002524:	40000800 	.word	0x40000800

08002528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	f023 0201 	bic.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f023 0302 	bic.w	r3, r3, #2
 8002570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a1c      	ldr	r2, [pc, #112]	; (80025f0 <TIM_OC1_SetConfig+0xc8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d10c      	bne.n	800259e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f023 0308 	bic.w	r3, r3, #8
 800258a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a13      	ldr	r2, [pc, #76]	; (80025f0 <TIM_OC1_SetConfig+0xc8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d111      	bne.n	80025ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	621a      	str	r2, [r3, #32]
}
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40012c00 	.word	0x40012c00

080025f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	f023 0210 	bic.w	r2, r3, #16
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f023 0320 	bic.w	r3, r3, #32
 800263e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a1d      	ldr	r2, [pc, #116]	; (80026c4 <TIM_OC2_SetConfig+0xd0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10d      	bne.n	8002670 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800265a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800266e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <TIM_OC2_SetConfig+0xd0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d113      	bne.n	80026a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800267e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	621a      	str	r2, [r3, #32]
}
 80026ba:	bf00      	nop
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40012c00 	.word	0x40012c00

080026c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <TIM_OC3_SetConfig+0xd0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10d      	bne.n	8002742 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800272c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <TIM_OC3_SetConfig+0xd0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d113      	bne.n	8002772 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40012c00 	.word	0x40012c00

0800279c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	031b      	lsls	r3, r3, #12
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <TIM_OC4_SetConfig+0x98>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d109      	bne.n	8002810 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	621a      	str	r2, [r3, #32]
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00

08002838 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2201      	movs	r2, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a1a      	ldr	r2, [r3, #32]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	43db      	mvns	r3, r3
 800285a:	401a      	ands	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1a      	ldr	r2, [r3, #32]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002894:	2302      	movs	r3, #2
 8002896:	e046      	b.n	8002926 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e4:	d009      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a10      	ldr	r2, [pc, #64]	; (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10c      	bne.n	8002914 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	4313      	orrs	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400
 8002938:	40000800 	.word	0x40000800

0800293c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e042      	b.n	80029f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fd ff22 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2224      	movs	r2, #36	; 0x24
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fb89 	bl	80030bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d16d      	bne.n	8002afc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Transmit+0x2c>
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e066      	b.n	8002afe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2221      	movs	r2, #33	; 0x21
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a3e:	f7fe f82b 	bl	8000a98 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	88fa      	ldrh	r2, [r7, #6]
 8002a48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a58:	d108      	bne.n	8002a6c <HAL_UART_Transmit+0x6c>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e003      	b.n	8002a74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a74:	e02a      	b.n	8002acc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f989 	bl	8002d98 <UART_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e036      	b.n	8002afe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10b      	bne.n	8002aae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e007      	b.n	8002abe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	3301      	adds	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1cf      	bne.n	8002a76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2140      	movs	r1, #64	; 0x40
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f959 	bl	8002d98 <UART_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e006      	b.n	8002afe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	4613      	mov	r3, r2
 8002b12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d112      	bne.n	8002b46 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_UART_Receive_DMA+0x26>
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e00b      	b.n	8002b48 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f999 	bl	8002e74 <UART_Start_Receive_DMA>
 8002b42:	4603      	mov	r3, r0
 8002b44:	e000      	b.n	8002b48 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b09c      	sub	sp, #112	; 0x70
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d172      	bne.n	8002c9e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bba:	2200      	movs	r2, #0
 8002bbc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	330c      	adds	r3, #12
 8002bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc8:	e853 3f00 	ldrex	r3, [r3]
 8002bcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002bde:	65ba      	str	r2, [r7, #88]	; 0x58
 8002be0:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002be4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002be6:	e841 2300 	strex	r3, r2, [r1]
 8002bea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e5      	bne.n	8002bbe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3314      	adds	r3, #20
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	e853 3f00 	ldrex	r3, [r3]
 8002c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	667b      	str	r3, [r7, #100]	; 0x64
 8002c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3314      	adds	r3, #20
 8002c10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c12:	647a      	str	r2, [r7, #68]	; 0x44
 8002c14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c1a:	e841 2300 	strex	r3, r2, [r1]
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1e5      	bne.n	8002bf2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3314      	adds	r3, #20
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	623b      	str	r3, [r7, #32]
   return(result);
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3314      	adds	r3, #20
 8002c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c46:	633a      	str	r2, [r7, #48]	; 0x30
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c4e:	e841 2300 	strex	r3, r2, [r1]
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e5      	bne.n	8002c26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d119      	bne.n	8002c9e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f023 0310 	bic.w	r3, r3, #16
 8002c80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c8a:	61fa      	str	r2, [r7, #28]
 8002c8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	617b      	str	r3, [r7, #20]
   return(result);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002cb4:	f7ff ff67 	bl	8002b86 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002cb8:	e002      	b.n	8002cc0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002cba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002cbc:	f7ff ff48 	bl	8002b50 <HAL_UART_RxCpltCallback>
}
 8002cc0:	bf00      	nop
 8002cc2:	3770      	adds	r7, #112	; 0x70
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7ff ff49 	bl	8002b86 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002cf4:	e002      	b.n	8002cfc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff ff33 	bl	8002b62 <HAL_UART_RxHalfCpltCallback>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b21      	cmp	r3, #33	; 0x21
 8002d36:	d108      	bne.n	8002d4a <UART_DMAError+0x46>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d44:	68b8      	ldr	r0, [r7, #8]
 8002d46:	f000 f92f 	bl	8002fa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b22      	cmp	r3, #34	; 0x22
 8002d6a:	d108      	bne.n	8002d7e <UART_DMAError+0x7a>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2200      	movs	r2, #0
 8002d76:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d78:	68b8      	ldr	r0, [r7, #8]
 8002d7a:	f000 f93c 	bl	8002ff6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d8a:	68b8      	ldr	r0, [r7, #8]
 8002d8c:	f7ff fef2 	bl	8002b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b090      	sub	sp, #64	; 0x40
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da8:	e050      	b.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db0:	d04c      	beq.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002db8:	f7fd fe6e 	bl	8000a98 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d241      	bcs.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002de8:	637a      	str	r2, [r7, #52]	; 0x34
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e5      	bne.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3314      	adds	r3, #20
 8002e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3314      	adds	r3, #20
 8002e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e1c:	623a      	str	r2, [r7, #32]
 8002e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e5      	bne.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e00f      	b.n	8002e6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d09f      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3740      	adds	r7, #64	; 0x40
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b098      	sub	sp, #96	; 0x60
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2222      	movs	r2, #34	; 0x22
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	4a3e      	ldr	r2, [pc, #248]	; (8002f9c <UART_Start_Receive_DMA+0x128>)
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	4a3d      	ldr	r2, [pc, #244]	; (8002fa0 <UART_Start_Receive_DMA+0x12c>)
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	4a3c      	ldr	r2, [pc, #240]	; (8002fa4 <UART_Start_Receive_DMA+0x130>)
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	2200      	movs	r2, #0
 8002eba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002ebc:	f107 0308 	add.w	r3, r7, #8
 8002ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	f7fd ff52 	bl	8000d7c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d019      	beq.n	8002f2a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f16:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f1e:	e841 2300 	strex	r3, r2, [r1]
 8002f22:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e5      	bne.n	8002ef6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	657b      	str	r3, [r7, #84]	; 0x54
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3314      	adds	r3, #20
 8002f48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e5      	bne.n	8002f2a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3314      	adds	r3, #20
 8002f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	e853 3f00 	ldrex	r3, [r3]
 8002f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f74:	653b      	str	r3, [r7, #80]	; 0x50
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3314      	adds	r3, #20
 8002f7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002f7e:	627a      	str	r2, [r7, #36]	; 0x24
 8002f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f82:	6a39      	ldr	r1, [r7, #32]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	e841 2300 	strex	r3, r2, [r1]
 8002f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e5      	bne.n	8002f5e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3760      	adds	r7, #96	; 0x60
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	08002b9d 	.word	0x08002b9d
 8002fa0:	08002cc9 	.word	0x08002cc9
 8002fa4:	08002d05 	.word	0x08002d05

08002fa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	61ba      	str	r2, [r7, #24]
 8002fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6979      	ldr	r1, [r7, #20]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e5      	bne.n	8002fb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002fec:	bf00      	nop
 8002fee:	3724      	adds	r7, #36	; 0x24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b095      	sub	sp, #84	; 0x54
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	e853 3f00 	ldrex	r3, [r3]
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	330c      	adds	r3, #12
 800301c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800301e:	643a      	str	r2, [r7, #64]	; 0x40
 8003020:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003024:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e5      	bne.n	8002ffe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3314      	adds	r3, #20
 8003038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	61fb      	str	r3, [r7, #28]
   return(result);
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	64bb      	str	r3, [r7, #72]	; 0x48
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3314      	adds	r3, #20
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e5      	bne.n	8003032 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	2b01      	cmp	r3, #1
 800306c:	d119      	bne.n	80030a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	60bb      	str	r3, [r7, #8]
   return(result);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f023 0310 	bic.w	r3, r3, #16
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	330c      	adds	r3, #12
 800308c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800308e:	61ba      	str	r2, [r7, #24]
 8003090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	613b      	str	r3, [r7, #16]
   return(result);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e5      	bne.n	800306e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030b0:	bf00      	nop
 80030b2:	3754      	adds	r7, #84	; 0x54
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
	...

080030bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030f6:	f023 030c 	bic.w	r3, r3, #12
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	430b      	orrs	r3, r1
 8003102:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <UART_SetConfig+0x114>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d103      	bne.n	800312c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003124:	f7fe fd52 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	e002      	b.n	8003132 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800312c:	f7fe fd3a 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8003130:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009a      	lsls	r2, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	4a22      	ldr	r2, [pc, #136]	; (80031d4 <UART_SetConfig+0x118>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	0119      	lsls	r1, r3, #4
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <UART_SetConfig+0x118>)
 800316a:	fba3 0302 	umull	r0, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2064      	movs	r0, #100	; 0x64
 8003172:	fb00 f303 	mul.w	r3, r0, r3
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	3332      	adds	r3, #50	; 0x32
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <UART_SetConfig+0x118>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003188:	4419      	add	r1, r3
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <UART_SetConfig+0x118>)
 80031a2:	fba3 0302 	umull	r0, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2064      	movs	r0, #100	; 0x64
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	3332      	adds	r3, #50	; 0x32
 80031b4:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <UART_SetConfig+0x118>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	f003 020f 	and.w	r2, r3, #15
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	440a      	add	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40013800 	.word	0x40013800
 80031d4:	51eb851f 	.word	0x51eb851f

080031d8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031de:	f3ef 8305 	mrs	r3, IPSR
 80031e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80031e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10f      	bne.n	800320a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ea:	f3ef 8310 	mrs	r3, PRIMASK
 80031ee:	607b      	str	r3, [r7, #4]
  return(result);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <osKernelInitialize+0x32>
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <osKernelInitialize+0x60>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d109      	bne.n	8003212 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003202:	603b      	str	r3, [r7, #0]
  return(result);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800320a:	f06f 0305 	mvn.w	r3, #5
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e00c      	b.n	800322c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <osKernelInitialize+0x60>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <osKernelInitialize+0x60>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e002      	b.n	800322c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800322a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800322c:	68fb      	ldr	r3, [r7, #12]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	200001a8 	.word	0x200001a8

0800323c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003242:	f3ef 8305 	mrs	r3, IPSR
 8003246:	60bb      	str	r3, [r7, #8]
  return(result);
 8003248:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324e:	f3ef 8310 	mrs	r3, PRIMASK
 8003252:	607b      	str	r3, [r7, #4]
  return(result);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <osKernelStart+0x32>
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <osKernelStart+0x64>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d109      	bne.n	8003276 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003262:	f3ef 8311 	mrs	r3, BASEPRI
 8003266:	603b      	str	r3, [r7, #0]
  return(result);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <osKernelStart+0x3a>
    stat = osErrorISR;
 800326e:	f06f 0305 	mvn.w	r3, #5
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e00e      	b.n	8003294 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <osKernelStart+0x64>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <osKernelStart+0x64>)
 8003280:	2202      	movs	r2, #2
 8003282:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003284:	f001 f878 	bl	8004378 <vTaskStartScheduler>
      stat = osOK;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e002      	b.n	8003294 <osKernelStart+0x58>
    } else {
      stat = osError;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003292:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003294:	68fb      	ldr	r3, [r7, #12]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200001a8 	.word	0x200001a8

080032a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b092      	sub	sp, #72	; 0x48
 80032a8:	af04      	add	r7, sp, #16
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032b4:	f3ef 8305 	mrs	r3, IPSR
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 8094 	bne.w	80033ea <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c2:	f3ef 8310 	mrs	r3, PRIMASK
 80032c6:	623b      	str	r3, [r7, #32]
  return(result);
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 808d 	bne.w	80033ea <osThreadNew+0x146>
 80032d0:	4b48      	ldr	r3, [pc, #288]	; (80033f4 <osThreadNew+0x150>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d106      	bne.n	80032e6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032d8:	f3ef 8311 	mrs	r3, BASEPRI
 80032dc:	61fb      	str	r3, [r7, #28]
  return(result);
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f040 8082 	bne.w	80033ea <osThreadNew+0x146>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d07e      	beq.n	80033ea <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80032f0:	2318      	movs	r3, #24
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80032f4:	2300      	movs	r3, #0
 80032f6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80032f8:	f107 031b 	add.w	r3, r7, #27
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d045      	beq.n	8003396 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <osThreadNew+0x74>
        name = attr->name;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <osThreadNew+0x9a>
 800332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332e:	2b38      	cmp	r3, #56	; 0x38
 8003330:	d805      	bhi.n	800333e <osThreadNew+0x9a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <osThreadNew+0x9e>
        return (NULL);
 800333e:	2300      	movs	r3, #0
 8003340:	e054      	b.n	80033ec <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00e      	beq.n	8003378 <osThreadNew+0xd4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b5b      	cmp	r3, #91	; 0x5b
 8003360:	d90a      	bls.n	8003378 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003366:	2b00      	cmp	r3, #0
 8003368:	d006      	beq.n	8003378 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <osThreadNew+0xd4>
        mem = 1;
 8003372:	2301      	movs	r3, #1
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
 8003376:	e010      	b.n	800339a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10c      	bne.n	800339a <osThreadNew+0xf6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d108      	bne.n	800339a <osThreadNew+0xf6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d104      	bne.n	800339a <osThreadNew+0xf6>
          mem = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
 8003394:	e001      	b.n	800339a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	2b01      	cmp	r3, #1
 800339e:	d110      	bne.n	80033c2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033a8:	9202      	str	r2, [sp, #8]
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fe12 	bl	8003fe0 <xTaskCreateStatic>
 80033bc:	4603      	mov	r3, r0
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	e013      	b.n	80033ea <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d110      	bne.n	80033ea <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fe5c 	bl	8004098 <xTaskCreate>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d001      	beq.n	80033ea <osThreadNew+0x146>
          hTask = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033ea:	697b      	ldr	r3, [r7, #20]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3738      	adds	r7, #56	; 0x38
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200001a8 	.word	0x200001a8

080033f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003400:	f3ef 8305 	mrs	r3, IPSR
 8003404:	613b      	str	r3, [r7, #16]
  return(result);
 8003406:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10f      	bne.n	800342c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340c:	f3ef 8310 	mrs	r3, PRIMASK
 8003410:	60fb      	str	r3, [r7, #12]
  return(result);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <osDelay+0x34>
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <osDelay+0x58>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d109      	bne.n	8003434 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003420:	f3ef 8311 	mrs	r3, BASEPRI
 8003424:	60bb      	str	r3, [r7, #8]
  return(result);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <osDelay+0x3c>
    stat = osErrorISR;
 800342c:	f06f 0305 	mvn.w	r3, #5
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e007      	b.n	8003444 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <osDelay+0x4c>
      vTaskDelay(ticks);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 ff66 	bl	8004310 <vTaskDelay>
    }
  }

  return (stat);
 8003444:	697b      	ldr	r3, [r7, #20]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200001a8 	.word	0x200001a8

08003454 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a06      	ldr	r2, [pc, #24]	; (800347c <vApplicationGetIdleTaskMemory+0x28>)
 8003464:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4a05      	ldr	r2, [pc, #20]	; (8003480 <vApplicationGetIdleTaskMemory+0x2c>)
 800346a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	601a      	str	r2, [r3, #0]
}
 8003472:	bf00      	nop
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	200001ac 	.word	0x200001ac
 8003480:	20000208 	.word	0x20000208

08003484 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a07      	ldr	r2, [pc, #28]	; (80034b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003494:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4a06      	ldr	r2, [pc, #24]	; (80034b4 <vApplicationGetTimerTaskMemory+0x30>)
 800349a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a2:	601a      	str	r2, [r3, #0]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000408 	.word	0x20000408
 80034b4:	20000464 	.word	0x20000464

080034b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f103 0208 	add.w	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f103 0208 	add.w	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 0208 	add.w	r2, r3, #8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800356a:	d103      	bne.n	8003574 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e00c      	b.n	800358e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3308      	adds	r3, #8
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e002      	b.n	8003582 <vListInsert+0x2e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	d2f6      	bcs.n	800357c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6892      	ldr	r2, [r2, #8]
 80035da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6852      	ldr	r2, [r2, #4]
 80035e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d103      	bne.n	80035f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
	...

08003618 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800363e:	bf00      	nop
 8003640:	e7fe      	b.n	8003640 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003642:	f001 ffcb 	bl	80055dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	441a      	add	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	3b01      	subs	r3, #1
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	441a      	add	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	22ff      	movs	r2, #255	; 0xff
 8003686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d114      	bne.n	80036c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01a      	beq.n	80036d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3310      	adds	r3, #16
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 f8f1 	bl	800488c <xTaskRemoveFromEventList>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d012      	beq.n	80036d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <xQueueGenericReset+0xcc>)
 80036b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	e009      	b.n	80036d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3310      	adds	r3, #16
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fef6 	bl	80034b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3324      	adds	r3, #36	; 0x24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fef1 	bl	80034b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036d6:	f001 ffb1 	bl	800563c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
}
 800372a:	bf00      	nop
 800372c:	e7fe      	b.n	800372c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <xQueueGenericCreateStatic+0x52>
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <xQueueGenericCreateStatic+0x56>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <xQueueGenericCreateStatic+0x58>
 800373e:	2300      	movs	r3, #0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	623b      	str	r3, [r7, #32]
}
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <xQueueGenericCreateStatic+0x7e>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <xQueueGenericCreateStatic+0x82>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <xQueueGenericCreateStatic+0x84>
 800376a:	2300      	movs	r3, #0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	61fb      	str	r3, [r7, #28]
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003786:	2350      	movs	r3, #80	; 0x50
 8003788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b50      	cmp	r3, #80	; 0x50
 800378e:	d00a      	beq.n	80037a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	61bb      	str	r3, [r7, #24]
}
 80037a2:	bf00      	nop
 80037a4:	e7fe      	b.n	80037a4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00d      	beq.n	80037cc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037b8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f805 	bl	80037d6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3730      	adds	r7, #48	; 0x30
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d103      	bne.n	80037f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e002      	b.n	80037f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003804:	2101      	movs	r1, #1
 8003806:	69b8      	ldr	r0, [r7, #24]
 8003808:	f7ff ff06 	bl	8003618 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003814:	bf00      	nop
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08e      	sub	sp, #56	; 0x38
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <xQueueGenericSend+0x32>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d103      	bne.n	800385c <xQueueGenericSend+0x40>
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <xQueueGenericSend+0x44>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <xQueueGenericSend+0x46>
 8003860:	2300      	movs	r3, #0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <xQueueGenericSend+0x60>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d103      	bne.n	800388a <xQueueGenericSend+0x6e>
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <xQueueGenericSend+0x72>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <xQueueGenericSend+0x74>
 800388e:	2300      	movs	r3, #0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xQueueGenericSend+0x8e>
	__asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	623b      	str	r3, [r7, #32]
}
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038aa:	f001 f9b1 	bl	8004c10 <xTaskGetSchedulerState>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <xQueueGenericSend+0x9e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <xQueueGenericSend+0xa2>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <xQueueGenericSend+0xa4>
 80038be:	2300      	movs	r3, #0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <xQueueGenericSend+0xbe>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	61fb      	str	r3, [r7, #28]
}
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038da:	f001 fe7f 	bl	80055dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <xQueueGenericSend+0xd4>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d129      	bne.n	8003944 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038f6:	f000 fa07 	bl	8003d08 <prvCopyDataToQueue>
 80038fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	d010      	beq.n	8003926 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	3324      	adds	r3, #36	; 0x24
 8003908:	4618      	mov	r0, r3
 800390a:	f000 ffbf 	bl	800488c <xTaskRemoveFromEventList>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003914:	4b3f      	ldr	r3, [pc, #252]	; (8003a14 <xQueueGenericSend+0x1f8>)
 8003916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	e00a      	b.n	800393c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800392c:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <xQueueGenericSend+0x1f8>)
 800392e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800393c:	f001 fe7e 	bl	800563c <vPortExitCritical>
				return pdPASS;
 8003940:	2301      	movs	r3, #1
 8003942:	e063      	b.n	8003a0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800394a:	f001 fe77 	bl	800563c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800394e:	2300      	movs	r3, #0
 8003950:	e05c      	b.n	8003a0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fff9 	bl	8004954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003962:	2301      	movs	r3, #1
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003966:	f001 fe69 	bl	800563c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800396a:	f000 fd6b 	bl	8004444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800396e:	f001 fe35 	bl	80055dc <vPortEnterCritical>
 8003972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003978:	b25b      	sxtb	r3, r3
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800397e:	d103      	bne.n	8003988 <xQueueGenericSend+0x16c>
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800398e:	b25b      	sxtb	r3, r3
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003994:	d103      	bne.n	800399e <xQueueGenericSend+0x182>
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800399e:	f001 fe4d 	bl	800563c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039a2:	1d3a      	adds	r2, r7, #4
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 ffe8 	bl	8004980 <xTaskCheckForTimeOut>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d124      	bne.n	8003a00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039b8:	f000 fa9e 	bl	8003ef8 <prvIsQueueFull>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	3310      	adds	r3, #16
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 ff0e 	bl	80047ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039d2:	f000 fa29 	bl	8003e28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039d6:	f000 fd43 	bl	8004460 <xTaskResumeAll>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f47f af7c 	bne.w	80038da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80039e2:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <xQueueGenericSend+0x1f8>)
 80039e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	e772      	b.n	80038da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039f6:	f000 fa17 	bl	8003e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039fa:	f000 fd31 	bl	8004460 <xTaskResumeAll>
 80039fe:	e76c      	b.n	80038da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a02:	f000 fa11 	bl	8003e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a06:	f000 fd2b 	bl	8004460 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a0a:	2300      	movs	r3, #0
		}
	}
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3738      	adds	r7, #56	; 0x38
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	e000ed04 	.word	0xe000ed04

08003a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d103      	bne.n	8003a54 <xQueueGenericSendFromISR+0x3c>
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <xQueueGenericSendFromISR+0x40>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <xQueueGenericSendFromISR+0x42>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	623b      	str	r3, [r7, #32]
}
 8003a70:	bf00      	nop
 8003a72:	e7fe      	b.n	8003a72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d103      	bne.n	8003a82 <xQueueGenericSendFromISR+0x6a>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <xQueueGenericSendFromISR+0x6e>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <xQueueGenericSendFromISR+0x70>
 8003a86:	2300      	movs	r3, #0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	61fb      	str	r3, [r7, #28]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003aa2:	f001 fe5d 	bl	8005760 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	61ba      	str	r2, [r7, #24]
 8003abc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003abe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <xQueueGenericSendFromISR+0xbc>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d12c      	bne.n	8003b2e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ae4:	f000 f910 	bl	8003d08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ae8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af0:	d112      	bne.n	8003b18 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	3324      	adds	r3, #36	; 0x24
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fec4 	bl	800488c <xTaskRemoveFromEventList>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00e      	beq.n	8003b28 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e007      	b.n	8003b28 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	b25a      	sxtb	r2, r3
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b2c:	e001      	b.n	8003b32 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3738      	adds	r7, #56	; 0x38
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	; 0x30
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <xQueueReceive+0x30>
	__asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	623b      	str	r3, [r7, #32]
}
 8003b74:	bf00      	nop
 8003b76:	e7fe      	b.n	8003b76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d103      	bne.n	8003b86 <xQueueReceive+0x3e>
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <xQueueReceive+0x42>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <xQueueReceive+0x44>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <xQueueReceive+0x5e>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	61fb      	str	r3, [r7, #28]
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ba6:	f001 f833 	bl	8004c10 <xTaskGetSchedulerState>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <xQueueReceive+0x6e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <xQueueReceive+0x72>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xQueueReceive+0x74>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <xQueueReceive+0x8e>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	61bb      	str	r3, [r7, #24]
}
 8003bd2:	bf00      	nop
 8003bd4:	e7fe      	b.n	8003bd4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bd6:	f001 fd01 	bl	80055dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d01f      	beq.n	8003c26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003be6:	68b9      	ldr	r1, [r7, #8]
 8003be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bea:	f000 f8f7 	bl	8003ddc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	1e5a      	subs	r2, r3, #1
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00f      	beq.n	8003c1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	3310      	adds	r3, #16
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fe42 	bl	800488c <xTaskRemoveFromEventList>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <xQueueReceive+0x1bc>)
 8003c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c1e:	f001 fd0d 	bl	800563c <vPortExitCritical>
				return pdPASS;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e069      	b.n	8003cfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d103      	bne.n	8003c34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c2c:	f001 fd06 	bl	800563c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e062      	b.n	8003cfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c3a:	f107 0310 	add.w	r3, r7, #16
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fe88 	bl	8004954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c44:	2301      	movs	r3, #1
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c48:	f001 fcf8 	bl	800563c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c4c:	f000 fbfa 	bl	8004444 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c50:	f001 fcc4 	bl	80055dc <vPortEnterCritical>
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c5a:	b25b      	sxtb	r3, r3
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c60:	d103      	bne.n	8003c6a <xQueueReceive+0x122>
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c76:	d103      	bne.n	8003c80 <xQueueReceive+0x138>
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c80:	f001 fcdc 	bl	800563c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c84:	1d3a      	adds	r2, r7, #4
 8003c86:	f107 0310 	add.w	r3, r7, #16
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fe77 	bl	8004980 <xTaskCheckForTimeOut>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d123      	bne.n	8003ce0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c9a:	f000 f917 	bl	8003ecc <prvIsQueueEmpty>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d017      	beq.n	8003cd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	3324      	adds	r3, #36	; 0x24
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4611      	mov	r1, r2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fd9d 	bl	80047ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cb4:	f000 f8b8 	bl	8003e28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cb8:	f000 fbd2 	bl	8004460 <xTaskResumeAll>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d189      	bne.n	8003bd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <xQueueReceive+0x1bc>)
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	e780      	b.n	8003bd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cd6:	f000 f8a7 	bl	8003e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cda:	f000 fbc1 	bl	8004460 <xTaskResumeAll>
 8003cde:	e77a      	b.n	8003bd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ce2:	f000 f8a1 	bl	8003e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ce6:	f000 fbbb 	bl	8004460 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cec:	f000 f8ee 	bl	8003ecc <prvIsQueueEmpty>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f43f af6f 	beq.w	8003bd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3730      	adds	r7, #48	; 0x30
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10d      	bne.n	8003d42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d14d      	bne.n	8003dca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 ff8a 	bl	8004c4c <xTaskPriorityDisinherit>
 8003d38:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	e043      	b.n	8003dca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d119      	bne.n	8003d7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6898      	ldr	r0, [r3, #8]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	461a      	mov	r2, r3
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	f001 ff6e 	bl	8005c34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	441a      	add	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d32b      	bcc.n	8003dca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	e026      	b.n	8003dca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68d8      	ldr	r0, [r3, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	461a      	mov	r2, r3
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	f001 ff54 	bl	8005c34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	425b      	negs	r3, r3
 8003d96:	441a      	add	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d207      	bcs.n	8003db8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	425b      	negs	r3, r3
 8003db2:	441a      	add	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d105      	bne.n	8003dca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003dd2:	697b      	ldr	r3, [r7, #20]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d018      	beq.n	8003e20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	441a      	add	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d303      	bcc.n	8003e10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68d9      	ldr	r1, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6838      	ldr	r0, [r7, #0]
 8003e1c:	f001 ff0a 	bl	8005c34 <memcpy>
	}
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e30:	f001 fbd4 	bl	80055dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e3c:	e011      	b.n	8003e62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d012      	beq.n	8003e6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3324      	adds	r3, #36	; 0x24
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fd1e 	bl	800488c <xTaskRemoveFromEventList>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e56:	f000 fdf5 	bl	8004a44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	dce9      	bgt.n	8003e3e <prvUnlockQueue+0x16>
 8003e6a:	e000      	b.n	8003e6e <prvUnlockQueue+0x46>
					break;
 8003e6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	22ff      	movs	r2, #255	; 0xff
 8003e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e76:	f001 fbe1 	bl	800563c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e7a:	f001 fbaf 	bl	80055dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e86:	e011      	b.n	8003eac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d012      	beq.n	8003eb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3310      	adds	r3, #16
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fcf9 	bl	800488c <xTaskRemoveFromEventList>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ea0:	f000 fdd0 	bl	8004a44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ea4:	7bbb      	ldrb	r3, [r7, #14]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	dce9      	bgt.n	8003e88 <prvUnlockQueue+0x60>
 8003eb4:	e000      	b.n	8003eb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003eb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	22ff      	movs	r2, #255	; 0xff
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ec0:	f001 fbbc 	bl	800563c <vPortExitCritical>
}
 8003ec4:	bf00      	nop
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ed4:	f001 fb82 	bl	80055dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e001      	b.n	8003eea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eea:	f001 fba7 	bl	800563c <vPortExitCritical>

	return xReturn;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f00:	f001 fb6c 	bl	80055dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d102      	bne.n	8003f16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	e001      	b.n	8003f1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f1a:	f001 fb8f 	bl	800563c <vPortExitCritical>

	return xReturn;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	e014      	b.n	8003f62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f38:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <vQueueAddToRegistry+0x4c>)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10b      	bne.n	8003f5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f44:	490b      	ldr	r1, [pc, #44]	; (8003f74 <vQueueAddToRegistry+0x4c>)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <vQueueAddToRegistry+0x4c>)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f5a:	e006      	b.n	8003f6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d9e7      	bls.n	8003f38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	20000864 	.word	0x20000864

08003f78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f88:	f001 fb28 	bl	80055dc <vPortEnterCritical>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f92:	b25b      	sxtb	r3, r3
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f98:	d103      	bne.n	8003fa2 <vQueueWaitForMessageRestricted+0x2a>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fa8:	b25b      	sxtb	r3, r3
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fae:	d103      	bne.n	8003fb8 <vQueueWaitForMessageRestricted+0x40>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb8:	f001 fb40 	bl	800563c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3324      	adds	r3, #36	; 0x24
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fc31 	bl	8004834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003fd2:	6978      	ldr	r0, [r7, #20]
 8003fd4:	f7ff ff28 	bl	8003e28 <prvUnlockQueue>
	}
 8003fd8:	bf00      	nop
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08e      	sub	sp, #56	; 0x38
 8003fe4:	af04      	add	r7, sp, #16
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	623b      	str	r3, [r7, #32]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800400a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <xTaskCreateStatic+0x46>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	61fb      	str	r3, [r7, #28]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004026:	235c      	movs	r3, #92	; 0x5c
 8004028:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b5c      	cmp	r3, #92	; 0x5c
 800402e:	d00a      	beq.n	8004046 <xTaskCreateStatic+0x66>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	61bb      	str	r3, [r7, #24]
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01e      	beq.n	800408a <xTaskCreateStatic+0xaa>
 800404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01b      	beq.n	800408a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800405a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004064:	2300      	movs	r3, #0
 8004066:	9303      	str	r3, [sp, #12]
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	9302      	str	r3, [sp, #8]
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	9301      	str	r3, [sp, #4]
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f850 	bl	8004122 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004082:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004084:	f000 f8d4 	bl	8004230 <prvAddNewTaskToReadyList>
 8004088:	e001      	b.n	800408e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800408e:	697b      	ldr	r3, [r7, #20]
	}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08c      	sub	sp, #48	; 0x30
 800409c:	af04      	add	r7, sp, #16
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 fb95 	bl	80057dc <pvPortMalloc>
 80040b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00e      	beq.n	80040d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80040ba:	205c      	movs	r0, #92	; 0x5c
 80040bc:	f001 fb8e 	bl	80057dc <pvPortMalloc>
 80040c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
 80040ce:	e005      	b.n	80040dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040d0:	6978      	ldr	r0, [r7, #20]
 80040d2:	f001 fc47 	bl	8005964 <vPortFree>
 80040d6:	e001      	b.n	80040dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d017      	beq.n	8004112 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040ea:	88fa      	ldrh	r2, [r7, #6]
 80040ec:	2300      	movs	r3, #0
 80040ee:	9303      	str	r3, [sp, #12]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	9302      	str	r3, [sp, #8]
 80040f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f80e 	bl	8004122 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004106:	69f8      	ldr	r0, [r7, #28]
 8004108:	f000 f892 	bl	8004230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800410c:	2301      	movs	r3, #1
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	e002      	b.n	8004118 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004116:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004118:	69bb      	ldr	r3, [r7, #24]
	}
 800411a:	4618      	mov	r0, r3
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b088      	sub	sp, #32
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	461a      	mov	r2, r3
 800413a:	21a5      	movs	r1, #165	; 0xa5
 800413c:	f001 fd46 	bl	8005bcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800414a:	3b01      	subs	r3, #1
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <prvInitialiseNewTask+0x58>
	__asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	617b      	str	r3, [r7, #20]
}
 8004176:	bf00      	nop
 8004178:	e7fe      	b.n	8004178 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e012      	b.n	80041a6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	7819      	ldrb	r1, [r3, #0]
 8004188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	4413      	add	r3, r2
 800418e:	3334      	adds	r3, #52	; 0x34
 8004190:	460a      	mov	r2, r1
 8004192:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	4413      	add	r3, r2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	3301      	adds	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b0f      	cmp	r3, #15
 80041aa:	d9e9      	bls.n	8004180 <prvInitialiseNewTask+0x5e>
 80041ac:	e000      	b.n	80041b0 <prvInitialiseNewTask+0x8e>
		{
			break;
 80041ae:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	2b37      	cmp	r3, #55	; 0x37
 80041bc:	d901      	bls.n	80041c2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041be:	2337      	movs	r3, #55	; 0x37
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	2200      	movs	r2, #0
 80041d2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	3304      	adds	r3, #4
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff f98c 	bl	80034f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	3318      	adds	r3, #24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff f987 	bl	80034f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	2200      	movs	r2, #0
 8004202:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	69b8      	ldr	r0, [r7, #24]
 8004212:	f001 f8ef 	bl	80053f4 <pxPortInitialiseStack>
 8004216:	4602      	mov	r2, r0
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004226:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004228:	bf00      	nop
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004238:	f001 f9d0 	bl	80055dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800423c:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <prvAddNewTaskToReadyList+0xc4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <prvAddNewTaskToReadyList+0xc4>)
 8004244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004246:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800424e:	4a2a      	ldr	r2, [pc, #168]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004254:	4b27      	ldr	r3, [pc, #156]	; (80042f4 <prvAddNewTaskToReadyList+0xc4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d110      	bne.n	800427e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800425c:	f000 fc16 	bl	8004a8c <prvInitialiseTaskLists>
 8004260:	e00d      	b.n	800427e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <prvAddNewTaskToReadyList+0xcc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800426a:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	429a      	cmp	r2, r3
 8004276:	d802      	bhi.n	800427e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004278:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800427e:	4b20      	ldr	r3, [pc, #128]	; (8004300 <prvAddNewTaskToReadyList+0xd0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	4a1e      	ldr	r2, [pc, #120]	; (8004300 <prvAddNewTaskToReadyList+0xd0>)
 8004286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <prvAddNewTaskToReadyList+0xd0>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004294:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <prvAddNewTaskToReadyList+0xd4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d903      	bls.n	80042a4 <prvAddNewTaskToReadyList+0x74>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <prvAddNewTaskToReadyList+0xd4>)
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <prvAddNewTaskToReadyList+0xd8>)
 80042b2:	441a      	add	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f7ff f927 	bl	800350e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042c0:	f001 f9bc 	bl	800563c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042c4:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <prvAddNewTaskToReadyList+0xcc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00e      	beq.n	80042ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <prvAddNewTaskToReadyList+0xc8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d207      	bcs.n	80042ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <prvAddNewTaskToReadyList+0xdc>)
 80042dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	20000d78 	.word	0x20000d78
 80042f8:	200008a4 	.word	0x200008a4
 80042fc:	20000d84 	.word	0x20000d84
 8004300:	20000d94 	.word	0x20000d94
 8004304:	20000d80 	.word	0x20000d80
 8004308:	200008a8 	.word	0x200008a8
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <vTaskDelay+0x60>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <vTaskDelay+0x30>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60bb      	str	r3, [r7, #8]
}
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004340:	f000 f880 	bl	8004444 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004344:	2100      	movs	r1, #0
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fcee 	bl	8004d28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800434c:	f000 f888 	bl	8004460 <xTaskResumeAll>
 8004350:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <vTaskDelay+0x64>)
 800435a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000da0 	.word	0x20000da0
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004386:	463a      	mov	r2, r7
 8004388:	1d39      	adds	r1, r7, #4
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff f860 	bl	8003454 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	9202      	str	r2, [sp, #8]
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	2300      	movs	r3, #0
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	460a      	mov	r2, r1
 80043a6:	4921      	ldr	r1, [pc, #132]	; (800442c <vTaskStartScheduler+0xb4>)
 80043a8:	4821      	ldr	r0, [pc, #132]	; (8004430 <vTaskStartScheduler+0xb8>)
 80043aa:	f7ff fe19 	bl	8003fe0 <xTaskCreateStatic>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4a20      	ldr	r2, [pc, #128]	; (8004434 <vTaskStartScheduler+0xbc>)
 80043b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043b4:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <vTaskStartScheduler+0xbc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e001      	b.n	80043c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80043cc:	f000 fd00 	bl	8004dd0 <xTimerCreateTimerTask>
 80043d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d116      	bne.n	8004406 <vTaskStartScheduler+0x8e>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	613b      	str	r3, [r7, #16]
}
 80043ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <vTaskStartScheduler+0xc0>)
 80043ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043f4:	4b11      	ldr	r3, [pc, #68]	; (800443c <vTaskStartScheduler+0xc4>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <vTaskStartScheduler+0xc8>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004400:	f001 f87a 	bl	80054f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004404:	e00e      	b.n	8004424 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440c:	d10a      	bne.n	8004424 <vTaskStartScheduler+0xac>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	60fb      	str	r3, [r7, #12]
}
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <vTaskStartScheduler+0xaa>
}
 8004424:	bf00      	nop
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	08006534 	.word	0x08006534
 8004430:	08004a5d 	.word	0x08004a5d
 8004434:	20000d9c 	.word	0x20000d9c
 8004438:	20000d98 	.word	0x20000d98
 800443c:	20000d84 	.word	0x20000d84
 8004440:	20000d7c 	.word	0x20000d7c

08004444 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <vTaskSuspendAll+0x18>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3301      	adds	r3, #1
 800444e:	4a03      	ldr	r2, [pc, #12]	; (800445c <vTaskSuspendAll+0x18>)
 8004450:	6013      	str	r3, [r2, #0]
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000da0 	.word	0x20000da0

08004460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800446e:	4b42      	ldr	r3, [pc, #264]	; (8004578 <xTaskResumeAll+0x118>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <xTaskResumeAll+0x2c>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	603b      	str	r3, [r7, #0]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800448c:	f001 f8a6 	bl	80055dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004490:	4b39      	ldr	r3, [pc, #228]	; (8004578 <xTaskResumeAll+0x118>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3b01      	subs	r3, #1
 8004496:	4a38      	ldr	r2, [pc, #224]	; (8004578 <xTaskResumeAll+0x118>)
 8004498:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800449a:	4b37      	ldr	r3, [pc, #220]	; (8004578 <xTaskResumeAll+0x118>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d162      	bne.n	8004568 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044a2:	4b36      	ldr	r3, [pc, #216]	; (800457c <xTaskResumeAll+0x11c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d05e      	beq.n	8004568 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044aa:	e02f      	b.n	800450c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80044ac:	4b34      	ldr	r3, [pc, #208]	; (8004580 <xTaskResumeAll+0x120>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3318      	adds	r3, #24
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff f883 	bl	80035c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff f87e 	bl	80035c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	4b2d      	ldr	r3, [pc, #180]	; (8004584 <xTaskResumeAll+0x124>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d903      	bls.n	80044dc <xTaskResumeAll+0x7c>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <xTaskResumeAll+0x124>)
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	4613      	mov	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4a27      	ldr	r2, [pc, #156]	; (8004588 <xTaskResumeAll+0x128>)
 80044ea:	441a      	add	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f7ff f80b 	bl	800350e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fc:	4b23      	ldr	r3, [pc, #140]	; (800458c <xTaskResumeAll+0x12c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	429a      	cmp	r2, r3
 8004504:	d302      	bcc.n	800450c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004506:	4b22      	ldr	r3, [pc, #136]	; (8004590 <xTaskResumeAll+0x130>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800450c:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <xTaskResumeAll+0x120>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1cb      	bne.n	80044ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800451a:	f000 fb55 	bl	8004bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800451e:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <xTaskResumeAll+0x134>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d010      	beq.n	800454c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800452a:	f000 f845 	bl	80045b8 <xTaskIncrementTick>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <xTaskResumeAll+0x130>)
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3b01      	subs	r3, #1
 800453e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f1      	bne.n	800452a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004546:	4b13      	ldr	r3, [pc, #76]	; (8004594 <xTaskResumeAll+0x134>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <xTaskResumeAll+0x130>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004554:	2301      	movs	r3, #1
 8004556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004558:	4b0f      	ldr	r3, [pc, #60]	; (8004598 <xTaskResumeAll+0x138>)
 800455a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004568:	f001 f868 	bl	800563c <vPortExitCritical>

	return xAlreadyYielded;
 800456c:	68bb      	ldr	r3, [r7, #8]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000da0 	.word	0x20000da0
 800457c:	20000d78 	.word	0x20000d78
 8004580:	20000d38 	.word	0x20000d38
 8004584:	20000d80 	.word	0x20000d80
 8004588:	200008a8 	.word	0x200008a8
 800458c:	200008a4 	.word	0x200008a4
 8004590:	20000d8c 	.word	0x20000d8c
 8004594:	20000d88 	.word	0x20000d88
 8004598:	e000ed04 	.word	0xe000ed04

0800459c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045a2:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <xTaskGetTickCount+0x18>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045a8:	687b      	ldr	r3, [r7, #4]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	20000d7c 	.word	0x20000d7c

080045b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045c2:	4b51      	ldr	r3, [pc, #324]	; (8004708 <xTaskIncrementTick+0x150>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f040 808e 	bne.w	80046e8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045cc:	4b4f      	ldr	r3, [pc, #316]	; (800470c <xTaskIncrementTick+0x154>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045d4:	4a4d      	ldr	r2, [pc, #308]	; (800470c <xTaskIncrementTick+0x154>)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d120      	bne.n	8004622 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045e0:	4b4b      	ldr	r3, [pc, #300]	; (8004710 <xTaskIncrementTick+0x158>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <xTaskIncrementTick+0x48>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	603b      	str	r3, [r7, #0]
}
 80045fc:	bf00      	nop
 80045fe:	e7fe      	b.n	80045fe <xTaskIncrementTick+0x46>
 8004600:	4b43      	ldr	r3, [pc, #268]	; (8004710 <xTaskIncrementTick+0x158>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	4b43      	ldr	r3, [pc, #268]	; (8004714 <xTaskIncrementTick+0x15c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a41      	ldr	r2, [pc, #260]	; (8004710 <xTaskIncrementTick+0x158>)
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4a41      	ldr	r2, [pc, #260]	; (8004714 <xTaskIncrementTick+0x15c>)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b40      	ldr	r3, [pc, #256]	; (8004718 <xTaskIncrementTick+0x160>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	4a3f      	ldr	r2, [pc, #252]	; (8004718 <xTaskIncrementTick+0x160>)
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	f000 fad3 	bl	8004bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004622:	4b3e      	ldr	r3, [pc, #248]	; (800471c <xTaskIncrementTick+0x164>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	429a      	cmp	r2, r3
 800462a:	d34e      	bcc.n	80046ca <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800462c:	4b38      	ldr	r3, [pc, #224]	; (8004710 <xTaskIncrementTick+0x158>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <xTaskIncrementTick+0x82>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <xTaskIncrementTick+0x84>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004640:	4b36      	ldr	r3, [pc, #216]	; (800471c <xTaskIncrementTick+0x164>)
 8004642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004646:	601a      	str	r2, [r3, #0]
					break;
 8004648:	e03f      	b.n	80046ca <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800464a:	4b31      	ldr	r3, [pc, #196]	; (8004710 <xTaskIncrementTick+0x158>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d203      	bcs.n	800466a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004662:	4a2e      	ldr	r2, [pc, #184]	; (800471c <xTaskIncrementTick+0x164>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6013      	str	r3, [r2, #0]
						break;
 8004668:	e02f      	b.n	80046ca <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	3304      	adds	r3, #4
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe ffa8 	bl	80035c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	d004      	beq.n	8004686 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	3318      	adds	r3, #24
 8004680:	4618      	mov	r0, r3
 8004682:	f7fe ff9f 	bl	80035c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	4b25      	ldr	r3, [pc, #148]	; (8004720 <xTaskIncrementTick+0x168>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d903      	bls.n	800469a <xTaskIncrementTick+0xe2>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	4a22      	ldr	r2, [pc, #136]	; (8004720 <xTaskIncrementTick+0x168>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4a1f      	ldr	r2, [pc, #124]	; (8004724 <xTaskIncrementTick+0x16c>)
 80046a8:	441a      	add	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe ff2c 	bl	800350e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ba:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <xTaskIncrementTick+0x170>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d3b3      	bcc.n	800462c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c8:	e7b0      	b.n	800462c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046ca:	4b17      	ldr	r3, [pc, #92]	; (8004728 <xTaskIncrementTick+0x170>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	4914      	ldr	r1, [pc, #80]	; (8004724 <xTaskIncrementTick+0x16c>)
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d907      	bls.n	80046f2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80046e2:	2301      	movs	r3, #1
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e004      	b.n	80046f2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046e8:	4b10      	ldr	r3, [pc, #64]	; (800472c <xTaskIncrementTick+0x174>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3301      	adds	r3, #1
 80046ee:	4a0f      	ldr	r2, [pc, #60]	; (800472c <xTaskIncrementTick+0x174>)
 80046f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046f2:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <xTaskIncrementTick+0x178>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80046fa:	2301      	movs	r3, #1
 80046fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000da0 	.word	0x20000da0
 800470c:	20000d7c 	.word	0x20000d7c
 8004710:	20000d30 	.word	0x20000d30
 8004714:	20000d34 	.word	0x20000d34
 8004718:	20000d90 	.word	0x20000d90
 800471c:	20000d98 	.word	0x20000d98
 8004720:	20000d80 	.word	0x20000d80
 8004724:	200008a8 	.word	0x200008a8
 8004728:	200008a4 	.word	0x200008a4
 800472c:	20000d88 	.word	0x20000d88
 8004730:	20000d8c 	.word	0x20000d8c

08004734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800473a:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <vTaskSwitchContext+0xa4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004742:	4b26      	ldr	r3, [pc, #152]	; (80047dc <vTaskSwitchContext+0xa8>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004748:	e041      	b.n	80047ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800474a:	4b24      	ldr	r3, [pc, #144]	; (80047dc <vTaskSwitchContext+0xa8>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004750:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <vTaskSwitchContext+0xac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e010      	b.n	800477a <vTaskSwitchContext+0x46>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <vTaskSwitchContext+0x40>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <vTaskSwitchContext+0x3e>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3b01      	subs	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	491a      	ldr	r1, [pc, #104]	; (80047e4 <vTaskSwitchContext+0xb0>)
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0e4      	beq.n	8004758 <vTaskSwitchContext+0x24>
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4a12      	ldr	r2, [pc, #72]	; (80047e4 <vTaskSwitchContext+0xb0>)
 800479a:	4413      	add	r3, r2
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	3308      	adds	r3, #8
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d104      	bne.n	80047be <vTaskSwitchContext+0x8a>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <vTaskSwitchContext+0xb4>)
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <vTaskSwitchContext+0xac>)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6013      	str	r3, [r2, #0]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	20000da0 	.word	0x20000da0
 80047dc:	20000d8c 	.word	0x20000d8c
 80047e0:	20000d80 	.word	0x20000d80
 80047e4:	200008a8 	.word	0x200008a8
 80047e8:	200008a4 	.word	0x200008a4

080047ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	60fb      	str	r3, [r7, #12]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004812:	4b07      	ldr	r3, [pc, #28]	; (8004830 <vTaskPlaceOnEventList+0x44>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3318      	adds	r3, #24
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe fe9a 	bl	8003554 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004820:	2101      	movs	r1, #1
 8004822:	6838      	ldr	r0, [r7, #0]
 8004824:	f000 fa80 	bl	8004d28 <prvAddCurrentTaskToDelayedList>
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	200008a4 	.word	0x200008a4

08004834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10a      	bne.n	800485c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	617b      	str	r3, [r7, #20]
}
 8004858:	bf00      	nop
 800485a:	e7fe      	b.n	800485a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <vTaskPlaceOnEventListRestricted+0x54>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3318      	adds	r3, #24
 8004862:	4619      	mov	r1, r3
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7fe fe52 	bl	800350e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	68b8      	ldr	r0, [r7, #8]
 800487a:	f000 fa55 	bl	8004d28 <prvAddCurrentTaskToDelayedList>
	}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	200008a4 	.word	0x200008a4

0800488c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10a      	bne.n	80048b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	60fb      	str	r3, [r7, #12]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	3318      	adds	r3, #24
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe fe81 	bl	80035c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c2:	4b1e      	ldr	r3, [pc, #120]	; (800493c <xTaskRemoveFromEventList+0xb0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11d      	bne.n	8004906 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	3304      	adds	r3, #4
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fe78 	bl	80035c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	4b19      	ldr	r3, [pc, #100]	; (8004940 <xTaskRemoveFromEventList+0xb4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d903      	bls.n	80048e8 <xTaskRemoveFromEventList+0x5c>
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4a16      	ldr	r2, [pc, #88]	; (8004940 <xTaskRemoveFromEventList+0xb4>)
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a13      	ldr	r2, [pc, #76]	; (8004944 <xTaskRemoveFromEventList+0xb8>)
 80048f6:	441a      	add	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7fe fe05 	bl	800350e <vListInsertEnd>
 8004904:	e005      	b.n	8004912 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3318      	adds	r3, #24
 800490a:	4619      	mov	r1, r3
 800490c:	480e      	ldr	r0, [pc, #56]	; (8004948 <xTaskRemoveFromEventList+0xbc>)
 800490e:	f7fe fdfe 	bl	800350e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	4b0d      	ldr	r3, [pc, #52]	; (800494c <xTaskRemoveFromEventList+0xc0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	429a      	cmp	r2, r3
 800491e:	d905      	bls.n	800492c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <xTaskRemoveFromEventList+0xc4>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e001      	b.n	8004930 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004930:	697b      	ldr	r3, [r7, #20]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	20000da0 	.word	0x20000da0
 8004940:	20000d80 	.word	0x20000d80
 8004944:	200008a8 	.word	0x200008a8
 8004948:	20000d38 	.word	0x20000d38
 800494c:	200008a4 	.word	0x200008a4
 8004950:	20000d8c 	.word	0x20000d8c

08004954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <vTaskInternalSetTimeOutState+0x24>)
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <vTaskInternalSetTimeOutState+0x28>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	bc80      	pop	{r7}
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000d90 	.word	0x20000d90
 800497c:	20000d7c 	.word	0x20000d7c

08004980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	613b      	str	r3, [r7, #16]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60fb      	str	r3, [r7, #12]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049c2:	f000 fe0b 	bl	80055dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049c6:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <xTaskCheckForTimeOut+0xbc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049de:	d102      	bne.n	80049e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	e023      	b.n	8004a2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <xTaskCheckForTimeOut+0xc0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d007      	beq.n	8004a02 <xTaskCheckForTimeOut+0x82>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049fc:	2301      	movs	r3, #1
 80049fe:	61fb      	str	r3, [r7, #28]
 8004a00:	e015      	b.n	8004a2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d20b      	bcs.n	8004a24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	1ad2      	subs	r2, r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ff9b 	bl	8004954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	61fb      	str	r3, [r7, #28]
 8004a22:	e004      	b.n	8004a2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a2e:	f000 fe05 	bl	800563c <vPortExitCritical>

	return xReturn;
 8004a32:	69fb      	ldr	r3, [r7, #28]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	20000d7c 	.word	0x20000d7c
 8004a40:	20000d90 	.word	0x20000d90

08004a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <vTaskMissedYield+0x14>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000d8c 	.word	0x20000d8c

08004a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a64:	f000 f852 	bl	8004b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <prvIdleTask+0x28>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d9f9      	bls.n	8004a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <prvIdleTask+0x2c>)
 8004a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a80:	e7f0      	b.n	8004a64 <prvIdleTask+0x8>
 8004a82:	bf00      	nop
 8004a84:	200008a8 	.word	0x200008a8
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a92:	2300      	movs	r3, #0
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	e00c      	b.n	8004ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4a12      	ldr	r2, [pc, #72]	; (8004aec <prvInitialiseTaskLists+0x60>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe fd06 	bl	80034b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	607b      	str	r3, [r7, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b37      	cmp	r3, #55	; 0x37
 8004ab6:	d9ef      	bls.n	8004a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ab8:	480d      	ldr	r0, [pc, #52]	; (8004af0 <prvInitialiseTaskLists+0x64>)
 8004aba:	f7fe fcfd 	bl	80034b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004abe:	480d      	ldr	r0, [pc, #52]	; (8004af4 <prvInitialiseTaskLists+0x68>)
 8004ac0:	f7fe fcfa 	bl	80034b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ac4:	480c      	ldr	r0, [pc, #48]	; (8004af8 <prvInitialiseTaskLists+0x6c>)
 8004ac6:	f7fe fcf7 	bl	80034b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004aca:	480c      	ldr	r0, [pc, #48]	; (8004afc <prvInitialiseTaskLists+0x70>)
 8004acc:	f7fe fcf4 	bl	80034b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ad0:	480b      	ldr	r0, [pc, #44]	; (8004b00 <prvInitialiseTaskLists+0x74>)
 8004ad2:	f7fe fcf1 	bl	80034b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <prvInitialiseTaskLists+0x78>)
 8004ad8:	4a05      	ldr	r2, [pc, #20]	; (8004af0 <prvInitialiseTaskLists+0x64>)
 8004ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <prvInitialiseTaskLists+0x7c>)
 8004ade:	4a05      	ldr	r2, [pc, #20]	; (8004af4 <prvInitialiseTaskLists+0x68>)
 8004ae0:	601a      	str	r2, [r3, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	200008a8 	.word	0x200008a8
 8004af0:	20000d08 	.word	0x20000d08
 8004af4:	20000d1c 	.word	0x20000d1c
 8004af8:	20000d38 	.word	0x20000d38
 8004afc:	20000d4c 	.word	0x20000d4c
 8004b00:	20000d64 	.word	0x20000d64
 8004b04:	20000d30 	.word	0x20000d30
 8004b08:	20000d34 	.word	0x20000d34

08004b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b12:	e019      	b.n	8004b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b14:	f000 fd62 	bl	80055dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004b18:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <prvCheckTasksWaitingTermination+0x50>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fe fd4d 	bl	80035c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <prvCheckTasksWaitingTermination+0x54>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	4a0b      	ldr	r2, [pc, #44]	; (8004b60 <prvCheckTasksWaitingTermination+0x54>)
 8004b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <prvCheckTasksWaitingTermination+0x58>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <prvCheckTasksWaitingTermination+0x58>)
 8004b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b3e:	f000 fd7d 	bl	800563c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f810 	bl	8004b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <prvCheckTasksWaitingTermination+0x58>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e1      	bne.n	8004b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b50:	bf00      	nop
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000d4c 	.word	0x20000d4c
 8004b60:	20000d78 	.word	0x20000d78
 8004b64:	20000d60 	.word	0x20000d60

08004b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d108      	bne.n	8004b8c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fef0 	bl	8005964 <vPortFree>
				vPortFree( pxTCB );
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 feed 	bl	8005964 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b8a:	e018      	b.n	8004bbe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d103      	bne.n	8004b9e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fee4 	bl	8005964 <vPortFree>
	}
 8004b9c:	e00f      	b.n	8004bbe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d00a      	beq.n	8004bbe <prvDeleteTCB+0x56>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <prvDeleteTCB+0x54>
	}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <prvResetNextTaskUnblockTime+0x40>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <prvResetNextTaskUnblockTime+0x14>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <prvResetNextTaskUnblockTime+0x16>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <prvResetNextTaskUnblockTime+0x44>)
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004be8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bea:	e008      	b.n	8004bfe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bec:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <prvResetNextTaskUnblockTime+0x40>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <prvResetNextTaskUnblockTime+0x44>)
 8004bfc:	6013      	str	r3, [r2, #0]
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr
 8004c08:	20000d30 	.word	0x20000d30
 8004c0c:	20000d98 	.word	0x20000d98

08004c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <xTaskGetSchedulerState+0x34>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	e008      	b.n	8004c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c24:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <xTaskGetSchedulerState+0x38>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	607b      	str	r3, [r7, #4]
 8004c30:	e001      	b.n	8004c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c32:	2300      	movs	r3, #0
 8004c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c36:	687b      	ldr	r3, [r7, #4]
	}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000d84 	.word	0x20000d84
 8004c48:	20000da0 	.word	0x20000da0

08004c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d056      	beq.n	8004d10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c62:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <xTaskPriorityDisinherit+0xd0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d00a      	beq.n	8004c82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c70:	f383 8811 	msr	BASEPRI, r3
 8004c74:	f3bf 8f6f 	isb	sy
 8004c78:	f3bf 8f4f 	dsb	sy
 8004c7c:	60fb      	str	r3, [r7, #12]
}
 8004c7e:	bf00      	nop
 8004c80:	e7fe      	b.n	8004c80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10a      	bne.n	8004ca0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	60bb      	str	r3, [r7, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca4:	1e5a      	subs	r2, r3, #1
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d02c      	beq.n	8004d10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d128      	bne.n	8004d10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fc7e 	bl	80035c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <xTaskPriorityDisinherit+0xd4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d903      	bls.n	8004cf0 <xTaskPriorityDisinherit+0xa4>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <xTaskPriorityDisinherit+0xd4>)
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <xTaskPriorityDisinherit+0xd8>)
 8004cfe:	441a      	add	r2, r3
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	3304      	adds	r3, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f7fe fc01 	bl	800350e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d10:	697b      	ldr	r3, [r7, #20]
	}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	200008a4 	.word	0x200008a4
 8004d20:	20000d80 	.word	0x20000d80
 8004d24:	200008a8 	.word	0x200008a8

08004d28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d32:	4b21      	ldr	r3, [pc, #132]	; (8004db8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d38:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fc40 	bl	80035c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d4a:	d10a      	bne.n	8004d62 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d52:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3304      	adds	r3, #4
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4819      	ldr	r0, [pc, #100]	; (8004dc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d5c:	f7fe fbd7 	bl	800350e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d60:	e026      	b.n	8004db0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4413      	add	r3, r2
 8004d68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d6a:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d209      	bcs.n	8004d8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4619      	mov	r1, r3
 8004d86:	4610      	mov	r0, r2
 8004d88:	f7fe fbe4 	bl	8003554 <vListInsert>
}
 8004d8c:	e010      	b.n	8004db0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f7fe fbda 	bl	8003554 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d202      	bcs.n	8004db0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004daa:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6013      	str	r3, [r2, #0]
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000d7c 	.word	0x20000d7c
 8004dbc:	200008a4 	.word	0x200008a4
 8004dc0:	20000d64 	.word	0x20000d64
 8004dc4:	20000d34 	.word	0x20000d34
 8004dc8:	20000d30 	.word	0x20000d30
 8004dcc:	20000d98 	.word	0x20000d98

08004dd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004dda:	f000 facb 	bl	8005374 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004dde:	4b1c      	ldr	r3, [pc, #112]	; (8004e50 <xTimerCreateTimerTask+0x80>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d021      	beq.n	8004e2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004dee:	1d3a      	adds	r2, r7, #4
 8004df0:	f107 0108 	add.w	r1, r7, #8
 8004df4:	f107 030c 	add.w	r3, r7, #12
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe fb43 	bl	8003484 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	9202      	str	r2, [sp, #8]
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	2302      	movs	r3, #2
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	460a      	mov	r2, r1
 8004e10:	4910      	ldr	r1, [pc, #64]	; (8004e54 <xTimerCreateTimerTask+0x84>)
 8004e12:	4811      	ldr	r0, [pc, #68]	; (8004e58 <xTimerCreateTimerTask+0x88>)
 8004e14:	f7ff f8e4 	bl	8003fe0 <xTaskCreateStatic>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4a10      	ldr	r2, [pc, #64]	; (8004e5c <xTimerCreateTimerTask+0x8c>)
 8004e1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <xTimerCreateTimerTask+0x8c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e26:	2301      	movs	r3, #1
 8004e28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	613b      	str	r3, [r7, #16]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e46:	697b      	ldr	r3, [r7, #20]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	20000dd4 	.word	0x20000dd4
 8004e54:	0800653c 	.word	0x0800653c
 8004e58:	08004f7d 	.word	0x08004f7d
 8004e5c:	20000dd8 	.word	0x20000dd8

08004e60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	; 0x28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7c:	f383 8811 	msr	BASEPRI, r3
 8004e80:	f3bf 8f6f 	isb	sy
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	623b      	str	r3, [r7, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <xTimerGenericCommand+0x98>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d02a      	beq.n	8004eec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	dc18      	bgt.n	8004eda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ea8:	f7ff feb2 	bl	8004c10 <xTaskGetSchedulerState>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d109      	bne.n	8004ec6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <xTimerGenericCommand+0x98>)
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	f107 0110 	add.w	r1, r7, #16
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebe:	f7fe fcad 	bl	800381c <xQueueGenericSend>
 8004ec2:	6278      	str	r0, [r7, #36]	; 0x24
 8004ec4:	e012      	b.n	8004eec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ec6:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <xTimerGenericCommand+0x98>)
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	f107 0110 	add.w	r1, r7, #16
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f7fe fca3 	bl	800381c <xQueueGenericSend>
 8004ed6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ed8:	e008      	b.n	8004eec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004eda:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <xTimerGenericCommand+0x98>)
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	f107 0110 	add.w	r1, r7, #16
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	f7fe fd97 	bl	8003a18 <xQueueGenericSendFromISR>
 8004eea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000dd4 	.word	0x20000dd4

08004efc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f06:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <prvProcessExpiredTimer+0x7c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fb55 	bl	80035c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d122      	bne.n	8004f68 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	18d1      	adds	r1, r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	6978      	ldr	r0, [r7, #20]
 8004f30:	f000 f8c8 	bl	80050c4 <prvInsertTimerInActiveList>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	2100      	movs	r1, #0
 8004f44:	6978      	ldr	r0, [r7, #20]
 8004f46:	f7ff ff8b 	bl	8004e60 <xTimerGenericCommand>
 8004f4a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	60fb      	str	r3, [r7, #12]
}
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	4798      	blx	r3
}
 8004f70:	bf00      	nop
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000dcc 	.word	0x20000dcc

08004f7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f84:	f107 0308 	add.w	r3, r7, #8
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f857 	bl	800503c <prvGetNextExpireTime>
 8004f8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4619      	mov	r1, r3
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f803 	bl	8004fa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f9a:	f000 f8d5 	bl	8005148 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f9e:	e7f1      	b.n	8004f84 <prvTimerTask+0x8>

08004fa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004faa:	f7ff fa4b 	bl	8004444 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f866 	bl	8005084 <prvSampleTimeNow>
 8004fb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d130      	bne.n	8005022 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <prvProcessTimerOrBlockTask+0x3c>
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d806      	bhi.n	8004fdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004fce:	f7ff fa47 	bl	8004460 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ff91 	bl	8004efc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fda:	e024      	b.n	8005026 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d008      	beq.n	8004ff4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fe2:	4b13      	ldr	r3, [pc, #76]	; (8005030 <prvProcessTimerOrBlockTask+0x90>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <prvProcessTimerOrBlockTask+0x94>)
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4619      	mov	r1, r3
 8005002:	f7fe ffb9 	bl	8003f78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005006:	f7ff fa2b 	bl	8004460 <xTaskResumeAll>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005010:	4b09      	ldr	r3, [pc, #36]	; (8005038 <prvProcessTimerOrBlockTask+0x98>)
 8005012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	f3bf 8f6f 	isb	sy
}
 8005020:	e001      	b.n	8005026 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005022:	f7ff fa1d 	bl	8004460 <xTaskResumeAll>
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000dd0 	.word	0x20000dd0
 8005034:	20000dd4 	.word	0x20000dd4
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005044:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <prvGetNextExpireTime+0x44>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005062:	4b07      	ldr	r3, [pc, #28]	; (8005080 <prvGetNextExpireTime+0x44>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e001      	b.n	8005072 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005072:	68fb      	ldr	r3, [r7, #12]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000dcc 	.word	0x20000dcc

08005084 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800508c:	f7ff fa86 	bl	800459c <xTaskGetTickCount>
 8005090:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <prvSampleTimeNow+0x3c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	429a      	cmp	r2, r3
 800509a:	d205      	bcs.n	80050a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800509c:	f000 f908 	bl	80052b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	e002      	b.n	80050ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050ae:	4a04      	ldr	r2, [pc, #16]	; (80050c0 <prvSampleTimeNow+0x3c>)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050b4:	68fb      	ldr	r3, [r7, #12]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20000ddc 	.word	0x20000ddc

080050c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d812      	bhi.n	8005110 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d302      	bcc.n	80050fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050f8:	2301      	movs	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	e01b      	b.n	8005136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <prvInsertTimerInActiveList+0x7c>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3304      	adds	r3, #4
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f7fe fa23 	bl	8003554 <vListInsert>
 800510e:	e012      	b.n	8005136 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d206      	bcs.n	8005126 <prvInsertTimerInActiveList+0x62>
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005120:	2301      	movs	r3, #1
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e007      	b.n	8005136 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <prvInsertTimerInActiveList+0x80>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3304      	adds	r3, #4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f7fe fa0f 	bl	8003554 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005136:	697b      	ldr	r3, [r7, #20]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20000dd0 	.word	0x20000dd0
 8005144:	20000dcc 	.word	0x20000dcc

08005148 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08e      	sub	sp, #56	; 0x38
 800514c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800514e:	e09d      	b.n	800528c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	da18      	bge.n	8005188 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005156:	1d3b      	adds	r3, r7, #4
 8005158:	3304      	adds	r3, #4
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	61fb      	str	r3, [r7, #28]
}
 8005174:	bf00      	nop
 8005176:	e7fe      	b.n	8005176 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800517e:	6850      	ldr	r0, [r2, #4]
 8005180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005182:	6892      	ldr	r2, [r2, #8]
 8005184:	4611      	mov	r1, r2
 8005186:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	db7e      	blt.n	800528c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	3304      	adds	r3, #4
 800519e:	4618      	mov	r0, r3
 80051a0:	f7fe fa10 	bl	80035c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051a4:	463b      	mov	r3, r7
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ff6c 	bl	8005084 <prvSampleTimeNow>
 80051ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b09      	cmp	r3, #9
 80051b2:	d86a      	bhi.n	800528a <prvProcessReceivedCommands+0x142>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <prvProcessReceivedCommands+0x74>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051e5 	.word	0x080051e5
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	080051e5 	.word	0x080051e5
 80051c8:	0800528d 	.word	0x0800528d
 80051cc:	08005241 	.word	0x08005241
 80051d0:	08005279 	.word	0x08005279
 80051d4:	080051e5 	.word	0x080051e5
 80051d8:	080051e5 	.word	0x080051e5
 80051dc:	0800528d 	.word	0x0800528d
 80051e0:	08005241 	.word	0x08005241
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	18d1      	adds	r1, r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f2:	f7ff ff67 	bl	80050c4 <prvInsertTimerInActiveList>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d047      	beq.n	800528c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005202:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d13f      	bne.n	800528c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	441a      	add	r2, r3
 8005214:	2300      	movs	r3, #0
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	2300      	movs	r3, #0
 800521a:	2100      	movs	r1, #0
 800521c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800521e:	f7ff fe1f 	bl	8004e60 <xTimerGenericCommand>
 8005222:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d130      	bne.n	800528c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	61bb      	str	r3, [r7, #24]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	617b      	str	r3, [r7, #20]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	18d1      	adds	r1, r2, r3
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005272:	f7ff ff27 	bl	80050c4 <prvInsertTimerInActiveList>
					break;
 8005276:	e009      	b.n	800528c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005284:	f000 fb6e 	bl	8005964 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005288:	e000      	b.n	800528c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800528a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800528c:	4b07      	ldr	r3, [pc, #28]	; (80052ac <prvProcessReceivedCommands+0x164>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	1d39      	adds	r1, r7, #4
 8005292:	2200      	movs	r2, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f7fe fc57 	bl	8003b48 <xQueueReceive>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	f47f af57 	bne.w	8005150 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	3730      	adds	r7, #48	; 0x30
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000dd4 	.word	0x20000dd4

080052b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052b6:	e045      	b.n	8005344 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052b8:	4b2c      	ldr	r3, [pc, #176]	; (800536c <prvSwitchTimerLists+0xbc>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052c2:	4b2a      	ldr	r3, [pc, #168]	; (800536c <prvSwitchTimerLists+0xbc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fe f977 	bl	80035c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d12e      	bne.n	8005344 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4413      	add	r3, r2
 80052ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d90e      	bls.n	8005316 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <prvSwitchTimerLists+0xbc>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4610      	mov	r0, r2
 8005310:	f7fe f920 	bl	8003554 <vListInsert>
 8005314:	e016      	b.n	8005344 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005316:	2300      	movs	r3, #0
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2300      	movs	r3, #0
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	2100      	movs	r1, #0
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff fd9d 	bl	8004e60 <xTimerGenericCommand>
 8005326:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <prvSwitchTimerLists+0x94>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	603b      	str	r3, [r7, #0]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <prvSwitchTimerLists+0xbc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1b4      	bne.n	80052b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <prvSwitchTimerLists+0xbc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <prvSwitchTimerLists+0xc0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a04      	ldr	r2, [pc, #16]	; (800536c <prvSwitchTimerLists+0xbc>)
 800535a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800535c:	4a04      	ldr	r2, [pc, #16]	; (8005370 <prvSwitchTimerLists+0xc0>)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	6013      	str	r3, [r2, #0]
}
 8005362:	bf00      	nop
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000dcc 	.word	0x20000dcc
 8005370:	20000dd0 	.word	0x20000dd0

08005374 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800537a:	f000 f92f 	bl	80055dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800537e:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <prvCheckForValidListAndQueue+0x60>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d120      	bne.n	80053c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005386:	4814      	ldr	r0, [pc, #80]	; (80053d8 <prvCheckForValidListAndQueue+0x64>)
 8005388:	f7fe f896 	bl	80034b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800538c:	4813      	ldr	r0, [pc, #76]	; (80053dc <prvCheckForValidListAndQueue+0x68>)
 800538e:	f7fe f893 	bl	80034b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005392:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <prvCheckForValidListAndQueue+0x6c>)
 8005394:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <prvCheckForValidListAndQueue+0x64>)
 8005396:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005398:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <prvCheckForValidListAndQueue+0x70>)
 800539a:	4a10      	ldr	r2, [pc, #64]	; (80053dc <prvCheckForValidListAndQueue+0x68>)
 800539c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800539e:	2300      	movs	r3, #0
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <prvCheckForValidListAndQueue+0x74>)
 80053a4:	4a11      	ldr	r2, [pc, #68]	; (80053ec <prvCheckForValidListAndQueue+0x78>)
 80053a6:	2110      	movs	r1, #16
 80053a8:	200a      	movs	r0, #10
 80053aa:	f7fe f99d 	bl	80036e8 <xQueueGenericCreateStatic>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <prvCheckForValidListAndQueue+0x60>)
 80053b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <prvCheckForValidListAndQueue+0x60>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <prvCheckForValidListAndQueue+0x60>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	490b      	ldr	r1, [pc, #44]	; (80053f0 <prvCheckForValidListAndQueue+0x7c>)
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe fdb0 	bl	8003f28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053c8:	f000 f938 	bl	800563c <vPortExitCritical>
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000dd4 	.word	0x20000dd4
 80053d8:	20000da4 	.word	0x20000da4
 80053dc:	20000db8 	.word	0x20000db8
 80053e0:	20000dcc 	.word	0x20000dcc
 80053e4:	20000dd0 	.word	0x20000dd0
 80053e8:	20000e80 	.word	0x20000e80
 80053ec:	20000de0 	.word	0x20000de0
 80053f0:	08006544 	.word	0x08006544

080053f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3b04      	subs	r3, #4
 8005404:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800540c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3b04      	subs	r3, #4
 8005412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3b04      	subs	r3, #4
 8005422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005424:	4a08      	ldr	r2, [pc, #32]	; (8005448 <pxPortInitialiseStack+0x54>)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3b14      	subs	r3, #20
 800542e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3b20      	subs	r3, #32
 800543a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	0800544d 	.word	0x0800544d

0800544c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005452:	2300      	movs	r3, #0
 8005454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <prvTaskExitError+0x54>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545e:	d00a      	beq.n	8005476 <prvTaskExitError+0x2a>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <prvTaskExitError+0x28>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	60bb      	str	r3, [r7, #8]
}
 8005488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800548a:	bf00      	nop
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0fc      	beq.n	800548c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c
	...

080054b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <pxCurrentTCBConst2>)
 80054b2:	6819      	ldr	r1, [r3, #0]
 80054b4:	6808      	ldr	r0, [r1, #0]
 80054b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054ba:	f380 8809 	msr	PSP, r0
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f04f 0000 	mov.w	r0, #0
 80054c6:	f380 8811 	msr	BASEPRI, r0
 80054ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80054ce:	4770      	bx	lr

080054d0 <pxCurrentTCBConst2>:
 80054d0:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop

080054d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80054d8:	4806      	ldr	r0, [pc, #24]	; (80054f4 <prvPortStartFirstTask+0x1c>)
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	6800      	ldr	r0, [r0, #0]
 80054de:	f380 8808 	msr	MSP, r0
 80054e2:	b662      	cpsie	i
 80054e4:	b661      	cpsie	f
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	df00      	svc	0
 80054f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054f2:	bf00      	nop
 80054f4:	e000ed08 	.word	0xe000ed08

080054f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054fe:	4b32      	ldr	r3, [pc, #200]	; (80055c8 <xPortStartScheduler+0xd0>)
 8005500:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	22ff      	movs	r2, #255	; 0xff
 800550e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4b2a      	ldr	r3, [pc, #168]	; (80055cc <xPortStartScheduler+0xd4>)
 8005524:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005526:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <xPortStartScheduler+0xd8>)
 8005528:	2207      	movs	r2, #7
 800552a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800552c:	e009      	b.n	8005542 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800552e:	4b28      	ldr	r3, [pc, #160]	; (80055d0 <xPortStartScheduler+0xd8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3b01      	subs	r3, #1
 8005534:	4a26      	ldr	r2, [pc, #152]	; (80055d0 <xPortStartScheduler+0xd8>)
 8005536:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	b2db      	uxtb	r3, r3
 8005540:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d0ef      	beq.n	800552e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800554e:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <xPortStartScheduler+0xd8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f1c3 0307 	rsb	r3, r3, #7
 8005556:	2b04      	cmp	r3, #4
 8005558:	d00a      	beq.n	8005570 <xPortStartScheduler+0x78>
	__asm volatile
 800555a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	60bb      	str	r3, [r7, #8]
}
 800556c:	bf00      	nop
 800556e:	e7fe      	b.n	800556e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005570:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <xPortStartScheduler+0xd8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	4a16      	ldr	r2, [pc, #88]	; (80055d0 <xPortStartScheduler+0xd8>)
 8005578:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800557a:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <xPortStartScheduler+0xd8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005582:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <xPortStartScheduler+0xd8>)
 8005584:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <xPortStartScheduler+0xdc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a10      	ldr	r2, [pc, #64]	; (80055d4 <xPortStartScheduler+0xdc>)
 8005594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800559a:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <xPortStartScheduler+0xdc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a0d      	ldr	r2, [pc, #52]	; (80055d4 <xPortStartScheduler+0xdc>)
 80055a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80055a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055a6:	f000 f8b9 	bl	800571c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <xPortStartScheduler+0xe0>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055b0:	f7ff ff92 	bl	80054d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055b4:	f7ff f8be 	bl	8004734 <vTaskSwitchContext>
	prvTaskExitError();
 80055b8:	f7ff ff48 	bl	800544c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	e000e400 	.word	0xe000e400
 80055cc:	20000ed0 	.word	0x20000ed0
 80055d0:	20000ed4 	.word	0x20000ed4
 80055d4:	e000ed20 	.word	0xe000ed20
 80055d8:	2000000c 	.word	0x2000000c

080055dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	607b      	str	r3, [r7, #4]
}
 80055f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055f6:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <vPortEnterCritical+0x58>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	4a0d      	ldr	r2, [pc, #52]	; (8005634 <vPortEnterCritical+0x58>)
 80055fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <vPortEnterCritical+0x58>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d10f      	bne.n	8005628 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <vPortEnterCritical+0x5c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00a      	beq.n	8005628 <vPortEnterCritical+0x4c>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	603b      	str	r3, [r7, #0]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <vPortEnterCritical+0x4a>
	}
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	2000000c 	.word	0x2000000c
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <vPortExitCritical+0x4c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10a      	bne.n	8005660 <vPortExitCritical+0x24>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	607b      	str	r3, [r7, #4]
}
 800565c:	bf00      	nop
 800565e:	e7fe      	b.n	800565e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005660:	4b09      	ldr	r3, [pc, #36]	; (8005688 <vPortExitCritical+0x4c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3b01      	subs	r3, #1
 8005666:	4a08      	ldr	r2, [pc, #32]	; (8005688 <vPortExitCritical+0x4c>)
 8005668:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <vPortExitCritical+0x4c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d105      	bne.n	800567e <vPortExitCritical+0x42>
 8005672:	2300      	movs	r3, #0
 8005674:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f383 8811 	msr	BASEPRI, r3
}
 800567c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr
 8005688:	2000000c 	.word	0x2000000c
 800568c:	00000000 	.word	0x00000000

08005690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005690:	f3ef 8009 	mrs	r0, PSP
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <pxCurrentTCBConst>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056a0:	6010      	str	r0, [r2, #0]
 80056a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80056a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056aa:	f380 8811 	msr	BASEPRI, r0
 80056ae:	f7ff f841 	bl	8004734 <vTaskSwitchContext>
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f380 8811 	msr	BASEPRI, r0
 80056ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	6808      	ldr	r0, [r1, #0]
 80056c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80056c6:	f380 8809 	msr	PSP, r0
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	4770      	bx	lr

080056d0 <pxCurrentTCBConst>:
 80056d0:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop

080056d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	607b      	str	r3, [r7, #4]
}
 80056f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056f2:	f7fe ff61 	bl	80045b8 <xTaskIncrementTick>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056fc:	4b06      	ldr	r3, [pc, #24]	; (8005718 <xPortSysTickHandler+0x40>)
 80056fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	2300      	movs	r3, #0
 8005706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	f383 8811 	msr	BASEPRI, r3
}
 800570e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	e000ed04 	.word	0xe000ed04

0800571c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005720:	4b0a      	ldr	r3, [pc, #40]	; (800574c <vPortSetupTimerInterrupt+0x30>)
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005726:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <vPortSetupTimerInterrupt+0x34>)
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800572c:	4b09      	ldr	r3, [pc, #36]	; (8005754 <vPortSetupTimerInterrupt+0x38>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a09      	ldr	r2, [pc, #36]	; (8005758 <vPortSetupTimerInterrupt+0x3c>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	099b      	lsrs	r3, r3, #6
 8005738:	4a08      	ldr	r2, [pc, #32]	; (800575c <vPortSetupTimerInterrupt+0x40>)
 800573a:	3b01      	subs	r3, #1
 800573c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800573e:	4b03      	ldr	r3, [pc, #12]	; (800574c <vPortSetupTimerInterrupt+0x30>)
 8005740:	2207      	movs	r2, #7
 8005742:	601a      	str	r2, [r3, #0]
}
 8005744:	bf00      	nop
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	e000e010 	.word	0xe000e010
 8005750:	e000e018 	.word	0xe000e018
 8005754:	20000000 	.word	0x20000000
 8005758:	10624dd3 	.word	0x10624dd3
 800575c:	e000e014 	.word	0xe000e014

08005760 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005766:	f3ef 8305 	mrs	r3, IPSR
 800576a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b0f      	cmp	r3, #15
 8005770:	d914      	bls.n	800579c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005772:	4a16      	ldr	r2, [pc, #88]	; (80057cc <vPortValidateInterruptPriority+0x6c>)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800577c:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <vPortValidateInterruptPriority+0x70>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	7afa      	ldrb	r2, [r7, #11]
 8005782:	429a      	cmp	r2, r3
 8005784:	d20a      	bcs.n	800579c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	607b      	str	r3, [r7, #4]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <vPortValidateInterruptPriority+0x74>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057a4:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <vPortValidateInterruptPriority+0x78>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d90a      	bls.n	80057c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	603b      	str	r3, [r7, #0]
}
 80057be:	bf00      	nop
 80057c0:	e7fe      	b.n	80057c0 <vPortValidateInterruptPriority+0x60>
	}
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr
 80057cc:	e000e3f0 	.word	0xe000e3f0
 80057d0:	20000ed0 	.word	0x20000ed0
 80057d4:	e000ed0c 	.word	0xe000ed0c
 80057d8:	20000ed4 	.word	0x20000ed4

080057dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057e8:	f7fe fe2c 	bl	8004444 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057ec:	4b58      	ldr	r3, [pc, #352]	; (8005950 <pvPortMalloc+0x174>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057f4:	f000 f910 	bl	8005a18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057f8:	4b56      	ldr	r3, [pc, #344]	; (8005954 <pvPortMalloc+0x178>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 808e 	bne.w	8005922 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01d      	beq.n	8005848 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800580c:	2208      	movs	r2, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	2b00      	cmp	r3, #0
 800581c:	d014      	beq.n	8005848 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f023 0307 	bic.w	r3, r3, #7
 8005824:	3308      	adds	r3, #8
 8005826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <pvPortMalloc+0x6c>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	f383 8811 	msr	BASEPRI, r3
 800583a:	f3bf 8f6f 	isb	sy
 800583e:	f3bf 8f4f 	dsb	sy
 8005842:	617b      	str	r3, [r7, #20]
}
 8005844:	bf00      	nop
 8005846:	e7fe      	b.n	8005846 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d069      	beq.n	8005922 <pvPortMalloc+0x146>
 800584e:	4b42      	ldr	r3, [pc, #264]	; (8005958 <pvPortMalloc+0x17c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d864      	bhi.n	8005922 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005858:	4b40      	ldr	r3, [pc, #256]	; (800595c <pvPortMalloc+0x180>)
 800585a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800585c:	4b3f      	ldr	r3, [pc, #252]	; (800595c <pvPortMalloc+0x180>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005862:	e004      	b.n	800586e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	429a      	cmp	r2, r3
 8005876:	d903      	bls.n	8005880 <pvPortMalloc+0xa4>
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1f1      	bne.n	8005864 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005880:	4b33      	ldr	r3, [pc, #204]	; (8005950 <pvPortMalloc+0x174>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005886:	429a      	cmp	r2, r3
 8005888:	d04b      	beq.n	8005922 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2208      	movs	r2, #8
 8005890:	4413      	add	r3, r2
 8005892:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	1ad2      	subs	r2, r2, r3
 80058a4:	2308      	movs	r3, #8
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d91f      	bls.n	80058ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <pvPortMalloc+0xf8>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	613b      	str	r3, [r7, #16]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	1ad2      	subs	r2, r2, r3
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058e6:	69b8      	ldr	r0, [r7, #24]
 80058e8:	f000 f8f8 	bl	8005adc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <pvPortMalloc+0x17c>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	4a18      	ldr	r2, [pc, #96]	; (8005958 <pvPortMalloc+0x17c>)
 80058f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058fa:	4b17      	ldr	r3, [pc, #92]	; (8005958 <pvPortMalloc+0x17c>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b18      	ldr	r3, [pc, #96]	; (8005960 <pvPortMalloc+0x184>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d203      	bcs.n	800590e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005906:	4b14      	ldr	r3, [pc, #80]	; (8005958 <pvPortMalloc+0x17c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a15      	ldr	r2, [pc, #84]	; (8005960 <pvPortMalloc+0x184>)
 800590c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	4b10      	ldr	r3, [pc, #64]	; (8005954 <pvPortMalloc+0x178>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	431a      	orrs	r2, r3
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005922:	f7fe fd9d 	bl	8004460 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <pvPortMalloc+0x16a>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	60fb      	str	r3, [r7, #12]
}
 8005942:	bf00      	nop
 8005944:	e7fe      	b.n	8005944 <pvPortMalloc+0x168>
	return pvReturn;
 8005946:	69fb      	ldr	r3, [r7, #28]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3728      	adds	r7, #40	; 0x28
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20001ae0 	.word	0x20001ae0
 8005954:	20001aec 	.word	0x20001aec
 8005958:	20001ae4 	.word	0x20001ae4
 800595c:	20001ad8 	.word	0x20001ad8
 8005960:	20001ae8 	.word	0x20001ae8

08005964 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d048      	beq.n	8005a08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005976:	2308      	movs	r3, #8
 8005978:	425b      	negs	r3, r3
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4b21      	ldr	r3, [pc, #132]	; (8005a10 <vPortFree+0xac>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <vPortFree+0x44>
	__asm volatile
 8005992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	f3bf 8f6f 	isb	sy
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	60fb      	str	r3, [r7, #12]
}
 80059a4:	bf00      	nop
 80059a6:	e7fe      	b.n	80059a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <vPortFree+0x62>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60bb      	str	r3, [r7, #8]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <vPortFree+0xac>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d019      	beq.n	8005a08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d115      	bne.n	8005a08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <vPortFree+0xac>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	43db      	mvns	r3, r3
 80059e6:	401a      	ands	r2, r3
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059ec:	f7fe fd2a 	bl	8004444 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <vPortFree+0xb0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4413      	add	r3, r2
 80059fa:	4a06      	ldr	r2, [pc, #24]	; (8005a14 <vPortFree+0xb0>)
 80059fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059fe:	6938      	ldr	r0, [r7, #16]
 8005a00:	f000 f86c 	bl	8005adc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a04:	f7fe fd2c 	bl	8004460 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a08:	bf00      	nop
 8005a0a:	3718      	adds	r7, #24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20001aec 	.word	0x20001aec
 8005a14:	20001ae4 	.word	0x20001ae4

08005a18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a24:	4b27      	ldr	r3, [pc, #156]	; (8005ac4 <prvHeapInit+0xac>)
 8005a26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00c      	beq.n	8005a4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3307      	adds	r3, #7
 8005a36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0307 	bic.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <prvHeapInit+0xac>)
 8005a48:	4413      	add	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a50:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <prvHeapInit+0xb0>)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a56:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <prvHeapInit+0xb0>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4413      	add	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a64:	2208      	movs	r2, #8
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0307 	bic.w	r3, r3, #7
 8005a72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4a15      	ldr	r2, [pc, #84]	; (8005acc <prvHeapInit+0xb4>)
 8005a78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a7a:	4b14      	ldr	r3, [pc, #80]	; (8005acc <prvHeapInit+0xb4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a82:	4b12      	ldr	r3, [pc, #72]	; (8005acc <prvHeapInit+0xb4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	1ad2      	subs	r2, r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <prvHeapInit+0xb4>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4a0a      	ldr	r2, [pc, #40]	; (8005ad0 <prvHeapInit+0xb8>)
 8005aa6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <prvHeapInit+0xbc>)
 8005aae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ab0:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <prvHeapInit+0xc0>)
 8005ab2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ab6:	601a      	str	r2, [r3, #0]
}
 8005ab8:	bf00      	nop
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20000ed8 	.word	0x20000ed8
 8005ac8:	20001ad8 	.word	0x20001ad8
 8005acc:	20001ae0 	.word	0x20001ae0
 8005ad0:	20001ae8 	.word	0x20001ae8
 8005ad4:	20001ae4 	.word	0x20001ae4
 8005ad8:	20001aec 	.word	0x20001aec

08005adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ae4:	4b27      	ldr	r3, [pc, #156]	; (8005b84 <prvInsertBlockIntoFreeList+0xa8>)
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e002      	b.n	8005af0 <prvInsertBlockIntoFreeList+0x14>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d8f7      	bhi.n	8005aea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	4413      	add	r3, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d108      	bne.n	8005b1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	441a      	add	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	441a      	add	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d118      	bne.n	8005b64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b14      	ldr	r3, [pc, #80]	; (8005b88 <prvInsertBlockIntoFreeList+0xac>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d00d      	beq.n	8005b5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	441a      	add	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e008      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <prvInsertBlockIntoFreeList+0xac>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e003      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d002      	beq.n	8005b7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr
 8005b84:	20001ad8 	.word	0x20001ad8
 8005b88:	20001ae0 	.word	0x20001ae0

08005b8c <siprintf>:
 8005b8c:	b40e      	push	{r1, r2, r3}
 8005b8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b92:	b500      	push	{lr}
 8005b94:	b09c      	sub	sp, #112	; 0x70
 8005b96:	ab1d      	add	r3, sp, #116	; 0x74
 8005b98:	9002      	str	r0, [sp, #8]
 8005b9a:	9006      	str	r0, [sp, #24]
 8005b9c:	9107      	str	r1, [sp, #28]
 8005b9e:	9104      	str	r1, [sp, #16]
 8005ba0:	4808      	ldr	r0, [pc, #32]	; (8005bc4 <siprintf+0x38>)
 8005ba2:	4909      	ldr	r1, [pc, #36]	; (8005bc8 <siprintf+0x3c>)
 8005ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba8:	9105      	str	r1, [sp, #20]
 8005baa:	6800      	ldr	r0, [r0, #0]
 8005bac:	a902      	add	r1, sp, #8
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	f000 f99c 	bl	8005eec <_svfiprintf_r>
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	9b02      	ldr	r3, [sp, #8]
 8005bb8:	701a      	strb	r2, [r3, #0]
 8005bba:	b01c      	add	sp, #112	; 0x70
 8005bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bc0:	b003      	add	sp, #12
 8005bc2:	4770      	bx	lr
 8005bc4:	2000005c 	.word	0x2000005c
 8005bc8:	ffff0208 	.word	0xffff0208

08005bcc <memset>:
 8005bcc:	4603      	mov	r3, r0
 8005bce:	4402      	add	r2, r0
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d100      	bne.n	8005bd6 <memset+0xa>
 8005bd4:	4770      	bx	lr
 8005bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bda:	e7f9      	b.n	8005bd0 <memset+0x4>

08005bdc <__errno>:
 8005bdc:	4b01      	ldr	r3, [pc, #4]	; (8005be4 <__errno+0x8>)
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	2000005c 	.word	0x2000005c

08005be8 <__libc_init_array>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	2600      	movs	r6, #0
 8005bec:	4d0c      	ldr	r5, [pc, #48]	; (8005c20 <__libc_init_array+0x38>)
 8005bee:	4c0d      	ldr	r4, [pc, #52]	; (8005c24 <__libc_init_array+0x3c>)
 8005bf0:	1b64      	subs	r4, r4, r5
 8005bf2:	10a4      	asrs	r4, r4, #2
 8005bf4:	42a6      	cmp	r6, r4
 8005bf6:	d109      	bne.n	8005c0c <__libc_init_array+0x24>
 8005bf8:	f000 fc7a 	bl	80064f0 <_init>
 8005bfc:	2600      	movs	r6, #0
 8005bfe:	4d0a      	ldr	r5, [pc, #40]	; (8005c28 <__libc_init_array+0x40>)
 8005c00:	4c0a      	ldr	r4, [pc, #40]	; (8005c2c <__libc_init_array+0x44>)
 8005c02:	1b64      	subs	r4, r4, r5
 8005c04:	10a4      	asrs	r4, r4, #2
 8005c06:	42a6      	cmp	r6, r4
 8005c08:	d105      	bne.n	8005c16 <__libc_init_array+0x2e>
 8005c0a:	bd70      	pop	{r4, r5, r6, pc}
 8005c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c10:	4798      	blx	r3
 8005c12:	3601      	adds	r6, #1
 8005c14:	e7ee      	b.n	8005bf4 <__libc_init_array+0xc>
 8005c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c1a:	4798      	blx	r3
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	e7f2      	b.n	8005c06 <__libc_init_array+0x1e>
 8005c20:	080065f4 	.word	0x080065f4
 8005c24:	080065f4 	.word	0x080065f4
 8005c28:	080065f4 	.word	0x080065f4
 8005c2c:	080065f8 	.word	0x080065f8

08005c30 <__retarget_lock_acquire_recursive>:
 8005c30:	4770      	bx	lr

08005c32 <__retarget_lock_release_recursive>:
 8005c32:	4770      	bx	lr

08005c34 <memcpy>:
 8005c34:	440a      	add	r2, r1
 8005c36:	4291      	cmp	r1, r2
 8005c38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005c3c:	d100      	bne.n	8005c40 <memcpy+0xc>
 8005c3e:	4770      	bx	lr
 8005c40:	b510      	push	{r4, lr}
 8005c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c46:	4291      	cmp	r1, r2
 8005c48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c4c:	d1f9      	bne.n	8005c42 <memcpy+0xe>
 8005c4e:	bd10      	pop	{r4, pc}

08005c50 <_free_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4605      	mov	r5, r0
 8005c54:	2900      	cmp	r1, #0
 8005c56:	d040      	beq.n	8005cda <_free_r+0x8a>
 8005c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c5c:	1f0c      	subs	r4, r1, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	bfb8      	it	lt
 8005c62:	18e4      	addlt	r4, r4, r3
 8005c64:	f000 f8dc 	bl	8005e20 <__malloc_lock>
 8005c68:	4a1c      	ldr	r2, [pc, #112]	; (8005cdc <_free_r+0x8c>)
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	b933      	cbnz	r3, 8005c7c <_free_r+0x2c>
 8005c6e:	6063      	str	r3, [r4, #4]
 8005c70:	6014      	str	r4, [r2, #0]
 8005c72:	4628      	mov	r0, r5
 8005c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c78:	f000 b8d8 	b.w	8005e2c <__malloc_unlock>
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d908      	bls.n	8005c92 <_free_r+0x42>
 8005c80:	6820      	ldr	r0, [r4, #0]
 8005c82:	1821      	adds	r1, r4, r0
 8005c84:	428b      	cmp	r3, r1
 8005c86:	bf01      	itttt	eq
 8005c88:	6819      	ldreq	r1, [r3, #0]
 8005c8a:	685b      	ldreq	r3, [r3, #4]
 8005c8c:	1809      	addeq	r1, r1, r0
 8005c8e:	6021      	streq	r1, [r4, #0]
 8005c90:	e7ed      	b.n	8005c6e <_free_r+0x1e>
 8005c92:	461a      	mov	r2, r3
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b10b      	cbz	r3, 8005c9c <_free_r+0x4c>
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	d9fa      	bls.n	8005c92 <_free_r+0x42>
 8005c9c:	6811      	ldr	r1, [r2, #0]
 8005c9e:	1850      	adds	r0, r2, r1
 8005ca0:	42a0      	cmp	r0, r4
 8005ca2:	d10b      	bne.n	8005cbc <_free_r+0x6c>
 8005ca4:	6820      	ldr	r0, [r4, #0]
 8005ca6:	4401      	add	r1, r0
 8005ca8:	1850      	adds	r0, r2, r1
 8005caa:	4283      	cmp	r3, r0
 8005cac:	6011      	str	r1, [r2, #0]
 8005cae:	d1e0      	bne.n	8005c72 <_free_r+0x22>
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4408      	add	r0, r1
 8005cb6:	6010      	str	r0, [r2, #0]
 8005cb8:	6053      	str	r3, [r2, #4]
 8005cba:	e7da      	b.n	8005c72 <_free_r+0x22>
 8005cbc:	d902      	bls.n	8005cc4 <_free_r+0x74>
 8005cbe:	230c      	movs	r3, #12
 8005cc0:	602b      	str	r3, [r5, #0]
 8005cc2:	e7d6      	b.n	8005c72 <_free_r+0x22>
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	1821      	adds	r1, r4, r0
 8005cc8:	428b      	cmp	r3, r1
 8005cca:	bf01      	itttt	eq
 8005ccc:	6819      	ldreq	r1, [r3, #0]
 8005cce:	685b      	ldreq	r3, [r3, #4]
 8005cd0:	1809      	addeq	r1, r1, r0
 8005cd2:	6021      	streq	r1, [r4, #0]
 8005cd4:	6063      	str	r3, [r4, #4]
 8005cd6:	6054      	str	r4, [r2, #4]
 8005cd8:	e7cb      	b.n	8005c72 <_free_r+0x22>
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	20001c30 	.word	0x20001c30

08005ce0 <sbrk_aligned>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	4e0e      	ldr	r6, [pc, #56]	; (8005d1c <sbrk_aligned+0x3c>)
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	6831      	ldr	r1, [r6, #0]
 8005ce8:	4605      	mov	r5, r0
 8005cea:	b911      	cbnz	r1, 8005cf2 <sbrk_aligned+0x12>
 8005cec:	f000 fbaa 	bl	8006444 <_sbrk_r>
 8005cf0:	6030      	str	r0, [r6, #0]
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 fba5 	bl	8006444 <_sbrk_r>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	d00a      	beq.n	8005d14 <sbrk_aligned+0x34>
 8005cfe:	1cc4      	adds	r4, r0, #3
 8005d00:	f024 0403 	bic.w	r4, r4, #3
 8005d04:	42a0      	cmp	r0, r4
 8005d06:	d007      	beq.n	8005d18 <sbrk_aligned+0x38>
 8005d08:	1a21      	subs	r1, r4, r0
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f000 fb9a 	bl	8006444 <_sbrk_r>
 8005d10:	3001      	adds	r0, #1
 8005d12:	d101      	bne.n	8005d18 <sbrk_aligned+0x38>
 8005d14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d18:	4620      	mov	r0, r4
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	20001c34 	.word	0x20001c34

08005d20 <_malloc_r>:
 8005d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d24:	1ccd      	adds	r5, r1, #3
 8005d26:	f025 0503 	bic.w	r5, r5, #3
 8005d2a:	3508      	adds	r5, #8
 8005d2c:	2d0c      	cmp	r5, #12
 8005d2e:	bf38      	it	cc
 8005d30:	250c      	movcc	r5, #12
 8005d32:	2d00      	cmp	r5, #0
 8005d34:	4607      	mov	r7, r0
 8005d36:	db01      	blt.n	8005d3c <_malloc_r+0x1c>
 8005d38:	42a9      	cmp	r1, r5
 8005d3a:	d905      	bls.n	8005d48 <_malloc_r+0x28>
 8005d3c:	230c      	movs	r3, #12
 8005d3e:	2600      	movs	r6, #0
 8005d40:	603b      	str	r3, [r7, #0]
 8005d42:	4630      	mov	r0, r6
 8005d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e1c <_malloc_r+0xfc>
 8005d4c:	f000 f868 	bl	8005e20 <__malloc_lock>
 8005d50:	f8d8 3000 	ldr.w	r3, [r8]
 8005d54:	461c      	mov	r4, r3
 8005d56:	bb5c      	cbnz	r4, 8005db0 <_malloc_r+0x90>
 8005d58:	4629      	mov	r1, r5
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f7ff ffc0 	bl	8005ce0 <sbrk_aligned>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	4604      	mov	r4, r0
 8005d64:	d155      	bne.n	8005e12 <_malloc_r+0xf2>
 8005d66:	f8d8 4000 	ldr.w	r4, [r8]
 8005d6a:	4626      	mov	r6, r4
 8005d6c:	2e00      	cmp	r6, #0
 8005d6e:	d145      	bne.n	8005dfc <_malloc_r+0xdc>
 8005d70:	2c00      	cmp	r4, #0
 8005d72:	d048      	beq.n	8005e06 <_malloc_r+0xe6>
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	4631      	mov	r1, r6
 8005d78:	4638      	mov	r0, r7
 8005d7a:	eb04 0903 	add.w	r9, r4, r3
 8005d7e:	f000 fb61 	bl	8006444 <_sbrk_r>
 8005d82:	4581      	cmp	r9, r0
 8005d84:	d13f      	bne.n	8005e06 <_malloc_r+0xe6>
 8005d86:	6821      	ldr	r1, [r4, #0]
 8005d88:	4638      	mov	r0, r7
 8005d8a:	1a6d      	subs	r5, r5, r1
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f7ff ffa7 	bl	8005ce0 <sbrk_aligned>
 8005d92:	3001      	adds	r0, #1
 8005d94:	d037      	beq.n	8005e06 <_malloc_r+0xe6>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	442b      	add	r3, r5
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d038      	beq.n	8005e16 <_malloc_r+0xf6>
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	42a2      	cmp	r2, r4
 8005da8:	d12b      	bne.n	8005e02 <_malloc_r+0xe2>
 8005daa:	2200      	movs	r2, #0
 8005dac:	605a      	str	r2, [r3, #4]
 8005dae:	e00f      	b.n	8005dd0 <_malloc_r+0xb0>
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	1b52      	subs	r2, r2, r5
 8005db4:	d41f      	bmi.n	8005df6 <_malloc_r+0xd6>
 8005db6:	2a0b      	cmp	r2, #11
 8005db8:	d917      	bls.n	8005dea <_malloc_r+0xca>
 8005dba:	1961      	adds	r1, r4, r5
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	6025      	str	r5, [r4, #0]
 8005dc0:	bf18      	it	ne
 8005dc2:	6059      	strne	r1, [r3, #4]
 8005dc4:	6863      	ldr	r3, [r4, #4]
 8005dc6:	bf08      	it	eq
 8005dc8:	f8c8 1000 	streq.w	r1, [r8]
 8005dcc:	5162      	str	r2, [r4, r5]
 8005dce:	604b      	str	r3, [r1, #4]
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f104 060b 	add.w	r6, r4, #11
 8005dd6:	f000 f829 	bl	8005e2c <__malloc_unlock>
 8005dda:	f026 0607 	bic.w	r6, r6, #7
 8005dde:	1d23      	adds	r3, r4, #4
 8005de0:	1af2      	subs	r2, r6, r3
 8005de2:	d0ae      	beq.n	8005d42 <_malloc_r+0x22>
 8005de4:	1b9b      	subs	r3, r3, r6
 8005de6:	50a3      	str	r3, [r4, r2]
 8005de8:	e7ab      	b.n	8005d42 <_malloc_r+0x22>
 8005dea:	42a3      	cmp	r3, r4
 8005dec:	6862      	ldr	r2, [r4, #4]
 8005dee:	d1dd      	bne.n	8005dac <_malloc_r+0x8c>
 8005df0:	f8c8 2000 	str.w	r2, [r8]
 8005df4:	e7ec      	b.n	8005dd0 <_malloc_r+0xb0>
 8005df6:	4623      	mov	r3, r4
 8005df8:	6864      	ldr	r4, [r4, #4]
 8005dfa:	e7ac      	b.n	8005d56 <_malloc_r+0x36>
 8005dfc:	4634      	mov	r4, r6
 8005dfe:	6876      	ldr	r6, [r6, #4]
 8005e00:	e7b4      	b.n	8005d6c <_malloc_r+0x4c>
 8005e02:	4613      	mov	r3, r2
 8005e04:	e7cc      	b.n	8005da0 <_malloc_r+0x80>
 8005e06:	230c      	movs	r3, #12
 8005e08:	4638      	mov	r0, r7
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	f000 f80e 	bl	8005e2c <__malloc_unlock>
 8005e10:	e797      	b.n	8005d42 <_malloc_r+0x22>
 8005e12:	6025      	str	r5, [r4, #0]
 8005e14:	e7dc      	b.n	8005dd0 <_malloc_r+0xb0>
 8005e16:	605b      	str	r3, [r3, #4]
 8005e18:	deff      	udf	#255	; 0xff
 8005e1a:	bf00      	nop
 8005e1c:	20001c30 	.word	0x20001c30

08005e20 <__malloc_lock>:
 8005e20:	4801      	ldr	r0, [pc, #4]	; (8005e28 <__malloc_lock+0x8>)
 8005e22:	f7ff bf05 	b.w	8005c30 <__retarget_lock_acquire_recursive>
 8005e26:	bf00      	nop
 8005e28:	20001c2c 	.word	0x20001c2c

08005e2c <__malloc_unlock>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	; (8005e34 <__malloc_unlock+0x8>)
 8005e2e:	f7ff bf00 	b.w	8005c32 <__retarget_lock_release_recursive>
 8005e32:	bf00      	nop
 8005e34:	20001c2c 	.word	0x20001c2c

08005e38 <__ssputs_r>:
 8005e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	461f      	mov	r7, r3
 8005e3e:	688e      	ldr	r6, [r1, #8]
 8005e40:	4682      	mov	sl, r0
 8005e42:	42be      	cmp	r6, r7
 8005e44:	460c      	mov	r4, r1
 8005e46:	4690      	mov	r8, r2
 8005e48:	680b      	ldr	r3, [r1, #0]
 8005e4a:	d82c      	bhi.n	8005ea6 <__ssputs_r+0x6e>
 8005e4c:	898a      	ldrh	r2, [r1, #12]
 8005e4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e52:	d026      	beq.n	8005ea2 <__ssputs_r+0x6a>
 8005e54:	6965      	ldr	r5, [r4, #20]
 8005e56:	6909      	ldr	r1, [r1, #16]
 8005e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e5c:	eba3 0901 	sub.w	r9, r3, r1
 8005e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e64:	1c7b      	adds	r3, r7, #1
 8005e66:	444b      	add	r3, r9
 8005e68:	106d      	asrs	r5, r5, #1
 8005e6a:	429d      	cmp	r5, r3
 8005e6c:	bf38      	it	cc
 8005e6e:	461d      	movcc	r5, r3
 8005e70:	0553      	lsls	r3, r2, #21
 8005e72:	d527      	bpl.n	8005ec4 <__ssputs_r+0x8c>
 8005e74:	4629      	mov	r1, r5
 8005e76:	f7ff ff53 	bl	8005d20 <_malloc_r>
 8005e7a:	4606      	mov	r6, r0
 8005e7c:	b360      	cbz	r0, 8005ed8 <__ssputs_r+0xa0>
 8005e7e:	464a      	mov	r2, r9
 8005e80:	6921      	ldr	r1, [r4, #16]
 8005e82:	f7ff fed7 	bl	8005c34 <memcpy>
 8005e86:	89a3      	ldrh	r3, [r4, #12]
 8005e88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e90:	81a3      	strh	r3, [r4, #12]
 8005e92:	6126      	str	r6, [r4, #16]
 8005e94:	444e      	add	r6, r9
 8005e96:	6026      	str	r6, [r4, #0]
 8005e98:	463e      	mov	r6, r7
 8005e9a:	6165      	str	r5, [r4, #20]
 8005e9c:	eba5 0509 	sub.w	r5, r5, r9
 8005ea0:	60a5      	str	r5, [r4, #8]
 8005ea2:	42be      	cmp	r6, r7
 8005ea4:	d900      	bls.n	8005ea8 <__ssputs_r+0x70>
 8005ea6:	463e      	mov	r6, r7
 8005ea8:	4632      	mov	r2, r6
 8005eaa:	4641      	mov	r1, r8
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	f000 faaf 	bl	8006410 <memmove>
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	68a3      	ldr	r3, [r4, #8]
 8005eb6:	1b9b      	subs	r3, r3, r6
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	4433      	add	r3, r6
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec4:	462a      	mov	r2, r5
 8005ec6:	f000 fadb 	bl	8006480 <_realloc_r>
 8005eca:	4606      	mov	r6, r0
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d1e0      	bne.n	8005e92 <__ssputs_r+0x5a>
 8005ed0:	4650      	mov	r0, sl
 8005ed2:	6921      	ldr	r1, [r4, #16]
 8005ed4:	f7ff febc 	bl	8005c50 <_free_r>
 8005ed8:	230c      	movs	r3, #12
 8005eda:	f8ca 3000 	str.w	r3, [sl]
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee8:	81a3      	strh	r3, [r4, #12]
 8005eea:	e7e9      	b.n	8005ec0 <__ssputs_r+0x88>

08005eec <_svfiprintf_r>:
 8005eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef0:	4698      	mov	r8, r3
 8005ef2:	898b      	ldrh	r3, [r1, #12]
 8005ef4:	4607      	mov	r7, r0
 8005ef6:	061b      	lsls	r3, r3, #24
 8005ef8:	460d      	mov	r5, r1
 8005efa:	4614      	mov	r4, r2
 8005efc:	b09d      	sub	sp, #116	; 0x74
 8005efe:	d50e      	bpl.n	8005f1e <_svfiprintf_r+0x32>
 8005f00:	690b      	ldr	r3, [r1, #16]
 8005f02:	b963      	cbnz	r3, 8005f1e <_svfiprintf_r+0x32>
 8005f04:	2140      	movs	r1, #64	; 0x40
 8005f06:	f7ff ff0b 	bl	8005d20 <_malloc_r>
 8005f0a:	6028      	str	r0, [r5, #0]
 8005f0c:	6128      	str	r0, [r5, #16]
 8005f0e:	b920      	cbnz	r0, 8005f1a <_svfiprintf_r+0x2e>
 8005f10:	230c      	movs	r3, #12
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f18:	e0d0      	b.n	80060bc <_svfiprintf_r+0x1d0>
 8005f1a:	2340      	movs	r3, #64	; 0x40
 8005f1c:	616b      	str	r3, [r5, #20]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9309      	str	r3, [sp, #36]	; 0x24
 8005f22:	2320      	movs	r3, #32
 8005f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f28:	2330      	movs	r3, #48	; 0x30
 8005f2a:	f04f 0901 	mov.w	r9, #1
 8005f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f32:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80060d4 <_svfiprintf_r+0x1e8>
 8005f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f3a:	4623      	mov	r3, r4
 8005f3c:	469a      	mov	sl, r3
 8005f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f42:	b10a      	cbz	r2, 8005f48 <_svfiprintf_r+0x5c>
 8005f44:	2a25      	cmp	r2, #37	; 0x25
 8005f46:	d1f9      	bne.n	8005f3c <_svfiprintf_r+0x50>
 8005f48:	ebba 0b04 	subs.w	fp, sl, r4
 8005f4c:	d00b      	beq.n	8005f66 <_svfiprintf_r+0x7a>
 8005f4e:	465b      	mov	r3, fp
 8005f50:	4622      	mov	r2, r4
 8005f52:	4629      	mov	r1, r5
 8005f54:	4638      	mov	r0, r7
 8005f56:	f7ff ff6f 	bl	8005e38 <__ssputs_r>
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f000 80a9 	beq.w	80060b2 <_svfiprintf_r+0x1c6>
 8005f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f62:	445a      	add	r2, fp
 8005f64:	9209      	str	r2, [sp, #36]	; 0x24
 8005f66:	f89a 3000 	ldrb.w	r3, [sl]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 80a1 	beq.w	80060b2 <_svfiprintf_r+0x1c6>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f7a:	f10a 0a01 	add.w	sl, sl, #1
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	9307      	str	r3, [sp, #28]
 8005f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f86:	931a      	str	r3, [sp, #104]	; 0x68
 8005f88:	4654      	mov	r4, sl
 8005f8a:	2205      	movs	r2, #5
 8005f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f90:	4850      	ldr	r0, [pc, #320]	; (80060d4 <_svfiprintf_r+0x1e8>)
 8005f92:	f000 fa67 	bl	8006464 <memchr>
 8005f96:	9a04      	ldr	r2, [sp, #16]
 8005f98:	b9d8      	cbnz	r0, 8005fd2 <_svfiprintf_r+0xe6>
 8005f9a:	06d0      	lsls	r0, r2, #27
 8005f9c:	bf44      	itt	mi
 8005f9e:	2320      	movmi	r3, #32
 8005fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fa4:	0711      	lsls	r1, r2, #28
 8005fa6:	bf44      	itt	mi
 8005fa8:	232b      	movmi	r3, #43	; 0x2b
 8005faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fae:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fb4:	d015      	beq.n	8005fe2 <_svfiprintf_r+0xf6>
 8005fb6:	4654      	mov	r4, sl
 8005fb8:	2000      	movs	r0, #0
 8005fba:	f04f 0c0a 	mov.w	ip, #10
 8005fbe:	9a07      	ldr	r2, [sp, #28]
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fc6:	3b30      	subs	r3, #48	; 0x30
 8005fc8:	2b09      	cmp	r3, #9
 8005fca:	d94d      	bls.n	8006068 <_svfiprintf_r+0x17c>
 8005fcc:	b1b0      	cbz	r0, 8005ffc <_svfiprintf_r+0x110>
 8005fce:	9207      	str	r2, [sp, #28]
 8005fd0:	e014      	b.n	8005ffc <_svfiprintf_r+0x110>
 8005fd2:	eba0 0308 	sub.w	r3, r0, r8
 8005fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	46a2      	mov	sl, r4
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	e7d2      	b.n	8005f88 <_svfiprintf_r+0x9c>
 8005fe2:	9b03      	ldr	r3, [sp, #12]
 8005fe4:	1d19      	adds	r1, r3, #4
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	9103      	str	r1, [sp, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bfbb      	ittet	lt
 8005fee:	425b      	neglt	r3, r3
 8005ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8005ff4:	9307      	strge	r3, [sp, #28]
 8005ff6:	9307      	strlt	r3, [sp, #28]
 8005ff8:	bfb8      	it	lt
 8005ffa:	9204      	strlt	r2, [sp, #16]
 8005ffc:	7823      	ldrb	r3, [r4, #0]
 8005ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8006000:	d10c      	bne.n	800601c <_svfiprintf_r+0x130>
 8006002:	7863      	ldrb	r3, [r4, #1]
 8006004:	2b2a      	cmp	r3, #42	; 0x2a
 8006006:	d134      	bne.n	8006072 <_svfiprintf_r+0x186>
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	3402      	adds	r4, #2
 800600c:	1d1a      	adds	r2, r3, #4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	9203      	str	r2, [sp, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	bfb8      	it	lt
 8006016:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800601a:	9305      	str	r3, [sp, #20]
 800601c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80060d8 <_svfiprintf_r+0x1ec>
 8006020:	2203      	movs	r2, #3
 8006022:	4650      	mov	r0, sl
 8006024:	7821      	ldrb	r1, [r4, #0]
 8006026:	f000 fa1d 	bl	8006464 <memchr>
 800602a:	b138      	cbz	r0, 800603c <_svfiprintf_r+0x150>
 800602c:	2240      	movs	r2, #64	; 0x40
 800602e:	9b04      	ldr	r3, [sp, #16]
 8006030:	eba0 000a 	sub.w	r0, r0, sl
 8006034:	4082      	lsls	r2, r0
 8006036:	4313      	orrs	r3, r2
 8006038:	3401      	adds	r4, #1
 800603a:	9304      	str	r3, [sp, #16]
 800603c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006040:	2206      	movs	r2, #6
 8006042:	4826      	ldr	r0, [pc, #152]	; (80060dc <_svfiprintf_r+0x1f0>)
 8006044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006048:	f000 fa0c 	bl	8006464 <memchr>
 800604c:	2800      	cmp	r0, #0
 800604e:	d038      	beq.n	80060c2 <_svfiprintf_r+0x1d6>
 8006050:	4b23      	ldr	r3, [pc, #140]	; (80060e0 <_svfiprintf_r+0x1f4>)
 8006052:	bb1b      	cbnz	r3, 800609c <_svfiprintf_r+0x1b0>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	3307      	adds	r3, #7
 8006058:	f023 0307 	bic.w	r3, r3, #7
 800605c:	3308      	adds	r3, #8
 800605e:	9303      	str	r3, [sp, #12]
 8006060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006062:	4433      	add	r3, r6
 8006064:	9309      	str	r3, [sp, #36]	; 0x24
 8006066:	e768      	b.n	8005f3a <_svfiprintf_r+0x4e>
 8006068:	460c      	mov	r4, r1
 800606a:	2001      	movs	r0, #1
 800606c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006070:	e7a6      	b.n	8005fc0 <_svfiprintf_r+0xd4>
 8006072:	2300      	movs	r3, #0
 8006074:	f04f 0c0a 	mov.w	ip, #10
 8006078:	4619      	mov	r1, r3
 800607a:	3401      	adds	r4, #1
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	4620      	mov	r0, r4
 8006080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006084:	3a30      	subs	r2, #48	; 0x30
 8006086:	2a09      	cmp	r2, #9
 8006088:	d903      	bls.n	8006092 <_svfiprintf_r+0x1a6>
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0c6      	beq.n	800601c <_svfiprintf_r+0x130>
 800608e:	9105      	str	r1, [sp, #20]
 8006090:	e7c4      	b.n	800601c <_svfiprintf_r+0x130>
 8006092:	4604      	mov	r4, r0
 8006094:	2301      	movs	r3, #1
 8006096:	fb0c 2101 	mla	r1, ip, r1, r2
 800609a:	e7f0      	b.n	800607e <_svfiprintf_r+0x192>
 800609c:	ab03      	add	r3, sp, #12
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	462a      	mov	r2, r5
 80060a2:	4638      	mov	r0, r7
 80060a4:	4b0f      	ldr	r3, [pc, #60]	; (80060e4 <_svfiprintf_r+0x1f8>)
 80060a6:	a904      	add	r1, sp, #16
 80060a8:	f3af 8000 	nop.w
 80060ac:	1c42      	adds	r2, r0, #1
 80060ae:	4606      	mov	r6, r0
 80060b0:	d1d6      	bne.n	8006060 <_svfiprintf_r+0x174>
 80060b2:	89ab      	ldrh	r3, [r5, #12]
 80060b4:	065b      	lsls	r3, r3, #25
 80060b6:	f53f af2d 	bmi.w	8005f14 <_svfiprintf_r+0x28>
 80060ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060bc:	b01d      	add	sp, #116	; 0x74
 80060be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c2:	ab03      	add	r3, sp, #12
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	462a      	mov	r2, r5
 80060c8:	4638      	mov	r0, r7
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <_svfiprintf_r+0x1f8>)
 80060cc:	a904      	add	r1, sp, #16
 80060ce:	f000 f87d 	bl	80061cc <_printf_i>
 80060d2:	e7eb      	b.n	80060ac <_svfiprintf_r+0x1c0>
 80060d4:	080065be 	.word	0x080065be
 80060d8:	080065c4 	.word	0x080065c4
 80060dc:	080065c8 	.word	0x080065c8
 80060e0:	00000000 	.word	0x00000000
 80060e4:	08005e39 	.word	0x08005e39

080060e8 <_printf_common>:
 80060e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ec:	4616      	mov	r6, r2
 80060ee:	4699      	mov	r9, r3
 80060f0:	688a      	ldr	r2, [r1, #8]
 80060f2:	690b      	ldr	r3, [r1, #16]
 80060f4:	4607      	mov	r7, r0
 80060f6:	4293      	cmp	r3, r2
 80060f8:	bfb8      	it	lt
 80060fa:	4613      	movlt	r3, r2
 80060fc:	6033      	str	r3, [r6, #0]
 80060fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006102:	460c      	mov	r4, r1
 8006104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006108:	b10a      	cbz	r2, 800610e <_printf_common+0x26>
 800610a:	3301      	adds	r3, #1
 800610c:	6033      	str	r3, [r6, #0]
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	0699      	lsls	r1, r3, #26
 8006112:	bf42      	ittt	mi
 8006114:	6833      	ldrmi	r3, [r6, #0]
 8006116:	3302      	addmi	r3, #2
 8006118:	6033      	strmi	r3, [r6, #0]
 800611a:	6825      	ldr	r5, [r4, #0]
 800611c:	f015 0506 	ands.w	r5, r5, #6
 8006120:	d106      	bne.n	8006130 <_printf_common+0x48>
 8006122:	f104 0a19 	add.w	sl, r4, #25
 8006126:	68e3      	ldr	r3, [r4, #12]
 8006128:	6832      	ldr	r2, [r6, #0]
 800612a:	1a9b      	subs	r3, r3, r2
 800612c:	42ab      	cmp	r3, r5
 800612e:	dc2b      	bgt.n	8006188 <_printf_common+0xa0>
 8006130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006134:	1e13      	subs	r3, r2, #0
 8006136:	6822      	ldr	r2, [r4, #0]
 8006138:	bf18      	it	ne
 800613a:	2301      	movne	r3, #1
 800613c:	0692      	lsls	r2, r2, #26
 800613e:	d430      	bmi.n	80061a2 <_printf_common+0xba>
 8006140:	4649      	mov	r1, r9
 8006142:	4638      	mov	r0, r7
 8006144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006148:	47c0      	blx	r8
 800614a:	3001      	adds	r0, #1
 800614c:	d023      	beq.n	8006196 <_printf_common+0xae>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	6922      	ldr	r2, [r4, #16]
 8006152:	f003 0306 	and.w	r3, r3, #6
 8006156:	2b04      	cmp	r3, #4
 8006158:	bf14      	ite	ne
 800615a:	2500      	movne	r5, #0
 800615c:	6833      	ldreq	r3, [r6, #0]
 800615e:	f04f 0600 	mov.w	r6, #0
 8006162:	bf08      	it	eq
 8006164:	68e5      	ldreq	r5, [r4, #12]
 8006166:	f104 041a 	add.w	r4, r4, #26
 800616a:	bf08      	it	eq
 800616c:	1aed      	subeq	r5, r5, r3
 800616e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006172:	bf08      	it	eq
 8006174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006178:	4293      	cmp	r3, r2
 800617a:	bfc4      	itt	gt
 800617c:	1a9b      	subgt	r3, r3, r2
 800617e:	18ed      	addgt	r5, r5, r3
 8006180:	42b5      	cmp	r5, r6
 8006182:	d11a      	bne.n	80061ba <_printf_common+0xd2>
 8006184:	2000      	movs	r0, #0
 8006186:	e008      	b.n	800619a <_printf_common+0xb2>
 8006188:	2301      	movs	r3, #1
 800618a:	4652      	mov	r2, sl
 800618c:	4649      	mov	r1, r9
 800618e:	4638      	mov	r0, r7
 8006190:	47c0      	blx	r8
 8006192:	3001      	adds	r0, #1
 8006194:	d103      	bne.n	800619e <_printf_common+0xb6>
 8006196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800619a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800619e:	3501      	adds	r5, #1
 80061a0:	e7c1      	b.n	8006126 <_printf_common+0x3e>
 80061a2:	2030      	movs	r0, #48	; 0x30
 80061a4:	18e1      	adds	r1, r4, r3
 80061a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061b0:	4422      	add	r2, r4
 80061b2:	3302      	adds	r3, #2
 80061b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061b8:	e7c2      	b.n	8006140 <_printf_common+0x58>
 80061ba:	2301      	movs	r3, #1
 80061bc:	4622      	mov	r2, r4
 80061be:	4649      	mov	r1, r9
 80061c0:	4638      	mov	r0, r7
 80061c2:	47c0      	blx	r8
 80061c4:	3001      	adds	r0, #1
 80061c6:	d0e6      	beq.n	8006196 <_printf_common+0xae>
 80061c8:	3601      	adds	r6, #1
 80061ca:	e7d9      	b.n	8006180 <_printf_common+0x98>

080061cc <_printf_i>:
 80061cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d0:	7e0f      	ldrb	r7, [r1, #24]
 80061d2:	4691      	mov	r9, r2
 80061d4:	2f78      	cmp	r7, #120	; 0x78
 80061d6:	4680      	mov	r8, r0
 80061d8:	460c      	mov	r4, r1
 80061da:	469a      	mov	sl, r3
 80061dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061e2:	d807      	bhi.n	80061f4 <_printf_i+0x28>
 80061e4:	2f62      	cmp	r7, #98	; 0x62
 80061e6:	d80a      	bhi.n	80061fe <_printf_i+0x32>
 80061e8:	2f00      	cmp	r7, #0
 80061ea:	f000 80d5 	beq.w	8006398 <_printf_i+0x1cc>
 80061ee:	2f58      	cmp	r7, #88	; 0x58
 80061f0:	f000 80c1 	beq.w	8006376 <_printf_i+0x1aa>
 80061f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061fc:	e03a      	b.n	8006274 <_printf_i+0xa8>
 80061fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006202:	2b15      	cmp	r3, #21
 8006204:	d8f6      	bhi.n	80061f4 <_printf_i+0x28>
 8006206:	a101      	add	r1, pc, #4	; (adr r1, 800620c <_printf_i+0x40>)
 8006208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800620c:	08006265 	.word	0x08006265
 8006210:	08006279 	.word	0x08006279
 8006214:	080061f5 	.word	0x080061f5
 8006218:	080061f5 	.word	0x080061f5
 800621c:	080061f5 	.word	0x080061f5
 8006220:	080061f5 	.word	0x080061f5
 8006224:	08006279 	.word	0x08006279
 8006228:	080061f5 	.word	0x080061f5
 800622c:	080061f5 	.word	0x080061f5
 8006230:	080061f5 	.word	0x080061f5
 8006234:	080061f5 	.word	0x080061f5
 8006238:	0800637f 	.word	0x0800637f
 800623c:	080062a5 	.word	0x080062a5
 8006240:	08006339 	.word	0x08006339
 8006244:	080061f5 	.word	0x080061f5
 8006248:	080061f5 	.word	0x080061f5
 800624c:	080063a1 	.word	0x080063a1
 8006250:	080061f5 	.word	0x080061f5
 8006254:	080062a5 	.word	0x080062a5
 8006258:	080061f5 	.word	0x080061f5
 800625c:	080061f5 	.word	0x080061f5
 8006260:	08006341 	.word	0x08006341
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	1d1a      	adds	r2, r3, #4
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	602a      	str	r2, [r5, #0]
 800626c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006274:	2301      	movs	r3, #1
 8006276:	e0a0      	b.n	80063ba <_printf_i+0x1ee>
 8006278:	6820      	ldr	r0, [r4, #0]
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	0607      	lsls	r7, r0, #24
 800627e:	f103 0104 	add.w	r1, r3, #4
 8006282:	6029      	str	r1, [r5, #0]
 8006284:	d501      	bpl.n	800628a <_printf_i+0xbe>
 8006286:	681e      	ldr	r6, [r3, #0]
 8006288:	e003      	b.n	8006292 <_printf_i+0xc6>
 800628a:	0646      	lsls	r6, r0, #25
 800628c:	d5fb      	bpl.n	8006286 <_printf_i+0xba>
 800628e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006292:	2e00      	cmp	r6, #0
 8006294:	da03      	bge.n	800629e <_printf_i+0xd2>
 8006296:	232d      	movs	r3, #45	; 0x2d
 8006298:	4276      	negs	r6, r6
 800629a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629e:	230a      	movs	r3, #10
 80062a0:	4859      	ldr	r0, [pc, #356]	; (8006408 <_printf_i+0x23c>)
 80062a2:	e012      	b.n	80062ca <_printf_i+0xfe>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	6820      	ldr	r0, [r4, #0]
 80062a8:	1d19      	adds	r1, r3, #4
 80062aa:	6029      	str	r1, [r5, #0]
 80062ac:	0605      	lsls	r5, r0, #24
 80062ae:	d501      	bpl.n	80062b4 <_printf_i+0xe8>
 80062b0:	681e      	ldr	r6, [r3, #0]
 80062b2:	e002      	b.n	80062ba <_printf_i+0xee>
 80062b4:	0641      	lsls	r1, r0, #25
 80062b6:	d5fb      	bpl.n	80062b0 <_printf_i+0xe4>
 80062b8:	881e      	ldrh	r6, [r3, #0]
 80062ba:	2f6f      	cmp	r7, #111	; 0x6f
 80062bc:	bf0c      	ite	eq
 80062be:	2308      	moveq	r3, #8
 80062c0:	230a      	movne	r3, #10
 80062c2:	4851      	ldr	r0, [pc, #324]	; (8006408 <_printf_i+0x23c>)
 80062c4:	2100      	movs	r1, #0
 80062c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062ca:	6865      	ldr	r5, [r4, #4]
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	bfa8      	it	ge
 80062d0:	6821      	ldrge	r1, [r4, #0]
 80062d2:	60a5      	str	r5, [r4, #8]
 80062d4:	bfa4      	itt	ge
 80062d6:	f021 0104 	bicge.w	r1, r1, #4
 80062da:	6021      	strge	r1, [r4, #0]
 80062dc:	b90e      	cbnz	r6, 80062e2 <_printf_i+0x116>
 80062de:	2d00      	cmp	r5, #0
 80062e0:	d04b      	beq.n	800637a <_printf_i+0x1ae>
 80062e2:	4615      	mov	r5, r2
 80062e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80062e8:	fb03 6711 	mls	r7, r3, r1, r6
 80062ec:	5dc7      	ldrb	r7, [r0, r7]
 80062ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062f2:	4637      	mov	r7, r6
 80062f4:	42bb      	cmp	r3, r7
 80062f6:	460e      	mov	r6, r1
 80062f8:	d9f4      	bls.n	80062e4 <_printf_i+0x118>
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d10b      	bne.n	8006316 <_printf_i+0x14a>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	07de      	lsls	r6, r3, #31
 8006302:	d508      	bpl.n	8006316 <_printf_i+0x14a>
 8006304:	6923      	ldr	r3, [r4, #16]
 8006306:	6861      	ldr	r1, [r4, #4]
 8006308:	4299      	cmp	r1, r3
 800630a:	bfde      	ittt	le
 800630c:	2330      	movle	r3, #48	; 0x30
 800630e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006312:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006316:	1b52      	subs	r2, r2, r5
 8006318:	6122      	str	r2, [r4, #16]
 800631a:	464b      	mov	r3, r9
 800631c:	4621      	mov	r1, r4
 800631e:	4640      	mov	r0, r8
 8006320:	f8cd a000 	str.w	sl, [sp]
 8006324:	aa03      	add	r2, sp, #12
 8006326:	f7ff fedf 	bl	80060e8 <_printf_common>
 800632a:	3001      	adds	r0, #1
 800632c:	d14a      	bne.n	80063c4 <_printf_i+0x1f8>
 800632e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006332:	b004      	add	sp, #16
 8006334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	f043 0320 	orr.w	r3, r3, #32
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	2778      	movs	r7, #120	; 0x78
 8006342:	4832      	ldr	r0, [pc, #200]	; (800640c <_printf_i+0x240>)
 8006344:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	6829      	ldr	r1, [r5, #0]
 800634c:	061f      	lsls	r7, r3, #24
 800634e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006352:	d402      	bmi.n	800635a <_printf_i+0x18e>
 8006354:	065f      	lsls	r7, r3, #25
 8006356:	bf48      	it	mi
 8006358:	b2b6      	uxthmi	r6, r6
 800635a:	07df      	lsls	r7, r3, #31
 800635c:	bf48      	it	mi
 800635e:	f043 0320 	orrmi.w	r3, r3, #32
 8006362:	6029      	str	r1, [r5, #0]
 8006364:	bf48      	it	mi
 8006366:	6023      	strmi	r3, [r4, #0]
 8006368:	b91e      	cbnz	r6, 8006372 <_printf_i+0x1a6>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	f023 0320 	bic.w	r3, r3, #32
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	2310      	movs	r3, #16
 8006374:	e7a6      	b.n	80062c4 <_printf_i+0xf8>
 8006376:	4824      	ldr	r0, [pc, #144]	; (8006408 <_printf_i+0x23c>)
 8006378:	e7e4      	b.n	8006344 <_printf_i+0x178>
 800637a:	4615      	mov	r5, r2
 800637c:	e7bd      	b.n	80062fa <_printf_i+0x12e>
 800637e:	682b      	ldr	r3, [r5, #0]
 8006380:	6826      	ldr	r6, [r4, #0]
 8006382:	1d18      	adds	r0, r3, #4
 8006384:	6961      	ldr	r1, [r4, #20]
 8006386:	6028      	str	r0, [r5, #0]
 8006388:	0635      	lsls	r5, r6, #24
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	d501      	bpl.n	8006392 <_printf_i+0x1c6>
 800638e:	6019      	str	r1, [r3, #0]
 8006390:	e002      	b.n	8006398 <_printf_i+0x1cc>
 8006392:	0670      	lsls	r0, r6, #25
 8006394:	d5fb      	bpl.n	800638e <_printf_i+0x1c2>
 8006396:	8019      	strh	r1, [r3, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	4615      	mov	r5, r2
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	e7bc      	b.n	800631a <_printf_i+0x14e>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	2100      	movs	r1, #0
 80063a4:	1d1a      	adds	r2, r3, #4
 80063a6:	602a      	str	r2, [r5, #0]
 80063a8:	681d      	ldr	r5, [r3, #0]
 80063aa:	6862      	ldr	r2, [r4, #4]
 80063ac:	4628      	mov	r0, r5
 80063ae:	f000 f859 	bl	8006464 <memchr>
 80063b2:	b108      	cbz	r0, 80063b8 <_printf_i+0x1ec>
 80063b4:	1b40      	subs	r0, r0, r5
 80063b6:	6060      	str	r0, [r4, #4]
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	2300      	movs	r3, #0
 80063be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c2:	e7aa      	b.n	800631a <_printf_i+0x14e>
 80063c4:	462a      	mov	r2, r5
 80063c6:	4649      	mov	r1, r9
 80063c8:	4640      	mov	r0, r8
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	47d0      	blx	sl
 80063ce:	3001      	adds	r0, #1
 80063d0:	d0ad      	beq.n	800632e <_printf_i+0x162>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	079b      	lsls	r3, r3, #30
 80063d6:	d413      	bmi.n	8006400 <_printf_i+0x234>
 80063d8:	68e0      	ldr	r0, [r4, #12]
 80063da:	9b03      	ldr	r3, [sp, #12]
 80063dc:	4298      	cmp	r0, r3
 80063de:	bfb8      	it	lt
 80063e0:	4618      	movlt	r0, r3
 80063e2:	e7a6      	b.n	8006332 <_printf_i+0x166>
 80063e4:	2301      	movs	r3, #1
 80063e6:	4632      	mov	r2, r6
 80063e8:	4649      	mov	r1, r9
 80063ea:	4640      	mov	r0, r8
 80063ec:	47d0      	blx	sl
 80063ee:	3001      	adds	r0, #1
 80063f0:	d09d      	beq.n	800632e <_printf_i+0x162>
 80063f2:	3501      	adds	r5, #1
 80063f4:	68e3      	ldr	r3, [r4, #12]
 80063f6:	9903      	ldr	r1, [sp, #12]
 80063f8:	1a5b      	subs	r3, r3, r1
 80063fa:	42ab      	cmp	r3, r5
 80063fc:	dcf2      	bgt.n	80063e4 <_printf_i+0x218>
 80063fe:	e7eb      	b.n	80063d8 <_printf_i+0x20c>
 8006400:	2500      	movs	r5, #0
 8006402:	f104 0619 	add.w	r6, r4, #25
 8006406:	e7f5      	b.n	80063f4 <_printf_i+0x228>
 8006408:	080065cf 	.word	0x080065cf
 800640c:	080065e0 	.word	0x080065e0

08006410 <memmove>:
 8006410:	4288      	cmp	r0, r1
 8006412:	b510      	push	{r4, lr}
 8006414:	eb01 0402 	add.w	r4, r1, r2
 8006418:	d902      	bls.n	8006420 <memmove+0x10>
 800641a:	4284      	cmp	r4, r0
 800641c:	4623      	mov	r3, r4
 800641e:	d807      	bhi.n	8006430 <memmove+0x20>
 8006420:	1e43      	subs	r3, r0, #1
 8006422:	42a1      	cmp	r1, r4
 8006424:	d008      	beq.n	8006438 <memmove+0x28>
 8006426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800642a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800642e:	e7f8      	b.n	8006422 <memmove+0x12>
 8006430:	4601      	mov	r1, r0
 8006432:	4402      	add	r2, r0
 8006434:	428a      	cmp	r2, r1
 8006436:	d100      	bne.n	800643a <memmove+0x2a>
 8006438:	bd10      	pop	{r4, pc}
 800643a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800643e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006442:	e7f7      	b.n	8006434 <memmove+0x24>

08006444 <_sbrk_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	2300      	movs	r3, #0
 8006448:	4d05      	ldr	r5, [pc, #20]	; (8006460 <_sbrk_r+0x1c>)
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	f7fa fa68 	bl	8000924 <_sbrk>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_sbrk_r+0x1a>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_sbrk_r+0x1a>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	20001c28 	.word	0x20001c28

08006464 <memchr>:
 8006464:	4603      	mov	r3, r0
 8006466:	b510      	push	{r4, lr}
 8006468:	b2c9      	uxtb	r1, r1
 800646a:	4402      	add	r2, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	4618      	mov	r0, r3
 8006470:	d101      	bne.n	8006476 <memchr+0x12>
 8006472:	2000      	movs	r0, #0
 8006474:	e003      	b.n	800647e <memchr+0x1a>
 8006476:	7804      	ldrb	r4, [r0, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	428c      	cmp	r4, r1
 800647c:	d1f6      	bne.n	800646c <memchr+0x8>
 800647e:	bd10      	pop	{r4, pc}

08006480 <_realloc_r>:
 8006480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006484:	4680      	mov	r8, r0
 8006486:	4614      	mov	r4, r2
 8006488:	460e      	mov	r6, r1
 800648a:	b921      	cbnz	r1, 8006496 <_realloc_r+0x16>
 800648c:	4611      	mov	r1, r2
 800648e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006492:	f7ff bc45 	b.w	8005d20 <_malloc_r>
 8006496:	b92a      	cbnz	r2, 80064a4 <_realloc_r+0x24>
 8006498:	f7ff fbda 	bl	8005c50 <_free_r>
 800649c:	4625      	mov	r5, r4
 800649e:	4628      	mov	r0, r5
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a4:	f000 f81b 	bl	80064de <_malloc_usable_size_r>
 80064a8:	4284      	cmp	r4, r0
 80064aa:	4607      	mov	r7, r0
 80064ac:	d802      	bhi.n	80064b4 <_realloc_r+0x34>
 80064ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064b2:	d812      	bhi.n	80064da <_realloc_r+0x5a>
 80064b4:	4621      	mov	r1, r4
 80064b6:	4640      	mov	r0, r8
 80064b8:	f7ff fc32 	bl	8005d20 <_malloc_r>
 80064bc:	4605      	mov	r5, r0
 80064be:	2800      	cmp	r0, #0
 80064c0:	d0ed      	beq.n	800649e <_realloc_r+0x1e>
 80064c2:	42bc      	cmp	r4, r7
 80064c4:	4622      	mov	r2, r4
 80064c6:	4631      	mov	r1, r6
 80064c8:	bf28      	it	cs
 80064ca:	463a      	movcs	r2, r7
 80064cc:	f7ff fbb2 	bl	8005c34 <memcpy>
 80064d0:	4631      	mov	r1, r6
 80064d2:	4640      	mov	r0, r8
 80064d4:	f7ff fbbc 	bl	8005c50 <_free_r>
 80064d8:	e7e1      	b.n	800649e <_realloc_r+0x1e>
 80064da:	4635      	mov	r5, r6
 80064dc:	e7df      	b.n	800649e <_realloc_r+0x1e>

080064de <_malloc_usable_size_r>:
 80064de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e2:	1f18      	subs	r0, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfbc      	itt	lt
 80064e8:	580b      	ldrlt	r3, [r1, r0]
 80064ea:	18c0      	addlt	r0, r0, r3
 80064ec:	4770      	bx	lr
	...

080064f0 <_init>:
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f2:	bf00      	nop
 80064f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f6:	bc08      	pop	{r3}
 80064f8:	469e      	mov	lr, r3
 80064fa:	4770      	bx	lr

080064fc <_fini>:
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	bf00      	nop
 8006500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006502:	bc08      	pop	{r3}
 8006504:	469e      	mov	lr, r3
 8006506:	4770      	bx	lr
